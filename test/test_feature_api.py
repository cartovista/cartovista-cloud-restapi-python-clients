# coding: utf-8

"""
    CartoVista REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import unittest

import cartovista_cloud_clients
from cartovista_cloud_clients.api.feature_api import FeatureApi  # noqa: E501
from cartovista_cloud_clients.rest import ApiException


class TestFeatureApi(unittest.TestCase):
    """FeatureApi unit test stubs"""

    def setUp(self):
        self.api = FeatureApi()  # noqa: E501

    def tearDown(self):
        pass

    def test_feature_create_features_from_geo_json(self):
        """Test case for feature_create_features_from_geo_json

        Creates a feature using the provided geometry in GeoJSON format.  # noqa: E501
        """
        pass

    def test_feature_create_features_from_long_lat(self):
        """Test case for feature_create_features_from_long_lat

        Creates a feature from the provided latutude and longitude coordinates. The layer must be a point layer.  # noqa: E501
        """
        pass

    def test_feature_create_features_from_wkt(self):
        """Test case for feature_create_features_from_wkt

        Creates a feature using the provided geometry in WKT format.  # noqa: E501
        """
        pass

    def test_feature_create_update_features_from_geo_json(self):
        """Test case for feature_create_update_features_from_geo_json

        Creates a feature or updates it if it already exists with the input geometry in GeoJSON format.  # noqa: E501
        """
        pass

    def test_feature_create_update_features_from_long_lat(self):
        """Test case for feature_create_update_features_from_long_lat

        Creates a feature or update it if it already exists with provided latutude and longitude coordinates. The layer must be a point layer.  # noqa: E501
        """
        pass

    def test_feature_create_update_features_from_wkt(self):
        """Test case for feature_create_update_features_from_wkt

        Creates a feature or updates it if it already exists with the input geometry in WKT format.  # noqa: E501
        """
        pass

    def test_feature_delete_feature(self):
        """Test case for feature_delete_feature

        Deletes a specific feature.  # noqa: E501
        """
        pass

    def test_feature_delete_features(self):
        """Test case for feature_delete_features

        Deletes a set of features. Invalid identifiers are ignored.  # noqa: E501
        """
        pass

    def test_feature_delete_features_by_values(self):
        """Test case for feature_delete_features_by_values

        Deletes all the features where the column values are included in the list of values.  # noqa: E501
        """
        pass

    def test_feature_get_feature_data(self):
        """Test case for feature_get_feature_data

        Gets a feature's data.  # noqa: E501
        """
        pass

    def test_feature_get_feature_in_geo_json(self):
        """Test case for feature_get_feature_in_geo_json

        Gets a specific feature with its geometry in GeoJSON format.  # noqa: E501
        """
        pass

    def test_feature_get_feature_in_long_lat(self):
        """Test case for feature_get_feature_in_long_lat

        Gets a specific feature with its coordinates. The layer must be a point layer.  # noqa: E501
        """
        pass

    def test_feature_get_feature_in_wkt(self):
        """Test case for feature_get_feature_in_wkt

        Gets a specific feature with its geometry in WKT format.  # noqa: E501
        """
        pass

    def test_feature_get_features(self):
        """Test case for feature_get_features

        Gets the rows in the layer.  # noqa: E501
        """
        pass

    def test_feature_get_features_at_location_in_geo_json(self):
        """Test case for feature_get_features_at_location_in_geo_json

        Return all the features with all their associated data intersecting the specified coordinates.  # noqa: E501
        """
        pass

    def test_feature_get_features_at_location_in_long_lat(self):
        """Test case for feature_get_features_at_location_in_long_lat

        Return all the features with all their associated data intersecting the specified coordinates. Important: this api call will only work if the queried layer has points. For any other geometry type, use the GeoJSON or WKT call instead.  # noqa: E501
        """
        pass

    def test_feature_get_features_at_location_in_wkt(self):
        """Test case for feature_get_features_at_location_in_wkt

        Return all the features with all their associated data intersecting the specified coordinates.  # noqa: E501
        """
        pass

    def test_feature_get_features_in_geo_json(self):
        """Test case for feature_get_features_in_geo_json

        Gets the layer's features with the geometries in GeoJSON format.  # noqa: E501
        """
        pass

    def test_feature_get_features_in_long_lat(self):
        """Test case for feature_get_features_in_long_lat

        Retrives the layer's features with their coordinates. The layer must be a point layer.  # noqa: E501
        """
        pass

    def test_feature_get_features_in_wkt(self):
        """Test case for feature_get_features_in_wkt

        Gets the layer's features with the geometries in WKT format.  # noqa: E501
        """
        pass

    def test_feature_update_from_geo_json(self):
        """Test case for feature_update_from_geo_json

        Updates a feature's geometry from a GeoJSON.  # noqa: E501
        """
        pass

    def test_feature_update_from_long_lat(self):
        """Test case for feature_update_from_long_lat

        Updates a feature's geometry with coordinates. The layer must a point layer.  # noqa: E501
        """
        pass

    def test_feature_update_geometry_from_wkt(self):
        """Test case for feature_update_geometry_from_wkt

        Updates a feature's geometry from a WKT.  # noqa: E501
        """
        pass

    def test_feature_update_values(self):
        """Test case for feature_update_values

        Updates a feature's data. A subset of the columns can be used.  # noqa: E501
        """
        pass


if __name__ == '__main__':
    unittest.main()
