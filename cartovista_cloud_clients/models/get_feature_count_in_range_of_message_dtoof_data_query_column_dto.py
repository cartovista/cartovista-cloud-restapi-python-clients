# coding: utf-8

"""
    CartoVista REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetFeatureCountInRangeOfMessageDTOOfDataQueryColumnDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data_column': 'OneOfGetFeatureCountInRangeOfMessageDTOOfDataQueryColumnDTODataColumn',
        'filter_data_columns': 'list[DataQueryColumnDTO]',
        'range_of_value': 'RangeOfValueDTO',
        'spatial_filter': 'OneOfGetFeatureCountInRangeOfMessageDTOOfDataQueryColumnDTOSpatialFilter',
        'time_range': 'TimeRangeDTO'
    }

    attribute_map = {
        'data_column': 'dataColumn',
        'filter_data_columns': 'filterDataColumns',
        'range_of_value': 'rangeOfValue',
        'spatial_filter': 'spatialFilter',
        'time_range': 'timeRange'
    }

    def __init__(self, data_column=None, filter_data_columns=None, range_of_value=None, spatial_filter=None, time_range=None):  # noqa: E501
        """GetFeatureCountInRangeOfMessageDTOOfDataQueryColumnDTO - a model defined in Swagger"""  # noqa: E501
        self._data_column = None
        self._filter_data_columns = None
        self._range_of_value = None
        self._spatial_filter = None
        self._time_range = None
        self.discriminator = None
        if data_column is not None:
            self.data_column = data_column
        if filter_data_columns is not None:
            self.filter_data_columns = filter_data_columns
        if range_of_value is not None:
            self.range_of_value = range_of_value
        if spatial_filter is not None:
            self.spatial_filter = spatial_filter
        if time_range is not None:
            self.time_range = time_range

    @property
    def data_column(self):
        """Gets the data_column of this GetFeatureCountInRangeOfMessageDTOOfDataQueryColumnDTO.  # noqa: E501


        :return: The data_column of this GetFeatureCountInRangeOfMessageDTOOfDataQueryColumnDTO.  # noqa: E501
        :rtype: OneOfGetFeatureCountInRangeOfMessageDTOOfDataQueryColumnDTODataColumn
        """
        return self._data_column

    @data_column.setter
    def data_column(self, data_column):
        """Sets the data_column of this GetFeatureCountInRangeOfMessageDTOOfDataQueryColumnDTO.


        :param data_column: The data_column of this GetFeatureCountInRangeOfMessageDTOOfDataQueryColumnDTO.  # noqa: E501
        :type: OneOfGetFeatureCountInRangeOfMessageDTOOfDataQueryColumnDTODataColumn
        """

        self._data_column = data_column

    @property
    def filter_data_columns(self):
        """Gets the filter_data_columns of this GetFeatureCountInRangeOfMessageDTOOfDataQueryColumnDTO.  # noqa: E501


        :return: The filter_data_columns of this GetFeatureCountInRangeOfMessageDTOOfDataQueryColumnDTO.  # noqa: E501
        :rtype: list[DataQueryColumnDTO]
        """
        return self._filter_data_columns

    @filter_data_columns.setter
    def filter_data_columns(self, filter_data_columns):
        """Sets the filter_data_columns of this GetFeatureCountInRangeOfMessageDTOOfDataQueryColumnDTO.


        :param filter_data_columns: The filter_data_columns of this GetFeatureCountInRangeOfMessageDTOOfDataQueryColumnDTO.  # noqa: E501
        :type: list[DataQueryColumnDTO]
        """

        self._filter_data_columns = filter_data_columns

    @property
    def range_of_value(self):
        """Gets the range_of_value of this GetFeatureCountInRangeOfMessageDTOOfDataQueryColumnDTO.  # noqa: E501


        :return: The range_of_value of this GetFeatureCountInRangeOfMessageDTOOfDataQueryColumnDTO.  # noqa: E501
        :rtype: RangeOfValueDTO
        """
        return self._range_of_value

    @range_of_value.setter
    def range_of_value(self, range_of_value):
        """Sets the range_of_value of this GetFeatureCountInRangeOfMessageDTOOfDataQueryColumnDTO.


        :param range_of_value: The range_of_value of this GetFeatureCountInRangeOfMessageDTOOfDataQueryColumnDTO.  # noqa: E501
        :type: RangeOfValueDTO
        """

        self._range_of_value = range_of_value

    @property
    def spatial_filter(self):
        """Gets the spatial_filter of this GetFeatureCountInRangeOfMessageDTOOfDataQueryColumnDTO.  # noqa: E501


        :return: The spatial_filter of this GetFeatureCountInRangeOfMessageDTOOfDataQueryColumnDTO.  # noqa: E501
        :rtype: OneOfGetFeatureCountInRangeOfMessageDTOOfDataQueryColumnDTOSpatialFilter
        """
        return self._spatial_filter

    @spatial_filter.setter
    def spatial_filter(self, spatial_filter):
        """Sets the spatial_filter of this GetFeatureCountInRangeOfMessageDTOOfDataQueryColumnDTO.


        :param spatial_filter: The spatial_filter of this GetFeatureCountInRangeOfMessageDTOOfDataQueryColumnDTO.  # noqa: E501
        :type: OneOfGetFeatureCountInRangeOfMessageDTOOfDataQueryColumnDTOSpatialFilter
        """

        self._spatial_filter = spatial_filter

    @property
    def time_range(self):
        """Gets the time_range of this GetFeatureCountInRangeOfMessageDTOOfDataQueryColumnDTO.  # noqa: E501


        :return: The time_range of this GetFeatureCountInRangeOfMessageDTOOfDataQueryColumnDTO.  # noqa: E501
        :rtype: TimeRangeDTO
        """
        return self._time_range

    @time_range.setter
    def time_range(self, time_range):
        """Sets the time_range of this GetFeatureCountInRangeOfMessageDTOOfDataQueryColumnDTO.


        :param time_range: The time_range of this GetFeatureCountInRangeOfMessageDTOOfDataQueryColumnDTO.  # noqa: E501
        :type: TimeRangeDTO
        """

        self._time_range = time_range

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetFeatureCountInRangeOfMessageDTOOfDataQueryColumnDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetFeatureCountInRangeOfMessageDTOOfDataQueryColumnDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
