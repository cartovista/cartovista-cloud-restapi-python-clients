# coding: utf-8

"""
    CartoVista REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PortalConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'userflow_token': 'str',
        'rechaptcha_site_key': 'str',
        'facebook_app_id': 'str',
        'google_client_id': 'str',
        'feature_flags': 'dict(str, bool)',
        'map_symbols': 'list[MapSymbolFont]',
        'background_font': 'MapSymbolFont',
        'categories_font_url': 'str'
    }

    attribute_map = {
        'userflow_token': 'userflowToken',
        'rechaptcha_site_key': 'rechaptchaSiteKey',
        'facebook_app_id': 'facebookAppId',
        'google_client_id': 'googleClientId',
        'feature_flags': 'featureFlags',
        'map_symbols': 'mapSymbols',
        'background_font': 'backgroundFont',
        'categories_font_url': 'categoriesFontUrl'
    }

    def __init__(self, userflow_token=None, rechaptcha_site_key=None, facebook_app_id=None, google_client_id=None, feature_flags=None, map_symbols=None, background_font=None, categories_font_url=None):  # noqa: E501
        """PortalConfiguration - a model defined in Swagger"""  # noqa: E501
        self._userflow_token = None
        self._rechaptcha_site_key = None
        self._facebook_app_id = None
        self._google_client_id = None
        self._feature_flags = None
        self._map_symbols = None
        self._background_font = None
        self._categories_font_url = None
        self.discriminator = None
        if userflow_token is not None:
            self.userflow_token = userflow_token
        if rechaptcha_site_key is not None:
            self.rechaptcha_site_key = rechaptcha_site_key
        if facebook_app_id is not None:
            self.facebook_app_id = facebook_app_id
        if google_client_id is not None:
            self.google_client_id = google_client_id
        if feature_flags is not None:
            self.feature_flags = feature_flags
        if map_symbols is not None:
            self.map_symbols = map_symbols
        if background_font is not None:
            self.background_font = background_font
        if categories_font_url is not None:
            self.categories_font_url = categories_font_url

    @property
    def userflow_token(self):
        """Gets the userflow_token of this PortalConfiguration.  # noqa: E501


        :return: The userflow_token of this PortalConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._userflow_token

    @userflow_token.setter
    def userflow_token(self, userflow_token):
        """Sets the userflow_token of this PortalConfiguration.


        :param userflow_token: The userflow_token of this PortalConfiguration.  # noqa: E501
        :type: str
        """

        self._userflow_token = userflow_token

    @property
    def rechaptcha_site_key(self):
        """Gets the rechaptcha_site_key of this PortalConfiguration.  # noqa: E501


        :return: The rechaptcha_site_key of this PortalConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._rechaptcha_site_key

    @rechaptcha_site_key.setter
    def rechaptcha_site_key(self, rechaptcha_site_key):
        """Sets the rechaptcha_site_key of this PortalConfiguration.


        :param rechaptcha_site_key: The rechaptcha_site_key of this PortalConfiguration.  # noqa: E501
        :type: str
        """

        self._rechaptcha_site_key = rechaptcha_site_key

    @property
    def facebook_app_id(self):
        """Gets the facebook_app_id of this PortalConfiguration.  # noqa: E501


        :return: The facebook_app_id of this PortalConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._facebook_app_id

    @facebook_app_id.setter
    def facebook_app_id(self, facebook_app_id):
        """Sets the facebook_app_id of this PortalConfiguration.


        :param facebook_app_id: The facebook_app_id of this PortalConfiguration.  # noqa: E501
        :type: str
        """

        self._facebook_app_id = facebook_app_id

    @property
    def google_client_id(self):
        """Gets the google_client_id of this PortalConfiguration.  # noqa: E501


        :return: The google_client_id of this PortalConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._google_client_id

    @google_client_id.setter
    def google_client_id(self, google_client_id):
        """Sets the google_client_id of this PortalConfiguration.


        :param google_client_id: The google_client_id of this PortalConfiguration.  # noqa: E501
        :type: str
        """

        self._google_client_id = google_client_id

    @property
    def feature_flags(self):
        """Gets the feature_flags of this PortalConfiguration.  # noqa: E501


        :return: The feature_flags of this PortalConfiguration.  # noqa: E501
        :rtype: dict(str, bool)
        """
        return self._feature_flags

    @feature_flags.setter
    def feature_flags(self, feature_flags):
        """Sets the feature_flags of this PortalConfiguration.


        :param feature_flags: The feature_flags of this PortalConfiguration.  # noqa: E501
        :type: dict(str, bool)
        """

        self._feature_flags = feature_flags

    @property
    def map_symbols(self):
        """Gets the map_symbols of this PortalConfiguration.  # noqa: E501


        :return: The map_symbols of this PortalConfiguration.  # noqa: E501
        :rtype: list[MapSymbolFont]
        """
        return self._map_symbols

    @map_symbols.setter
    def map_symbols(self, map_symbols):
        """Sets the map_symbols of this PortalConfiguration.


        :param map_symbols: The map_symbols of this PortalConfiguration.  # noqa: E501
        :type: list[MapSymbolFont]
        """

        self._map_symbols = map_symbols

    @property
    def background_font(self):
        """Gets the background_font of this PortalConfiguration.  # noqa: E501


        :return: The background_font of this PortalConfiguration.  # noqa: E501
        :rtype: MapSymbolFont
        """
        return self._background_font

    @background_font.setter
    def background_font(self, background_font):
        """Sets the background_font of this PortalConfiguration.


        :param background_font: The background_font of this PortalConfiguration.  # noqa: E501
        :type: MapSymbolFont
        """

        self._background_font = background_font

    @property
    def categories_font_url(self):
        """Gets the categories_font_url of this PortalConfiguration.  # noqa: E501


        :return: The categories_font_url of this PortalConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._categories_font_url

    @categories_font_url.setter
    def categories_font_url(self, categories_font_url):
        """Sets the categories_font_url of this PortalConfiguration.


        :param categories_font_url: The categories_font_url of this PortalConfiguration.  # noqa: E501
        :type: str
        """

        self._categories_font_url = categories_font_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PortalConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PortalConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
