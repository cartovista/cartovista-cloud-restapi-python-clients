# coding: utf-8

"""
    CartoVista REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PoiAnalysis(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'map_id': 'str',
        'layer_id': 'str',
        'table_id': 'str',
        'analysis_layer_id': 'str',
        'results_table_id': 'str',
        'heatmap_layer_id': 'str',
        'kv_levels_column_id': 'str',
        'name': 'str',
        'kv_levels': 'list[float]',
        'scenarios_and_years': 'list[PoiAnalysisScenarioAndYear]',
        'has_footprint_polygon': 'bool',
        'is_pregenerating': 'bool',
        'can_use_worst_dispatch': 'bool',
        'generating_scenario_and_year_id': 'str',
        'extent': 'OneOfPoiAnalysisExtent',
        'custom_poi_analyses': 'list[CustomPoiAnalysis]',
        'transmission': 'OneOfPoiAnalysisTransmission'
    }

    attribute_map = {
        'map_id': 'mapId',
        'layer_id': 'layerId',
        'table_id': 'tableId',
        'analysis_layer_id': 'analysisLayerId',
        'results_table_id': 'resultsTableId',
        'heatmap_layer_id': 'heatmapLayerId',
        'kv_levels_column_id': 'kvLevelsColumnId',
        'name': 'name',
        'kv_levels': 'kvLevels',
        'scenarios_and_years': 'scenariosAndYears',
        'has_footprint_polygon': 'hasFootprintPolygon',
        'is_pregenerating': 'isPregenerating',
        'can_use_worst_dispatch': 'canUseWorstDispatch',
        'generating_scenario_and_year_id': 'generatingScenarioAndYearId',
        'extent': 'extent',
        'custom_poi_analyses': 'customPoiAnalyses',
        'transmission': 'transmission'
    }

    def __init__(self, map_id=None, layer_id=None, table_id=None, analysis_layer_id=None, results_table_id=None, heatmap_layer_id=None, kv_levels_column_id=None, name=None, kv_levels=None, scenarios_and_years=None, has_footprint_polygon=None, is_pregenerating=None, can_use_worst_dispatch=None, generating_scenario_and_year_id=None, extent=None, custom_poi_analyses=None, transmission=None):  # noqa: E501
        """PoiAnalysis - a model defined in Swagger"""  # noqa: E501
        self._map_id = None
        self._layer_id = None
        self._table_id = None
        self._analysis_layer_id = None
        self._results_table_id = None
        self._heatmap_layer_id = None
        self._kv_levels_column_id = None
        self._name = None
        self._kv_levels = None
        self._scenarios_and_years = None
        self._has_footprint_polygon = None
        self._is_pregenerating = None
        self._can_use_worst_dispatch = None
        self._generating_scenario_and_year_id = None
        self._extent = None
        self._custom_poi_analyses = None
        self._transmission = None
        self.discriminator = None
        if map_id is not None:
            self.map_id = map_id
        if layer_id is not None:
            self.layer_id = layer_id
        if table_id is not None:
            self.table_id = table_id
        if analysis_layer_id is not None:
            self.analysis_layer_id = analysis_layer_id
        if results_table_id is not None:
            self.results_table_id = results_table_id
        if heatmap_layer_id is not None:
            self.heatmap_layer_id = heatmap_layer_id
        if kv_levels_column_id is not None:
            self.kv_levels_column_id = kv_levels_column_id
        if name is not None:
            self.name = name
        if kv_levels is not None:
            self.kv_levels = kv_levels
        if scenarios_and_years is not None:
            self.scenarios_and_years = scenarios_and_years
        if has_footprint_polygon is not None:
            self.has_footprint_polygon = has_footprint_polygon
        if is_pregenerating is not None:
            self.is_pregenerating = is_pregenerating
        if can_use_worst_dispatch is not None:
            self.can_use_worst_dispatch = can_use_worst_dispatch
        if generating_scenario_and_year_id is not None:
            self.generating_scenario_and_year_id = generating_scenario_and_year_id
        if extent is not None:
            self.extent = extent
        if custom_poi_analyses is not None:
            self.custom_poi_analyses = custom_poi_analyses
        if transmission is not None:
            self.transmission = transmission

    @property
    def map_id(self):
        """Gets the map_id of this PoiAnalysis.  # noqa: E501


        :return: The map_id of this PoiAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._map_id

    @map_id.setter
    def map_id(self, map_id):
        """Sets the map_id of this PoiAnalysis.


        :param map_id: The map_id of this PoiAnalysis.  # noqa: E501
        :type: str
        """

        self._map_id = map_id

    @property
    def layer_id(self):
        """Gets the layer_id of this PoiAnalysis.  # noqa: E501


        :return: The layer_id of this PoiAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._layer_id

    @layer_id.setter
    def layer_id(self, layer_id):
        """Sets the layer_id of this PoiAnalysis.


        :param layer_id: The layer_id of this PoiAnalysis.  # noqa: E501
        :type: str
        """

        self._layer_id = layer_id

    @property
    def table_id(self):
        """Gets the table_id of this PoiAnalysis.  # noqa: E501


        :return: The table_id of this PoiAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._table_id

    @table_id.setter
    def table_id(self, table_id):
        """Sets the table_id of this PoiAnalysis.


        :param table_id: The table_id of this PoiAnalysis.  # noqa: E501
        :type: str
        """

        self._table_id = table_id

    @property
    def analysis_layer_id(self):
        """Gets the analysis_layer_id of this PoiAnalysis.  # noqa: E501


        :return: The analysis_layer_id of this PoiAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._analysis_layer_id

    @analysis_layer_id.setter
    def analysis_layer_id(self, analysis_layer_id):
        """Sets the analysis_layer_id of this PoiAnalysis.


        :param analysis_layer_id: The analysis_layer_id of this PoiAnalysis.  # noqa: E501
        :type: str
        """

        self._analysis_layer_id = analysis_layer_id

    @property
    def results_table_id(self):
        """Gets the results_table_id of this PoiAnalysis.  # noqa: E501


        :return: The results_table_id of this PoiAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._results_table_id

    @results_table_id.setter
    def results_table_id(self, results_table_id):
        """Sets the results_table_id of this PoiAnalysis.


        :param results_table_id: The results_table_id of this PoiAnalysis.  # noqa: E501
        :type: str
        """

        self._results_table_id = results_table_id

    @property
    def heatmap_layer_id(self):
        """Gets the heatmap_layer_id of this PoiAnalysis.  # noqa: E501


        :return: The heatmap_layer_id of this PoiAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._heatmap_layer_id

    @heatmap_layer_id.setter
    def heatmap_layer_id(self, heatmap_layer_id):
        """Sets the heatmap_layer_id of this PoiAnalysis.


        :param heatmap_layer_id: The heatmap_layer_id of this PoiAnalysis.  # noqa: E501
        :type: str
        """

        self._heatmap_layer_id = heatmap_layer_id

    @property
    def kv_levels_column_id(self):
        """Gets the kv_levels_column_id of this PoiAnalysis.  # noqa: E501


        :return: The kv_levels_column_id of this PoiAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._kv_levels_column_id

    @kv_levels_column_id.setter
    def kv_levels_column_id(self, kv_levels_column_id):
        """Sets the kv_levels_column_id of this PoiAnalysis.


        :param kv_levels_column_id: The kv_levels_column_id of this PoiAnalysis.  # noqa: E501
        :type: str
        """

        self._kv_levels_column_id = kv_levels_column_id

    @property
    def name(self):
        """Gets the name of this PoiAnalysis.  # noqa: E501


        :return: The name of this PoiAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PoiAnalysis.


        :param name: The name of this PoiAnalysis.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def kv_levels(self):
        """Gets the kv_levels of this PoiAnalysis.  # noqa: E501


        :return: The kv_levels of this PoiAnalysis.  # noqa: E501
        :rtype: list[float]
        """
        return self._kv_levels

    @kv_levels.setter
    def kv_levels(self, kv_levels):
        """Sets the kv_levels of this PoiAnalysis.


        :param kv_levels: The kv_levels of this PoiAnalysis.  # noqa: E501
        :type: list[float]
        """

        self._kv_levels = kv_levels

    @property
    def scenarios_and_years(self):
        """Gets the scenarios_and_years of this PoiAnalysis.  # noqa: E501


        :return: The scenarios_and_years of this PoiAnalysis.  # noqa: E501
        :rtype: list[PoiAnalysisScenarioAndYear]
        """
        return self._scenarios_and_years

    @scenarios_and_years.setter
    def scenarios_and_years(self, scenarios_and_years):
        """Sets the scenarios_and_years of this PoiAnalysis.


        :param scenarios_and_years: The scenarios_and_years of this PoiAnalysis.  # noqa: E501
        :type: list[PoiAnalysisScenarioAndYear]
        """

        self._scenarios_and_years = scenarios_and_years

    @property
    def has_footprint_polygon(self):
        """Gets the has_footprint_polygon of this PoiAnalysis.  # noqa: E501


        :return: The has_footprint_polygon of this PoiAnalysis.  # noqa: E501
        :rtype: bool
        """
        return self._has_footprint_polygon

    @has_footprint_polygon.setter
    def has_footprint_polygon(self, has_footprint_polygon):
        """Sets the has_footprint_polygon of this PoiAnalysis.


        :param has_footprint_polygon: The has_footprint_polygon of this PoiAnalysis.  # noqa: E501
        :type: bool
        """

        self._has_footprint_polygon = has_footprint_polygon

    @property
    def is_pregenerating(self):
        """Gets the is_pregenerating of this PoiAnalysis.  # noqa: E501


        :return: The is_pregenerating of this PoiAnalysis.  # noqa: E501
        :rtype: bool
        """
        return self._is_pregenerating

    @is_pregenerating.setter
    def is_pregenerating(self, is_pregenerating):
        """Sets the is_pregenerating of this PoiAnalysis.


        :param is_pregenerating: The is_pregenerating of this PoiAnalysis.  # noqa: E501
        :type: bool
        """

        self._is_pregenerating = is_pregenerating

    @property
    def can_use_worst_dispatch(self):
        """Gets the can_use_worst_dispatch of this PoiAnalysis.  # noqa: E501


        :return: The can_use_worst_dispatch of this PoiAnalysis.  # noqa: E501
        :rtype: bool
        """
        return self._can_use_worst_dispatch

    @can_use_worst_dispatch.setter
    def can_use_worst_dispatch(self, can_use_worst_dispatch):
        """Sets the can_use_worst_dispatch of this PoiAnalysis.


        :param can_use_worst_dispatch: The can_use_worst_dispatch of this PoiAnalysis.  # noqa: E501
        :type: bool
        """

        self._can_use_worst_dispatch = can_use_worst_dispatch

    @property
    def generating_scenario_and_year_id(self):
        """Gets the generating_scenario_and_year_id of this PoiAnalysis.  # noqa: E501


        :return: The generating_scenario_and_year_id of this PoiAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._generating_scenario_and_year_id

    @generating_scenario_and_year_id.setter
    def generating_scenario_and_year_id(self, generating_scenario_and_year_id):
        """Sets the generating_scenario_and_year_id of this PoiAnalysis.


        :param generating_scenario_and_year_id: The generating_scenario_and_year_id of this PoiAnalysis.  # noqa: E501
        :type: str
        """

        self._generating_scenario_and_year_id = generating_scenario_and_year_id

    @property
    def extent(self):
        """Gets the extent of this PoiAnalysis.  # noqa: E501


        :return: The extent of this PoiAnalysis.  # noqa: E501
        :rtype: OneOfPoiAnalysisExtent
        """
        return self._extent

    @extent.setter
    def extent(self, extent):
        """Sets the extent of this PoiAnalysis.


        :param extent: The extent of this PoiAnalysis.  # noqa: E501
        :type: OneOfPoiAnalysisExtent
        """

        self._extent = extent

    @property
    def custom_poi_analyses(self):
        """Gets the custom_poi_analyses of this PoiAnalysis.  # noqa: E501


        :return: The custom_poi_analyses of this PoiAnalysis.  # noqa: E501
        :rtype: list[CustomPoiAnalysis]
        """
        return self._custom_poi_analyses

    @custom_poi_analyses.setter
    def custom_poi_analyses(self, custom_poi_analyses):
        """Sets the custom_poi_analyses of this PoiAnalysis.


        :param custom_poi_analyses: The custom_poi_analyses of this PoiAnalysis.  # noqa: E501
        :type: list[CustomPoiAnalysis]
        """

        self._custom_poi_analyses = custom_poi_analyses

    @property
    def transmission(self):
        """Gets the transmission of this PoiAnalysis.  # noqa: E501


        :return: The transmission of this PoiAnalysis.  # noqa: E501
        :rtype: OneOfPoiAnalysisTransmission
        """
        return self._transmission

    @transmission.setter
    def transmission(self, transmission):
        """Sets the transmission of this PoiAnalysis.


        :param transmission: The transmission of this PoiAnalysis.  # noqa: E501
        :type: OneOfPoiAnalysisTransmission
        """

        self._transmission = transmission

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PoiAnalysis, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PoiAnalysis):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
