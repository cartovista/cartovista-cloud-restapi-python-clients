# coding: utf-8

"""
    CartoVista REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SlideLayout(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_fullscreen': 'bool',
        'components': 'PropertiesOfComponentLayout',
        'visibility': 'PropertiesOfBoolean'
    }

    attribute_map = {
        'is_fullscreen': 'isFullscreen',
        'components': 'components',
        'visibility': 'visibility'
    }

    def __init__(self, is_fullscreen=None, components=None, visibility=None):  # noqa: E501
        """SlideLayout - a model defined in Swagger"""  # noqa: E501
        self._is_fullscreen = None
        self._components = None
        self._visibility = None
        self.discriminator = None
        if is_fullscreen is not None:
            self.is_fullscreen = is_fullscreen
        if components is not None:
            self.components = components
        if visibility is not None:
            self.visibility = visibility

    @property
    def is_fullscreen(self):
        """Gets the is_fullscreen of this SlideLayout.  # noqa: E501


        :return: The is_fullscreen of this SlideLayout.  # noqa: E501
        :rtype: bool
        """
        return self._is_fullscreen

    @is_fullscreen.setter
    def is_fullscreen(self, is_fullscreen):
        """Sets the is_fullscreen of this SlideLayout.


        :param is_fullscreen: The is_fullscreen of this SlideLayout.  # noqa: E501
        :type: bool
        """

        self._is_fullscreen = is_fullscreen

    @property
    def components(self):
        """Gets the components of this SlideLayout.  # noqa: E501


        :return: The components of this SlideLayout.  # noqa: E501
        :rtype: PropertiesOfComponentLayout
        """
        return self._components

    @components.setter
    def components(self, components):
        """Sets the components of this SlideLayout.


        :param components: The components of this SlideLayout.  # noqa: E501
        :type: PropertiesOfComponentLayout
        """

        self._components = components

    @property
    def visibility(self):
        """Gets the visibility of this SlideLayout.  # noqa: E501


        :return: The visibility of this SlideLayout.  # noqa: E501
        :rtype: PropertiesOfBoolean
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """Sets the visibility of this SlideLayout.


        :param visibility: The visibility of this SlideLayout.  # noqa: E501
        :type: PropertiesOfBoolean
        """

        self._visibility = visibility

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SlideLayout, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SlideLayout):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
