# coding: utf-8

"""
    CartoVista REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DataElements(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data_tables': 'list[DataTable]',
        'spatial_metadatas': 'list[Layer]',
        'grid_layers': 'list[GridLayer]',
        'wmts_layers': 'list[WmtsLayer]',
        'wms_layers': 'list[WmsLayer]',
        'folders': 'list[Folder]',
        'folder_id': 'str',
        'path_folders': 'list[Folder]'
    }

    attribute_map = {
        'data_tables': 'dataTables',
        'spatial_metadatas': 'spatialMetadatas',
        'grid_layers': 'gridLayers',
        'wmts_layers': 'wmtsLayers',
        'wms_layers': 'wmsLayers',
        'folders': 'folders',
        'folder_id': 'folderId',
        'path_folders': 'pathFolders'
    }

    def __init__(self, data_tables=None, spatial_metadatas=None, grid_layers=None, wmts_layers=None, wms_layers=None, folders=None, folder_id=None, path_folders=None):  # noqa: E501
        """DataElements - a model defined in Swagger"""  # noqa: E501
        self._data_tables = None
        self._spatial_metadatas = None
        self._grid_layers = None
        self._wmts_layers = None
        self._wms_layers = None
        self._folders = None
        self._folder_id = None
        self._path_folders = None
        self.discriminator = None
        if data_tables is not None:
            self.data_tables = data_tables
        if spatial_metadatas is not None:
            self.spatial_metadatas = spatial_metadatas
        if grid_layers is not None:
            self.grid_layers = grid_layers
        if wmts_layers is not None:
            self.wmts_layers = wmts_layers
        if wms_layers is not None:
            self.wms_layers = wms_layers
        if folders is not None:
            self.folders = folders
        if folder_id is not None:
            self.folder_id = folder_id
        if path_folders is not None:
            self.path_folders = path_folders

    @property
    def data_tables(self):
        """Gets the data_tables of this DataElements.  # noqa: E501


        :return: The data_tables of this DataElements.  # noqa: E501
        :rtype: list[DataTable]
        """
        return self._data_tables

    @data_tables.setter
    def data_tables(self, data_tables):
        """Sets the data_tables of this DataElements.


        :param data_tables: The data_tables of this DataElements.  # noqa: E501
        :type: list[DataTable]
        """

        self._data_tables = data_tables

    @property
    def spatial_metadatas(self):
        """Gets the spatial_metadatas of this DataElements.  # noqa: E501


        :return: The spatial_metadatas of this DataElements.  # noqa: E501
        :rtype: list[Layer]
        """
        return self._spatial_metadatas

    @spatial_metadatas.setter
    def spatial_metadatas(self, spatial_metadatas):
        """Sets the spatial_metadatas of this DataElements.


        :param spatial_metadatas: The spatial_metadatas of this DataElements.  # noqa: E501
        :type: list[Layer]
        """

        self._spatial_metadatas = spatial_metadatas

    @property
    def grid_layers(self):
        """Gets the grid_layers of this DataElements.  # noqa: E501


        :return: The grid_layers of this DataElements.  # noqa: E501
        :rtype: list[GridLayer]
        """
        return self._grid_layers

    @grid_layers.setter
    def grid_layers(self, grid_layers):
        """Sets the grid_layers of this DataElements.


        :param grid_layers: The grid_layers of this DataElements.  # noqa: E501
        :type: list[GridLayer]
        """

        self._grid_layers = grid_layers

    @property
    def wmts_layers(self):
        """Gets the wmts_layers of this DataElements.  # noqa: E501


        :return: The wmts_layers of this DataElements.  # noqa: E501
        :rtype: list[WmtsLayer]
        """
        return self._wmts_layers

    @wmts_layers.setter
    def wmts_layers(self, wmts_layers):
        """Sets the wmts_layers of this DataElements.


        :param wmts_layers: The wmts_layers of this DataElements.  # noqa: E501
        :type: list[WmtsLayer]
        """

        self._wmts_layers = wmts_layers

    @property
    def wms_layers(self):
        """Gets the wms_layers of this DataElements.  # noqa: E501


        :return: The wms_layers of this DataElements.  # noqa: E501
        :rtype: list[WmsLayer]
        """
        return self._wms_layers

    @wms_layers.setter
    def wms_layers(self, wms_layers):
        """Sets the wms_layers of this DataElements.


        :param wms_layers: The wms_layers of this DataElements.  # noqa: E501
        :type: list[WmsLayer]
        """

        self._wms_layers = wms_layers

    @property
    def folders(self):
        """Gets the folders of this DataElements.  # noqa: E501


        :return: The folders of this DataElements.  # noqa: E501
        :rtype: list[Folder]
        """
        return self._folders

    @folders.setter
    def folders(self, folders):
        """Sets the folders of this DataElements.


        :param folders: The folders of this DataElements.  # noqa: E501
        :type: list[Folder]
        """

        self._folders = folders

    @property
    def folder_id(self):
        """Gets the folder_id of this DataElements.  # noqa: E501


        :return: The folder_id of this DataElements.  # noqa: E501
        :rtype: str
        """
        return self._folder_id

    @folder_id.setter
    def folder_id(self, folder_id):
        """Sets the folder_id of this DataElements.


        :param folder_id: The folder_id of this DataElements.  # noqa: E501
        :type: str
        """

        self._folder_id = folder_id

    @property
    def path_folders(self):
        """Gets the path_folders of this DataElements.  # noqa: E501


        :return: The path_folders of this DataElements.  # noqa: E501
        :rtype: list[Folder]
        """
        return self._path_folders

    @path_folders.setter
    def path_folders(self, path_folders):
        """Sets the path_folders of this DataElements.


        :param path_folders: The path_folders of this DataElements.  # noqa: E501
        :type: list[Folder]
        """

        self._path_folders = path_folders

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataElements, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataElements):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
