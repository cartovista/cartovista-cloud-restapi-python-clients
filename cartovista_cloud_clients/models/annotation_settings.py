# coding: utf-8

"""
    CartoVista REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AnnotationSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'text': 'TextSettings',
        'point': 'LayerSettingsPoint',
        'line': 'LayerSettingsPolyline',
        'polygon': 'LayerSettingsPolygon'
    }

    attribute_map = {
        'text': 'text',
        'point': 'point',
        'line': 'line',
        'polygon': 'polygon'
    }

    def __init__(self, text=None, point=None, line=None, polygon=None):  # noqa: E501
        """AnnotationSettings - a model defined in Swagger"""  # noqa: E501
        self._text = None
        self._point = None
        self._line = None
        self._polygon = None
        self.discriminator = None
        if text is not None:
            self.text = text
        if point is not None:
            self.point = point
        if line is not None:
            self.line = line
        if polygon is not None:
            self.polygon = polygon

    @property
    def text(self):
        """Gets the text of this AnnotationSettings.  # noqa: E501


        :return: The text of this AnnotationSettings.  # noqa: E501
        :rtype: TextSettings
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this AnnotationSettings.


        :param text: The text of this AnnotationSettings.  # noqa: E501
        :type: TextSettings
        """

        self._text = text

    @property
    def point(self):
        """Gets the point of this AnnotationSettings.  # noqa: E501


        :return: The point of this AnnotationSettings.  # noqa: E501
        :rtype: LayerSettingsPoint
        """
        return self._point

    @point.setter
    def point(self, point):
        """Sets the point of this AnnotationSettings.


        :param point: The point of this AnnotationSettings.  # noqa: E501
        :type: LayerSettingsPoint
        """

        self._point = point

    @property
    def line(self):
        """Gets the line of this AnnotationSettings.  # noqa: E501


        :return: The line of this AnnotationSettings.  # noqa: E501
        :rtype: LayerSettingsPolyline
        """
        return self._line

    @line.setter
    def line(self, line):
        """Sets the line of this AnnotationSettings.


        :param line: The line of this AnnotationSettings.  # noqa: E501
        :type: LayerSettingsPolyline
        """

        self._line = line

    @property
    def polygon(self):
        """Gets the polygon of this AnnotationSettings.  # noqa: E501


        :return: The polygon of this AnnotationSettings.  # noqa: E501
        :rtype: LayerSettingsPolygon
        """
        return self._polygon

    @polygon.setter
    def polygon(self, polygon):
        """Sets the polygon of this AnnotationSettings.


        :param polygon: The polygon of this AnnotationSettings.  # noqa: E501
        :type: LayerSettingsPolygon
        """

        self._polygon = polygon

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AnnotationSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnnotationSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
