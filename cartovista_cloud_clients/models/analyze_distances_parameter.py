# coding: utf-8

"""
    CartoVista REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AnalyzeDistancesParameter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'target_layer_id': 'str',
        'origin_feature_id': 'str',
        'maximum_nearest': 'int',
        'extent': 'ExtentDTO',
        'viewer_readable_coordinates': 'bool',
        'allowed_feature_ids': 'list[str]',
        'name_column_id': 'str'
    }

    attribute_map = {
        'target_layer_id': 'targetLayerId',
        'origin_feature_id': 'originFeatureId',
        'maximum_nearest': 'maximumNearest',
        'extent': 'extent',
        'viewer_readable_coordinates': 'viewerReadableCoordinates',
        'allowed_feature_ids': 'allowedFeatureIds',
        'name_column_id': 'nameColumnId'
    }

    def __init__(self, target_layer_id=None, origin_feature_id=None, maximum_nearest=None, extent=None, viewer_readable_coordinates=None, allowed_feature_ids=None, name_column_id=None):  # noqa: E501
        """AnalyzeDistancesParameter - a model defined in Swagger"""  # noqa: E501
        self._target_layer_id = None
        self._origin_feature_id = None
        self._maximum_nearest = None
        self._extent = None
        self._viewer_readable_coordinates = None
        self._allowed_feature_ids = None
        self._name_column_id = None
        self.discriminator = None
        if target_layer_id is not None:
            self.target_layer_id = target_layer_id
        if origin_feature_id is not None:
            self.origin_feature_id = origin_feature_id
        if maximum_nearest is not None:
            self.maximum_nearest = maximum_nearest
        if extent is not None:
            self.extent = extent
        if viewer_readable_coordinates is not None:
            self.viewer_readable_coordinates = viewer_readable_coordinates
        if allowed_feature_ids is not None:
            self.allowed_feature_ids = allowed_feature_ids
        if name_column_id is not None:
            self.name_column_id = name_column_id

    @property
    def target_layer_id(self):
        """Gets the target_layer_id of this AnalyzeDistancesParameter.  # noqa: E501


        :return: The target_layer_id of this AnalyzeDistancesParameter.  # noqa: E501
        :rtype: str
        """
        return self._target_layer_id

    @target_layer_id.setter
    def target_layer_id(self, target_layer_id):
        """Sets the target_layer_id of this AnalyzeDistancesParameter.


        :param target_layer_id: The target_layer_id of this AnalyzeDistancesParameter.  # noqa: E501
        :type: str
        """

        self._target_layer_id = target_layer_id

    @property
    def origin_feature_id(self):
        """Gets the origin_feature_id of this AnalyzeDistancesParameter.  # noqa: E501


        :return: The origin_feature_id of this AnalyzeDistancesParameter.  # noqa: E501
        :rtype: str
        """
        return self._origin_feature_id

    @origin_feature_id.setter
    def origin_feature_id(self, origin_feature_id):
        """Sets the origin_feature_id of this AnalyzeDistancesParameter.


        :param origin_feature_id: The origin_feature_id of this AnalyzeDistancesParameter.  # noqa: E501
        :type: str
        """

        self._origin_feature_id = origin_feature_id

    @property
    def maximum_nearest(self):
        """Gets the maximum_nearest of this AnalyzeDistancesParameter.  # noqa: E501


        :return: The maximum_nearest of this AnalyzeDistancesParameter.  # noqa: E501
        :rtype: int
        """
        return self._maximum_nearest

    @maximum_nearest.setter
    def maximum_nearest(self, maximum_nearest):
        """Sets the maximum_nearest of this AnalyzeDistancesParameter.


        :param maximum_nearest: The maximum_nearest of this AnalyzeDistancesParameter.  # noqa: E501
        :type: int
        """

        self._maximum_nearest = maximum_nearest

    @property
    def extent(self):
        """Gets the extent of this AnalyzeDistancesParameter.  # noqa: E501


        :return: The extent of this AnalyzeDistancesParameter.  # noqa: E501
        :rtype: ExtentDTO
        """
        return self._extent

    @extent.setter
    def extent(self, extent):
        """Sets the extent of this AnalyzeDistancesParameter.


        :param extent: The extent of this AnalyzeDistancesParameter.  # noqa: E501
        :type: ExtentDTO
        """

        self._extent = extent

    @property
    def viewer_readable_coordinates(self):
        """Gets the viewer_readable_coordinates of this AnalyzeDistancesParameter.  # noqa: E501


        :return: The viewer_readable_coordinates of this AnalyzeDistancesParameter.  # noqa: E501
        :rtype: bool
        """
        return self._viewer_readable_coordinates

    @viewer_readable_coordinates.setter
    def viewer_readable_coordinates(self, viewer_readable_coordinates):
        """Sets the viewer_readable_coordinates of this AnalyzeDistancesParameter.


        :param viewer_readable_coordinates: The viewer_readable_coordinates of this AnalyzeDistancesParameter.  # noqa: E501
        :type: bool
        """

        self._viewer_readable_coordinates = viewer_readable_coordinates

    @property
    def allowed_feature_ids(self):
        """Gets the allowed_feature_ids of this AnalyzeDistancesParameter.  # noqa: E501


        :return: The allowed_feature_ids of this AnalyzeDistancesParameter.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowed_feature_ids

    @allowed_feature_ids.setter
    def allowed_feature_ids(self, allowed_feature_ids):
        """Sets the allowed_feature_ids of this AnalyzeDistancesParameter.


        :param allowed_feature_ids: The allowed_feature_ids of this AnalyzeDistancesParameter.  # noqa: E501
        :type: list[str]
        """

        self._allowed_feature_ids = allowed_feature_ids

    @property
    def name_column_id(self):
        """Gets the name_column_id of this AnalyzeDistancesParameter.  # noqa: E501


        :return: The name_column_id of this AnalyzeDistancesParameter.  # noqa: E501
        :rtype: str
        """
        return self._name_column_id

    @name_column_id.setter
    def name_column_id(self, name_column_id):
        """Sets the name_column_id of this AnalyzeDistancesParameter.


        :param name_column_id: The name_column_id of this AnalyzeDistancesParameter.  # noqa: E501
        :type: str
        """

        self._name_column_id = name_column_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AnalyzeDistancesParameter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnalyzeDistancesParameter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
