# coding: utf-8

"""
    CartoVista REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TimeSeriesManyFeaturesDataParameter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data_column_identifier': 'str',
        'start_date': 'datetime',
        'end_date': 'datetime',
        'current_state': 'OneOfTimeSeriesManyFeaturesDataParameterCurrentState',
        'data_table_join_id': 'str',
        'limit': 'int',
        'feature_ids': 'list[str]'
    }

    attribute_map = {
        'data_column_identifier': 'dataColumnIdentifier',
        'start_date': 'startDate',
        'end_date': 'endDate',
        'current_state': 'currentState',
        'data_table_join_id': 'dataTableJoinId',
        'limit': 'limit',
        'feature_ids': 'featureIds'
    }

    def __init__(self, data_column_identifier=None, start_date=None, end_date=None, current_state=None, data_table_join_id=None, limit=None, feature_ids=None):  # noqa: E501
        """TimeSeriesManyFeaturesDataParameter - a model defined in Swagger"""  # noqa: E501
        self._data_column_identifier = None
        self._start_date = None
        self._end_date = None
        self._current_state = None
        self._data_table_join_id = None
        self._limit = None
        self._feature_ids = None
        self.discriminator = None
        if data_column_identifier is not None:
            self.data_column_identifier = data_column_identifier
        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        if current_state is not None:
            self.current_state = current_state
        if data_table_join_id is not None:
            self.data_table_join_id = data_table_join_id
        if limit is not None:
            self.limit = limit
        if feature_ids is not None:
            self.feature_ids = feature_ids

    @property
    def data_column_identifier(self):
        """Gets the data_column_identifier of this TimeSeriesManyFeaturesDataParameter.  # noqa: E501


        :return: The data_column_identifier of this TimeSeriesManyFeaturesDataParameter.  # noqa: E501
        :rtype: str
        """
        return self._data_column_identifier

    @data_column_identifier.setter
    def data_column_identifier(self, data_column_identifier):
        """Sets the data_column_identifier of this TimeSeriesManyFeaturesDataParameter.


        :param data_column_identifier: The data_column_identifier of this TimeSeriesManyFeaturesDataParameter.  # noqa: E501
        :type: str
        """

        self._data_column_identifier = data_column_identifier

    @property
    def start_date(self):
        """Gets the start_date of this TimeSeriesManyFeaturesDataParameter.  # noqa: E501


        :return: The start_date of this TimeSeriesManyFeaturesDataParameter.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this TimeSeriesManyFeaturesDataParameter.


        :param start_date: The start_date of this TimeSeriesManyFeaturesDataParameter.  # noqa: E501
        :type: datetime
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this TimeSeriesManyFeaturesDataParameter.  # noqa: E501


        :return: The end_date of this TimeSeriesManyFeaturesDataParameter.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this TimeSeriesManyFeaturesDataParameter.


        :param end_date: The end_date of this TimeSeriesManyFeaturesDataParameter.  # noqa: E501
        :type: datetime
        """

        self._end_date = end_date

    @property
    def current_state(self):
        """Gets the current_state of this TimeSeriesManyFeaturesDataParameter.  # noqa: E501


        :return: The current_state of this TimeSeriesManyFeaturesDataParameter.  # noqa: E501
        :rtype: OneOfTimeSeriesManyFeaturesDataParameterCurrentState
        """
        return self._current_state

    @current_state.setter
    def current_state(self, current_state):
        """Sets the current_state of this TimeSeriesManyFeaturesDataParameter.


        :param current_state: The current_state of this TimeSeriesManyFeaturesDataParameter.  # noqa: E501
        :type: OneOfTimeSeriesManyFeaturesDataParameterCurrentState
        """

        self._current_state = current_state

    @property
    def data_table_join_id(self):
        """Gets the data_table_join_id of this TimeSeriesManyFeaturesDataParameter.  # noqa: E501


        :return: The data_table_join_id of this TimeSeriesManyFeaturesDataParameter.  # noqa: E501
        :rtype: str
        """
        return self._data_table_join_id

    @data_table_join_id.setter
    def data_table_join_id(self, data_table_join_id):
        """Sets the data_table_join_id of this TimeSeriesManyFeaturesDataParameter.


        :param data_table_join_id: The data_table_join_id of this TimeSeriesManyFeaturesDataParameter.  # noqa: E501
        :type: str
        """

        self._data_table_join_id = data_table_join_id

    @property
    def limit(self):
        """Gets the limit of this TimeSeriesManyFeaturesDataParameter.  # noqa: E501


        :return: The limit of this TimeSeriesManyFeaturesDataParameter.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this TimeSeriesManyFeaturesDataParameter.


        :param limit: The limit of this TimeSeriesManyFeaturesDataParameter.  # noqa: E501
        :type: int
        """

        self._limit = limit

    @property
    def feature_ids(self):
        """Gets the feature_ids of this TimeSeriesManyFeaturesDataParameter.  # noqa: E501


        :return: The feature_ids of this TimeSeriesManyFeaturesDataParameter.  # noqa: E501
        :rtype: list[str]
        """
        return self._feature_ids

    @feature_ids.setter
    def feature_ids(self, feature_ids):
        """Sets the feature_ids of this TimeSeriesManyFeaturesDataParameter.


        :param feature_ids: The feature_ids of this TimeSeriesManyFeaturesDataParameter.  # noqa: E501
        :type: list[str]
        """

        self._feature_ids = feature_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TimeSeriesManyFeaturesDataParameter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TimeSeriesManyFeaturesDataParameter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
