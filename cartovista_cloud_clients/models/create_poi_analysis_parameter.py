# coding: utf-8

"""
    CartoVista REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreatePoiAnalysisParameter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'analysis_layer_name': 'str',
        'results_table_name': 'str',
        'heatmap_layer_name': 'str',
        'layer_id': 'str',
        'table_id': 'str',
        'kv_levels': 'list[float]',
        'footprint_layer_id': 'str',
        'transmission_lines_layer_id': 'str',
        'transmission_points_layer_id': 'str'
    }

    attribute_map = {
        'name': 'name',
        'analysis_layer_name': 'analysisLayerName',
        'results_table_name': 'resultsTableName',
        'heatmap_layer_name': 'heatmapLayerName',
        'layer_id': 'layerId',
        'table_id': 'tableId',
        'kv_levels': 'kvLevels',
        'footprint_layer_id': 'footprintLayerId',
        'transmission_lines_layer_id': 'transmissionLinesLayerId',
        'transmission_points_layer_id': 'transmissionPointsLayerId'
    }

    def __init__(self, name=None, analysis_layer_name=None, results_table_name=None, heatmap_layer_name=None, layer_id=None, table_id=None, kv_levels=None, footprint_layer_id=None, transmission_lines_layer_id=None, transmission_points_layer_id=None):  # noqa: E501
        """CreatePoiAnalysisParameter - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._analysis_layer_name = None
        self._results_table_name = None
        self._heatmap_layer_name = None
        self._layer_id = None
        self._table_id = None
        self._kv_levels = None
        self._footprint_layer_id = None
        self._transmission_lines_layer_id = None
        self._transmission_points_layer_id = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if analysis_layer_name is not None:
            self.analysis_layer_name = analysis_layer_name
        if results_table_name is not None:
            self.results_table_name = results_table_name
        if heatmap_layer_name is not None:
            self.heatmap_layer_name = heatmap_layer_name
        if layer_id is not None:
            self.layer_id = layer_id
        if table_id is not None:
            self.table_id = table_id
        if kv_levels is not None:
            self.kv_levels = kv_levels
        if footprint_layer_id is not None:
            self.footprint_layer_id = footprint_layer_id
        if transmission_lines_layer_id is not None:
            self.transmission_lines_layer_id = transmission_lines_layer_id
        if transmission_points_layer_id is not None:
            self.transmission_points_layer_id = transmission_points_layer_id

    @property
    def name(self):
        """Gets the name of this CreatePoiAnalysisParameter.  # noqa: E501


        :return: The name of this CreatePoiAnalysisParameter.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreatePoiAnalysisParameter.


        :param name: The name of this CreatePoiAnalysisParameter.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def analysis_layer_name(self):
        """Gets the analysis_layer_name of this CreatePoiAnalysisParameter.  # noqa: E501


        :return: The analysis_layer_name of this CreatePoiAnalysisParameter.  # noqa: E501
        :rtype: str
        """
        return self._analysis_layer_name

    @analysis_layer_name.setter
    def analysis_layer_name(self, analysis_layer_name):
        """Sets the analysis_layer_name of this CreatePoiAnalysisParameter.


        :param analysis_layer_name: The analysis_layer_name of this CreatePoiAnalysisParameter.  # noqa: E501
        :type: str
        """

        self._analysis_layer_name = analysis_layer_name

    @property
    def results_table_name(self):
        """Gets the results_table_name of this CreatePoiAnalysisParameter.  # noqa: E501


        :return: The results_table_name of this CreatePoiAnalysisParameter.  # noqa: E501
        :rtype: str
        """
        return self._results_table_name

    @results_table_name.setter
    def results_table_name(self, results_table_name):
        """Sets the results_table_name of this CreatePoiAnalysisParameter.


        :param results_table_name: The results_table_name of this CreatePoiAnalysisParameter.  # noqa: E501
        :type: str
        """

        self._results_table_name = results_table_name

    @property
    def heatmap_layer_name(self):
        """Gets the heatmap_layer_name of this CreatePoiAnalysisParameter.  # noqa: E501


        :return: The heatmap_layer_name of this CreatePoiAnalysisParameter.  # noqa: E501
        :rtype: str
        """
        return self._heatmap_layer_name

    @heatmap_layer_name.setter
    def heatmap_layer_name(self, heatmap_layer_name):
        """Sets the heatmap_layer_name of this CreatePoiAnalysisParameter.


        :param heatmap_layer_name: The heatmap_layer_name of this CreatePoiAnalysisParameter.  # noqa: E501
        :type: str
        """

        self._heatmap_layer_name = heatmap_layer_name

    @property
    def layer_id(self):
        """Gets the layer_id of this CreatePoiAnalysisParameter.  # noqa: E501


        :return: The layer_id of this CreatePoiAnalysisParameter.  # noqa: E501
        :rtype: str
        """
        return self._layer_id

    @layer_id.setter
    def layer_id(self, layer_id):
        """Sets the layer_id of this CreatePoiAnalysisParameter.


        :param layer_id: The layer_id of this CreatePoiAnalysisParameter.  # noqa: E501
        :type: str
        """

        self._layer_id = layer_id

    @property
    def table_id(self):
        """Gets the table_id of this CreatePoiAnalysisParameter.  # noqa: E501


        :return: The table_id of this CreatePoiAnalysisParameter.  # noqa: E501
        :rtype: str
        """
        return self._table_id

    @table_id.setter
    def table_id(self, table_id):
        """Sets the table_id of this CreatePoiAnalysisParameter.


        :param table_id: The table_id of this CreatePoiAnalysisParameter.  # noqa: E501
        :type: str
        """

        self._table_id = table_id

    @property
    def kv_levels(self):
        """Gets the kv_levels of this CreatePoiAnalysisParameter.  # noqa: E501


        :return: The kv_levels of this CreatePoiAnalysisParameter.  # noqa: E501
        :rtype: list[float]
        """
        return self._kv_levels

    @kv_levels.setter
    def kv_levels(self, kv_levels):
        """Sets the kv_levels of this CreatePoiAnalysisParameter.


        :param kv_levels: The kv_levels of this CreatePoiAnalysisParameter.  # noqa: E501
        :type: list[float]
        """

        self._kv_levels = kv_levels

    @property
    def footprint_layer_id(self):
        """Gets the footprint_layer_id of this CreatePoiAnalysisParameter.  # noqa: E501


        :return: The footprint_layer_id of this CreatePoiAnalysisParameter.  # noqa: E501
        :rtype: str
        """
        return self._footprint_layer_id

    @footprint_layer_id.setter
    def footprint_layer_id(self, footprint_layer_id):
        """Sets the footprint_layer_id of this CreatePoiAnalysisParameter.


        :param footprint_layer_id: The footprint_layer_id of this CreatePoiAnalysisParameter.  # noqa: E501
        :type: str
        """

        self._footprint_layer_id = footprint_layer_id

    @property
    def transmission_lines_layer_id(self):
        """Gets the transmission_lines_layer_id of this CreatePoiAnalysisParameter.  # noqa: E501


        :return: The transmission_lines_layer_id of this CreatePoiAnalysisParameter.  # noqa: E501
        :rtype: str
        """
        return self._transmission_lines_layer_id

    @transmission_lines_layer_id.setter
    def transmission_lines_layer_id(self, transmission_lines_layer_id):
        """Sets the transmission_lines_layer_id of this CreatePoiAnalysisParameter.


        :param transmission_lines_layer_id: The transmission_lines_layer_id of this CreatePoiAnalysisParameter.  # noqa: E501
        :type: str
        """

        self._transmission_lines_layer_id = transmission_lines_layer_id

    @property
    def transmission_points_layer_id(self):
        """Gets the transmission_points_layer_id of this CreatePoiAnalysisParameter.  # noqa: E501


        :return: The transmission_points_layer_id of this CreatePoiAnalysisParameter.  # noqa: E501
        :rtype: str
        """
        return self._transmission_points_layer_id

    @transmission_points_layer_id.setter
    def transmission_points_layer_id(self, transmission_points_layer_id):
        """Sets the transmission_points_layer_id of this CreatePoiAnalysisParameter.


        :param transmission_points_layer_id: The transmission_points_layer_id of this CreatePoiAnalysisParameter.  # noqa: E501
        :type: str
        """

        self._transmission_points_layer_id = transmission_points_layer_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreatePoiAnalysisParameter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreatePoiAnalysisParameter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
