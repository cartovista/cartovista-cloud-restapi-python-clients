# coding: utf-8

"""
    CartoVista REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ContentCount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'maps': 'int',
        'layers': 'int',
        'features': 'int',
        'users': 'int'
    }

    attribute_map = {
        'maps': 'maps',
        'layers': 'layers',
        'features': 'features',
        'users': 'users'
    }

    def __init__(self, maps=None, layers=None, features=None, users=None):  # noqa: E501
        """ContentCount - a model defined in Swagger"""  # noqa: E501
        self._maps = None
        self._layers = None
        self._features = None
        self._users = None
        self.discriminator = None
        if maps is not None:
            self.maps = maps
        if layers is not None:
            self.layers = layers
        if features is not None:
            self.features = features
        if users is not None:
            self.users = users

    @property
    def maps(self):
        """Gets the maps of this ContentCount.  # noqa: E501


        :return: The maps of this ContentCount.  # noqa: E501
        :rtype: int
        """
        return self._maps

    @maps.setter
    def maps(self, maps):
        """Sets the maps of this ContentCount.


        :param maps: The maps of this ContentCount.  # noqa: E501
        :type: int
        """

        self._maps = maps

    @property
    def layers(self):
        """Gets the layers of this ContentCount.  # noqa: E501


        :return: The layers of this ContentCount.  # noqa: E501
        :rtype: int
        """
        return self._layers

    @layers.setter
    def layers(self, layers):
        """Sets the layers of this ContentCount.


        :param layers: The layers of this ContentCount.  # noqa: E501
        :type: int
        """

        self._layers = layers

    @property
    def features(self):
        """Gets the features of this ContentCount.  # noqa: E501


        :return: The features of this ContentCount.  # noqa: E501
        :rtype: int
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this ContentCount.


        :param features: The features of this ContentCount.  # noqa: E501
        :type: int
        """

        self._features = features

    @property
    def users(self):
        """Gets the users of this ContentCount.  # noqa: E501


        :return: The users of this ContentCount.  # noqa: E501
        :rtype: int
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this ContentCount.


        :param users: The users of this ContentCount.  # noqa: E501
        :type: int
        """

        self._users = users

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContentCount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContentCount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
