# coding: utf-8

"""
    CartoVista REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FileColumn(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'column_number': 'int',
        'carto_vista_data_type': 'CartoVistaPortalDataType',
        'precision': 'int',
        'units': 'str',
        'unit_placement': 'UnitPlacement',
        'values': 'list[object]'
    }

    attribute_map = {
        'name': 'name',
        'column_number': 'columnNumber',
        'carto_vista_data_type': 'cartoVistaDataType',
        'precision': 'precision',
        'units': 'units',
        'unit_placement': 'unitPlacement',
        'values': 'values'
    }

    def __init__(self, name=None, column_number=None, carto_vista_data_type=None, precision=None, units=None, unit_placement=None, values=None):  # noqa: E501
        """FileColumn - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._column_number = None
        self._carto_vista_data_type = None
        self._precision = None
        self._units = None
        self._unit_placement = None
        self._values = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if column_number is not None:
            self.column_number = column_number
        if carto_vista_data_type is not None:
            self.carto_vista_data_type = carto_vista_data_type
        if precision is not None:
            self.precision = precision
        if units is not None:
            self.units = units
        if unit_placement is not None:
            self.unit_placement = unit_placement
        if values is not None:
            self.values = values

    @property
    def name(self):
        """Gets the name of this FileColumn.  # noqa: E501


        :return: The name of this FileColumn.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FileColumn.


        :param name: The name of this FileColumn.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def column_number(self):
        """Gets the column_number of this FileColumn.  # noqa: E501


        :return: The column_number of this FileColumn.  # noqa: E501
        :rtype: int
        """
        return self._column_number

    @column_number.setter
    def column_number(self, column_number):
        """Sets the column_number of this FileColumn.


        :param column_number: The column_number of this FileColumn.  # noqa: E501
        :type: int
        """

        self._column_number = column_number

    @property
    def carto_vista_data_type(self):
        """Gets the carto_vista_data_type of this FileColumn.  # noqa: E501


        :return: The carto_vista_data_type of this FileColumn.  # noqa: E501
        :rtype: CartoVistaPortalDataType
        """
        return self._carto_vista_data_type

    @carto_vista_data_type.setter
    def carto_vista_data_type(self, carto_vista_data_type):
        """Sets the carto_vista_data_type of this FileColumn.


        :param carto_vista_data_type: The carto_vista_data_type of this FileColumn.  # noqa: E501
        :type: CartoVistaPortalDataType
        """

        self._carto_vista_data_type = carto_vista_data_type

    @property
    def precision(self):
        """Gets the precision of this FileColumn.  # noqa: E501


        :return: The precision of this FileColumn.  # noqa: E501
        :rtype: int
        """
        return self._precision

    @precision.setter
    def precision(self, precision):
        """Sets the precision of this FileColumn.


        :param precision: The precision of this FileColumn.  # noqa: E501
        :type: int
        """

        self._precision = precision

    @property
    def units(self):
        """Gets the units of this FileColumn.  # noqa: E501


        :return: The units of this FileColumn.  # noqa: E501
        :rtype: str
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this FileColumn.


        :param units: The units of this FileColumn.  # noqa: E501
        :type: str
        """

        self._units = units

    @property
    def unit_placement(self):
        """Gets the unit_placement of this FileColumn.  # noqa: E501


        :return: The unit_placement of this FileColumn.  # noqa: E501
        :rtype: UnitPlacement
        """
        return self._unit_placement

    @unit_placement.setter
    def unit_placement(self, unit_placement):
        """Sets the unit_placement of this FileColumn.


        :param unit_placement: The unit_placement of this FileColumn.  # noqa: E501
        :type: UnitPlacement
        """

        self._unit_placement = unit_placement

    @property
    def values(self):
        """Gets the values of this FileColumn.  # noqa: E501


        :return: The values of this FileColumn.  # noqa: E501
        :rtype: list[object]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this FileColumn.


        :param values: The values of this FileColumn.  # noqa: E501
        :type: list[object]
        """

        self._values = values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FileColumn, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileColumn):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
