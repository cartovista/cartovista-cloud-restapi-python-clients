# coding: utf-8

"""
    CartoVista REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WmtsLayerWithDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'wmts_layer': 'WmtsLayer',
        'maps': 'list[Map]',
        'permissions': 'list[PermissionPairComplexDTO]'
    }

    attribute_map = {
        'wmts_layer': 'wmtsLayer',
        'maps': 'maps',
        'permissions': 'permissions'
    }

    def __init__(self, wmts_layer=None, maps=None, permissions=None):  # noqa: E501
        """WmtsLayerWithDetails - a model defined in Swagger"""  # noqa: E501
        self._wmts_layer = None
        self._maps = None
        self._permissions = None
        self.discriminator = None
        if wmts_layer is not None:
            self.wmts_layer = wmts_layer
        if maps is not None:
            self.maps = maps
        if permissions is not None:
            self.permissions = permissions

    @property
    def wmts_layer(self):
        """Gets the wmts_layer of this WmtsLayerWithDetails.  # noqa: E501


        :return: The wmts_layer of this WmtsLayerWithDetails.  # noqa: E501
        :rtype: WmtsLayer
        """
        return self._wmts_layer

    @wmts_layer.setter
    def wmts_layer(self, wmts_layer):
        """Sets the wmts_layer of this WmtsLayerWithDetails.


        :param wmts_layer: The wmts_layer of this WmtsLayerWithDetails.  # noqa: E501
        :type: WmtsLayer
        """

        self._wmts_layer = wmts_layer

    @property
    def maps(self):
        """Gets the maps of this WmtsLayerWithDetails.  # noqa: E501


        :return: The maps of this WmtsLayerWithDetails.  # noqa: E501
        :rtype: list[Map]
        """
        return self._maps

    @maps.setter
    def maps(self, maps):
        """Sets the maps of this WmtsLayerWithDetails.


        :param maps: The maps of this WmtsLayerWithDetails.  # noqa: E501
        :type: list[Map]
        """

        self._maps = maps

    @property
    def permissions(self):
        """Gets the permissions of this WmtsLayerWithDetails.  # noqa: E501


        :return: The permissions of this WmtsLayerWithDetails.  # noqa: E501
        :rtype: list[PermissionPairComplexDTO]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this WmtsLayerWithDetails.


        :param permissions: The permissions of this WmtsLayerWithDetails.  # noqa: E501
        :type: list[PermissionPairComplexDTO]
        """

        self._permissions = permissions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WmtsLayerWithDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WmtsLayerWithDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
