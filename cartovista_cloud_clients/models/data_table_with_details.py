# coding: utf-8

"""
    CartoVista REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DataTableWithDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data_table': 'DataTable',
        'maps': 'list[Map]',
        'layers': 'list[Layer]',
        'permissions': 'list[PermissionPairComplexDTO]',
        'data_columns': 'list[DataColumn]'
    }

    attribute_map = {
        'data_table': 'dataTable',
        'maps': 'maps',
        'layers': 'layers',
        'permissions': 'permissions',
        'data_columns': 'dataColumns'
    }

    def __init__(self, data_table=None, maps=None, layers=None, permissions=None, data_columns=None):  # noqa: E501
        """DataTableWithDetails - a model defined in Swagger"""  # noqa: E501
        self._data_table = None
        self._maps = None
        self._layers = None
        self._permissions = None
        self._data_columns = None
        self.discriminator = None
        if data_table is not None:
            self.data_table = data_table
        if maps is not None:
            self.maps = maps
        if layers is not None:
            self.layers = layers
        if permissions is not None:
            self.permissions = permissions
        if data_columns is not None:
            self.data_columns = data_columns

    @property
    def data_table(self):
        """Gets the data_table of this DataTableWithDetails.  # noqa: E501


        :return: The data_table of this DataTableWithDetails.  # noqa: E501
        :rtype: DataTable
        """
        return self._data_table

    @data_table.setter
    def data_table(self, data_table):
        """Sets the data_table of this DataTableWithDetails.


        :param data_table: The data_table of this DataTableWithDetails.  # noqa: E501
        :type: DataTable
        """

        self._data_table = data_table

    @property
    def maps(self):
        """Gets the maps of this DataTableWithDetails.  # noqa: E501


        :return: The maps of this DataTableWithDetails.  # noqa: E501
        :rtype: list[Map]
        """
        return self._maps

    @maps.setter
    def maps(self, maps):
        """Sets the maps of this DataTableWithDetails.


        :param maps: The maps of this DataTableWithDetails.  # noqa: E501
        :type: list[Map]
        """

        self._maps = maps

    @property
    def layers(self):
        """Gets the layers of this DataTableWithDetails.  # noqa: E501


        :return: The layers of this DataTableWithDetails.  # noqa: E501
        :rtype: list[Layer]
        """
        return self._layers

    @layers.setter
    def layers(self, layers):
        """Sets the layers of this DataTableWithDetails.


        :param layers: The layers of this DataTableWithDetails.  # noqa: E501
        :type: list[Layer]
        """

        self._layers = layers

    @property
    def permissions(self):
        """Gets the permissions of this DataTableWithDetails.  # noqa: E501


        :return: The permissions of this DataTableWithDetails.  # noqa: E501
        :rtype: list[PermissionPairComplexDTO]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this DataTableWithDetails.


        :param permissions: The permissions of this DataTableWithDetails.  # noqa: E501
        :type: list[PermissionPairComplexDTO]
        """

        self._permissions = permissions

    @property
    def data_columns(self):
        """Gets the data_columns of this DataTableWithDetails.  # noqa: E501


        :return: The data_columns of this DataTableWithDetails.  # noqa: E501
        :rtype: list[DataColumn]
        """
        return self._data_columns

    @data_columns.setter
    def data_columns(self, data_columns):
        """Sets the data_columns of this DataTableWithDetails.


        :param data_columns: The data_columns of this DataTableWithDetails.  # noqa: E501
        :type: list[DataColumn]
        """

        self._data_columns = data_columns

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataTableWithDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataTableWithDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
