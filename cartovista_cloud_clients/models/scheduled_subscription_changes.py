# coding: utf-8

"""
    CartoVista REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ScheduledSubscriptionChanges(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'delete': 'bool',
        'package': 'OneOfScheduledSubscriptionChangesPackage',
        'max_users': 'int',
        'is_monthly': 'bool'
    }

    attribute_map = {
        'delete': 'delete',
        'package': 'package',
        'max_users': 'maxUsers',
        'is_monthly': 'isMonthly'
    }

    def __init__(self, delete=None, package=None, max_users=None, is_monthly=None):  # noqa: E501
        """ScheduledSubscriptionChanges - a model defined in Swagger"""  # noqa: E501
        self._delete = None
        self._package = None
        self._max_users = None
        self._is_monthly = None
        self.discriminator = None
        if delete is not None:
            self.delete = delete
        if package is not None:
            self.package = package
        if max_users is not None:
            self.max_users = max_users
        if is_monthly is not None:
            self.is_monthly = is_monthly

    @property
    def delete(self):
        """Gets the delete of this ScheduledSubscriptionChanges.  # noqa: E501


        :return: The delete of this ScheduledSubscriptionChanges.  # noqa: E501
        :rtype: bool
        """
        return self._delete

    @delete.setter
    def delete(self, delete):
        """Sets the delete of this ScheduledSubscriptionChanges.


        :param delete: The delete of this ScheduledSubscriptionChanges.  # noqa: E501
        :type: bool
        """

        self._delete = delete

    @property
    def package(self):
        """Gets the package of this ScheduledSubscriptionChanges.  # noqa: E501


        :return: The package of this ScheduledSubscriptionChanges.  # noqa: E501
        :rtype: OneOfScheduledSubscriptionChangesPackage
        """
        return self._package

    @package.setter
    def package(self, package):
        """Sets the package of this ScheduledSubscriptionChanges.


        :param package: The package of this ScheduledSubscriptionChanges.  # noqa: E501
        :type: OneOfScheduledSubscriptionChangesPackage
        """

        self._package = package

    @property
    def max_users(self):
        """Gets the max_users of this ScheduledSubscriptionChanges.  # noqa: E501


        :return: The max_users of this ScheduledSubscriptionChanges.  # noqa: E501
        :rtype: int
        """
        return self._max_users

    @max_users.setter
    def max_users(self, max_users):
        """Sets the max_users of this ScheduledSubscriptionChanges.


        :param max_users: The max_users of this ScheduledSubscriptionChanges.  # noqa: E501
        :type: int
        """

        self._max_users = max_users

    @property
    def is_monthly(self):
        """Gets the is_monthly of this ScheduledSubscriptionChanges.  # noqa: E501


        :return: The is_monthly of this ScheduledSubscriptionChanges.  # noqa: E501
        :rtype: bool
        """
        return self._is_monthly

    @is_monthly.setter
    def is_monthly(self, is_monthly):
        """Sets the is_monthly of this ScheduledSubscriptionChanges.


        :param is_monthly: The is_monthly of this ScheduledSubscriptionChanges.  # noqa: E501
        :type: bool
        """

        self._is_monthly = is_monthly

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScheduledSubscriptionChanges, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScheduledSubscriptionChanges):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
