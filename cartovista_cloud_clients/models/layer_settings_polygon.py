# coding: utf-8

"""
    CartoVista REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LayerSettingsPolygon(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'stroke': 'LayerSettingsStroke',
        'fill_mode': 'str',
        'fill_solid': 'LayerSettingsFillSolid',
        'fill_pattern': 'LayerSettingsFillPattern',
        'fill_gradient': 'LayerSettingsFillGradient'
    }

    attribute_map = {
        'stroke': 'stroke',
        'fill_mode': 'fillMode',
        'fill_solid': 'fillSolid',
        'fill_pattern': 'fillPattern',
        'fill_gradient': 'fillGradient'
    }

    def __init__(self, stroke=None, fill_mode=None, fill_solid=None, fill_pattern=None, fill_gradient=None):  # noqa: E501
        """LayerSettingsPolygon - a model defined in Swagger"""  # noqa: E501
        self._stroke = None
        self._fill_mode = None
        self._fill_solid = None
        self._fill_pattern = None
        self._fill_gradient = None
        self.discriminator = None
        if stroke is not None:
            self.stroke = stroke
        if fill_mode is not None:
            self.fill_mode = fill_mode
        if fill_solid is not None:
            self.fill_solid = fill_solid
        if fill_pattern is not None:
            self.fill_pattern = fill_pattern
        if fill_gradient is not None:
            self.fill_gradient = fill_gradient

    @property
    def stroke(self):
        """Gets the stroke of this LayerSettingsPolygon.  # noqa: E501


        :return: The stroke of this LayerSettingsPolygon.  # noqa: E501
        :rtype: LayerSettingsStroke
        """
        return self._stroke

    @stroke.setter
    def stroke(self, stroke):
        """Sets the stroke of this LayerSettingsPolygon.


        :param stroke: The stroke of this LayerSettingsPolygon.  # noqa: E501
        :type: LayerSettingsStroke
        """

        self._stroke = stroke

    @property
    def fill_mode(self):
        """Gets the fill_mode of this LayerSettingsPolygon.  # noqa: E501


        :return: The fill_mode of this LayerSettingsPolygon.  # noqa: E501
        :rtype: str
        """
        return self._fill_mode

    @fill_mode.setter
    def fill_mode(self, fill_mode):
        """Sets the fill_mode of this LayerSettingsPolygon.


        :param fill_mode: The fill_mode of this LayerSettingsPolygon.  # noqa: E501
        :type: str
        """

        self._fill_mode = fill_mode

    @property
    def fill_solid(self):
        """Gets the fill_solid of this LayerSettingsPolygon.  # noqa: E501


        :return: The fill_solid of this LayerSettingsPolygon.  # noqa: E501
        :rtype: LayerSettingsFillSolid
        """
        return self._fill_solid

    @fill_solid.setter
    def fill_solid(self, fill_solid):
        """Sets the fill_solid of this LayerSettingsPolygon.


        :param fill_solid: The fill_solid of this LayerSettingsPolygon.  # noqa: E501
        :type: LayerSettingsFillSolid
        """

        self._fill_solid = fill_solid

    @property
    def fill_pattern(self):
        """Gets the fill_pattern of this LayerSettingsPolygon.  # noqa: E501


        :return: The fill_pattern of this LayerSettingsPolygon.  # noqa: E501
        :rtype: LayerSettingsFillPattern
        """
        return self._fill_pattern

    @fill_pattern.setter
    def fill_pattern(self, fill_pattern):
        """Sets the fill_pattern of this LayerSettingsPolygon.


        :param fill_pattern: The fill_pattern of this LayerSettingsPolygon.  # noqa: E501
        :type: LayerSettingsFillPattern
        """

        self._fill_pattern = fill_pattern

    @property
    def fill_gradient(self):
        """Gets the fill_gradient of this LayerSettingsPolygon.  # noqa: E501


        :return: The fill_gradient of this LayerSettingsPolygon.  # noqa: E501
        :rtype: LayerSettingsFillGradient
        """
        return self._fill_gradient

    @fill_gradient.setter
    def fill_gradient(self, fill_gradient):
        """Sets the fill_gradient of this LayerSettingsPolygon.


        :param fill_gradient: The fill_gradient of this LayerSettingsPolygon.  # noqa: E501
        :type: LayerSettingsFillGradient
        """

        self._fill_gradient = fill_gradient

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LayerSettingsPolygon, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LayerSettingsPolygon):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
