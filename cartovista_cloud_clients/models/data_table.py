# coding: utf-8

"""
    CartoVista REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DataTable(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'unique_identifier': 'str',
        'name': 'str',
        'system_identifier': 'str',
        'unique_id_data_column': 'str',
        'owner_name': 'str',
        'description': 'str',
        'metadata': 'str',
        'icon': 'str',
        'row_count': 'int',
        'creation_time': 'datetime',
        'modified_time': 'datetime',
        'time_series_column_id': 'str',
        'geocode_address_column_id': 'str',
        'geocode_accuracy_column_id': 'str',
        'geocode_latitude_column_id': 'str',
        'geocode_longitude_column_id': 'str',
        'is_many_table_in_one_to_many_join': 'bool',
        'public_access': 'bool',
        'permissions': 'list[PermissionPairComplexDTO]',
        'can_edit': 'bool',
        'disabled': 'bool',
        'is_demo_source': 'bool',
        'is_external': 'bool',
        'optimization_status': 'ClickHouseStatus',
        'folder_id': 'str'
    }

    attribute_map = {
        'unique_identifier': 'uniqueIdentifier',
        'name': 'name',
        'system_identifier': 'systemIdentifier',
        'unique_id_data_column': 'uniqueIdDataColumn',
        'owner_name': 'ownerName',
        'description': 'description',
        'metadata': 'metadata',
        'icon': 'icon',
        'row_count': 'rowCount',
        'creation_time': 'creationTime',
        'modified_time': 'modifiedTime',
        'time_series_column_id': 'timeSeriesColumnId',
        'geocode_address_column_id': 'geocodeAddressColumnId',
        'geocode_accuracy_column_id': 'geocodeAccuracyColumnId',
        'geocode_latitude_column_id': 'geocodeLatitudeColumnId',
        'geocode_longitude_column_id': 'geocodeLongitudeColumnId',
        'is_many_table_in_one_to_many_join': 'isManyTableInOneToManyJoin',
        'public_access': 'publicAccess',
        'permissions': 'permissions',
        'can_edit': 'canEdit',
        'disabled': 'disabled',
        'is_demo_source': 'isDemoSource',
        'is_external': 'isExternal',
        'optimization_status': 'optimizationStatus',
        'folder_id': 'folderId'
    }

    def __init__(self, unique_identifier=None, name=None, system_identifier=None, unique_id_data_column=None, owner_name=None, description=None, metadata=None, icon=None, row_count=None, creation_time=None, modified_time=None, time_series_column_id=None, geocode_address_column_id=None, geocode_accuracy_column_id=None, geocode_latitude_column_id=None, geocode_longitude_column_id=None, is_many_table_in_one_to_many_join=None, public_access=None, permissions=None, can_edit=None, disabled=None, is_demo_source=None, is_external=None, optimization_status=None, folder_id=None):  # noqa: E501
        """DataTable - a model defined in Swagger"""  # noqa: E501
        self._unique_identifier = None
        self._name = None
        self._system_identifier = None
        self._unique_id_data_column = None
        self._owner_name = None
        self._description = None
        self._metadata = None
        self._icon = None
        self._row_count = None
        self._creation_time = None
        self._modified_time = None
        self._time_series_column_id = None
        self._geocode_address_column_id = None
        self._geocode_accuracy_column_id = None
        self._geocode_latitude_column_id = None
        self._geocode_longitude_column_id = None
        self._is_many_table_in_one_to_many_join = None
        self._public_access = None
        self._permissions = None
        self._can_edit = None
        self._disabled = None
        self._is_demo_source = None
        self._is_external = None
        self._optimization_status = None
        self._folder_id = None
        self.discriminator = None
        if unique_identifier is not None:
            self.unique_identifier = unique_identifier
        if name is not None:
            self.name = name
        if system_identifier is not None:
            self.system_identifier = system_identifier
        if unique_id_data_column is not None:
            self.unique_id_data_column = unique_id_data_column
        if owner_name is not None:
            self.owner_name = owner_name
        if description is not None:
            self.description = description
        if metadata is not None:
            self.metadata = metadata
        if icon is not None:
            self.icon = icon
        if row_count is not None:
            self.row_count = row_count
        if creation_time is not None:
            self.creation_time = creation_time
        if modified_time is not None:
            self.modified_time = modified_time
        if time_series_column_id is not None:
            self.time_series_column_id = time_series_column_id
        if geocode_address_column_id is not None:
            self.geocode_address_column_id = geocode_address_column_id
        if geocode_accuracy_column_id is not None:
            self.geocode_accuracy_column_id = geocode_accuracy_column_id
        if geocode_latitude_column_id is not None:
            self.geocode_latitude_column_id = geocode_latitude_column_id
        if geocode_longitude_column_id is not None:
            self.geocode_longitude_column_id = geocode_longitude_column_id
        if is_many_table_in_one_to_many_join is not None:
            self.is_many_table_in_one_to_many_join = is_many_table_in_one_to_many_join
        if public_access is not None:
            self.public_access = public_access
        if permissions is not None:
            self.permissions = permissions
        if can_edit is not None:
            self.can_edit = can_edit
        if disabled is not None:
            self.disabled = disabled
        if is_demo_source is not None:
            self.is_demo_source = is_demo_source
        if is_external is not None:
            self.is_external = is_external
        if optimization_status is not None:
            self.optimization_status = optimization_status
        if folder_id is not None:
            self.folder_id = folder_id

    @property
    def unique_identifier(self):
        """Gets the unique_identifier of this DataTable.  # noqa: E501


        :return: The unique_identifier of this DataTable.  # noqa: E501
        :rtype: str
        """
        return self._unique_identifier

    @unique_identifier.setter
    def unique_identifier(self, unique_identifier):
        """Sets the unique_identifier of this DataTable.


        :param unique_identifier: The unique_identifier of this DataTable.  # noqa: E501
        :type: str
        """

        self._unique_identifier = unique_identifier

    @property
    def name(self):
        """Gets the name of this DataTable.  # noqa: E501


        :return: The name of this DataTable.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DataTable.


        :param name: The name of this DataTable.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def system_identifier(self):
        """Gets the system_identifier of this DataTable.  # noqa: E501


        :return: The system_identifier of this DataTable.  # noqa: E501
        :rtype: str
        """
        return self._system_identifier

    @system_identifier.setter
    def system_identifier(self, system_identifier):
        """Sets the system_identifier of this DataTable.


        :param system_identifier: The system_identifier of this DataTable.  # noqa: E501
        :type: str
        """

        self._system_identifier = system_identifier

    @property
    def unique_id_data_column(self):
        """Gets the unique_id_data_column of this DataTable.  # noqa: E501


        :return: The unique_id_data_column of this DataTable.  # noqa: E501
        :rtype: str
        """
        return self._unique_id_data_column

    @unique_id_data_column.setter
    def unique_id_data_column(self, unique_id_data_column):
        """Sets the unique_id_data_column of this DataTable.


        :param unique_id_data_column: The unique_id_data_column of this DataTable.  # noqa: E501
        :type: str
        """

        self._unique_id_data_column = unique_id_data_column

    @property
    def owner_name(self):
        """Gets the owner_name of this DataTable.  # noqa: E501


        :return: The owner_name of this DataTable.  # noqa: E501
        :rtype: str
        """
        return self._owner_name

    @owner_name.setter
    def owner_name(self, owner_name):
        """Sets the owner_name of this DataTable.


        :param owner_name: The owner_name of this DataTable.  # noqa: E501
        :type: str
        """

        self._owner_name = owner_name

    @property
    def description(self):
        """Gets the description of this DataTable.  # noqa: E501


        :return: The description of this DataTable.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DataTable.


        :param description: The description of this DataTable.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def metadata(self):
        """Gets the metadata of this DataTable.  # noqa: E501


        :return: The metadata of this DataTable.  # noqa: E501
        :rtype: str
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this DataTable.


        :param metadata: The metadata of this DataTable.  # noqa: E501
        :type: str
        """

        self._metadata = metadata

    @property
    def icon(self):
        """Gets the icon of this DataTable.  # noqa: E501


        :return: The icon of this DataTable.  # noqa: E501
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this DataTable.


        :param icon: The icon of this DataTable.  # noqa: E501
        :type: str
        """

        self._icon = icon

    @property
    def row_count(self):
        """Gets the row_count of this DataTable.  # noqa: E501


        :return: The row_count of this DataTable.  # noqa: E501
        :rtype: int
        """
        return self._row_count

    @row_count.setter
    def row_count(self, row_count):
        """Sets the row_count of this DataTable.


        :param row_count: The row_count of this DataTable.  # noqa: E501
        :type: int
        """

        self._row_count = row_count

    @property
    def creation_time(self):
        """Gets the creation_time of this DataTable.  # noqa: E501


        :return: The creation_time of this DataTable.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this DataTable.


        :param creation_time: The creation_time of this DataTable.  # noqa: E501
        :type: datetime
        """

        self._creation_time = creation_time

    @property
    def modified_time(self):
        """Gets the modified_time of this DataTable.  # noqa: E501


        :return: The modified_time of this DataTable.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_time

    @modified_time.setter
    def modified_time(self, modified_time):
        """Sets the modified_time of this DataTable.


        :param modified_time: The modified_time of this DataTable.  # noqa: E501
        :type: datetime
        """

        self._modified_time = modified_time

    @property
    def time_series_column_id(self):
        """Gets the time_series_column_id of this DataTable.  # noqa: E501


        :return: The time_series_column_id of this DataTable.  # noqa: E501
        :rtype: str
        """
        return self._time_series_column_id

    @time_series_column_id.setter
    def time_series_column_id(self, time_series_column_id):
        """Sets the time_series_column_id of this DataTable.


        :param time_series_column_id: The time_series_column_id of this DataTable.  # noqa: E501
        :type: str
        """

        self._time_series_column_id = time_series_column_id

    @property
    def geocode_address_column_id(self):
        """Gets the geocode_address_column_id of this DataTable.  # noqa: E501


        :return: The geocode_address_column_id of this DataTable.  # noqa: E501
        :rtype: str
        """
        return self._geocode_address_column_id

    @geocode_address_column_id.setter
    def geocode_address_column_id(self, geocode_address_column_id):
        """Sets the geocode_address_column_id of this DataTable.


        :param geocode_address_column_id: The geocode_address_column_id of this DataTable.  # noqa: E501
        :type: str
        """

        self._geocode_address_column_id = geocode_address_column_id

    @property
    def geocode_accuracy_column_id(self):
        """Gets the geocode_accuracy_column_id of this DataTable.  # noqa: E501


        :return: The geocode_accuracy_column_id of this DataTable.  # noqa: E501
        :rtype: str
        """
        return self._geocode_accuracy_column_id

    @geocode_accuracy_column_id.setter
    def geocode_accuracy_column_id(self, geocode_accuracy_column_id):
        """Sets the geocode_accuracy_column_id of this DataTable.


        :param geocode_accuracy_column_id: The geocode_accuracy_column_id of this DataTable.  # noqa: E501
        :type: str
        """

        self._geocode_accuracy_column_id = geocode_accuracy_column_id

    @property
    def geocode_latitude_column_id(self):
        """Gets the geocode_latitude_column_id of this DataTable.  # noqa: E501


        :return: The geocode_latitude_column_id of this DataTable.  # noqa: E501
        :rtype: str
        """
        return self._geocode_latitude_column_id

    @geocode_latitude_column_id.setter
    def geocode_latitude_column_id(self, geocode_latitude_column_id):
        """Sets the geocode_latitude_column_id of this DataTable.


        :param geocode_latitude_column_id: The geocode_latitude_column_id of this DataTable.  # noqa: E501
        :type: str
        """

        self._geocode_latitude_column_id = geocode_latitude_column_id

    @property
    def geocode_longitude_column_id(self):
        """Gets the geocode_longitude_column_id of this DataTable.  # noqa: E501


        :return: The geocode_longitude_column_id of this DataTable.  # noqa: E501
        :rtype: str
        """
        return self._geocode_longitude_column_id

    @geocode_longitude_column_id.setter
    def geocode_longitude_column_id(self, geocode_longitude_column_id):
        """Sets the geocode_longitude_column_id of this DataTable.


        :param geocode_longitude_column_id: The geocode_longitude_column_id of this DataTable.  # noqa: E501
        :type: str
        """

        self._geocode_longitude_column_id = geocode_longitude_column_id

    @property
    def is_many_table_in_one_to_many_join(self):
        """Gets the is_many_table_in_one_to_many_join of this DataTable.  # noqa: E501


        :return: The is_many_table_in_one_to_many_join of this DataTable.  # noqa: E501
        :rtype: bool
        """
        return self._is_many_table_in_one_to_many_join

    @is_many_table_in_one_to_many_join.setter
    def is_many_table_in_one_to_many_join(self, is_many_table_in_one_to_many_join):
        """Sets the is_many_table_in_one_to_many_join of this DataTable.


        :param is_many_table_in_one_to_many_join: The is_many_table_in_one_to_many_join of this DataTable.  # noqa: E501
        :type: bool
        """

        self._is_many_table_in_one_to_many_join = is_many_table_in_one_to_many_join

    @property
    def public_access(self):
        """Gets the public_access of this DataTable.  # noqa: E501


        :return: The public_access of this DataTable.  # noqa: E501
        :rtype: bool
        """
        return self._public_access

    @public_access.setter
    def public_access(self, public_access):
        """Sets the public_access of this DataTable.


        :param public_access: The public_access of this DataTable.  # noqa: E501
        :type: bool
        """

        self._public_access = public_access

    @property
    def permissions(self):
        """Gets the permissions of this DataTable.  # noqa: E501


        :return: The permissions of this DataTable.  # noqa: E501
        :rtype: list[PermissionPairComplexDTO]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this DataTable.


        :param permissions: The permissions of this DataTable.  # noqa: E501
        :type: list[PermissionPairComplexDTO]
        """

        self._permissions = permissions

    @property
    def can_edit(self):
        """Gets the can_edit of this DataTable.  # noqa: E501


        :return: The can_edit of this DataTable.  # noqa: E501
        :rtype: bool
        """
        return self._can_edit

    @can_edit.setter
    def can_edit(self, can_edit):
        """Sets the can_edit of this DataTable.


        :param can_edit: The can_edit of this DataTable.  # noqa: E501
        :type: bool
        """

        self._can_edit = can_edit

    @property
    def disabled(self):
        """Gets the disabled of this DataTable.  # noqa: E501


        :return: The disabled of this DataTable.  # noqa: E501
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this DataTable.


        :param disabled: The disabled of this DataTable.  # noqa: E501
        :type: bool
        """

        self._disabled = disabled

    @property
    def is_demo_source(self):
        """Gets the is_demo_source of this DataTable.  # noqa: E501


        :return: The is_demo_source of this DataTable.  # noqa: E501
        :rtype: bool
        """
        return self._is_demo_source

    @is_demo_source.setter
    def is_demo_source(self, is_demo_source):
        """Sets the is_demo_source of this DataTable.


        :param is_demo_source: The is_demo_source of this DataTable.  # noqa: E501
        :type: bool
        """

        self._is_demo_source = is_demo_source

    @property
    def is_external(self):
        """Gets the is_external of this DataTable.  # noqa: E501


        :return: The is_external of this DataTable.  # noqa: E501
        :rtype: bool
        """
        return self._is_external

    @is_external.setter
    def is_external(self, is_external):
        """Sets the is_external of this DataTable.


        :param is_external: The is_external of this DataTable.  # noqa: E501
        :type: bool
        """

        self._is_external = is_external

    @property
    def optimization_status(self):
        """Gets the optimization_status of this DataTable.  # noqa: E501


        :return: The optimization_status of this DataTable.  # noqa: E501
        :rtype: ClickHouseStatus
        """
        return self._optimization_status

    @optimization_status.setter
    def optimization_status(self, optimization_status):
        """Sets the optimization_status of this DataTable.


        :param optimization_status: The optimization_status of this DataTable.  # noqa: E501
        :type: ClickHouseStatus
        """

        self._optimization_status = optimization_status

    @property
    def folder_id(self):
        """Gets the folder_id of this DataTable.  # noqa: E501


        :return: The folder_id of this DataTable.  # noqa: E501
        :rtype: str
        """
        return self._folder_id

    @folder_id.setter
    def folder_id(self, folder_id):
        """Sets the folder_id of this DataTable.


        :param folder_id: The folder_id of this DataTable.  # noqa: E501
        :type: str
        """

        self._folder_id = folder_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataTable, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataTable):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
