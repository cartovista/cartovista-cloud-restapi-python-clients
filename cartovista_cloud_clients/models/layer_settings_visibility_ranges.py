# coding: utf-8

"""
    CartoVista REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LayerSettingsVisibilityRanges(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'layer': 'LayerSettingsVisibilityRange',
        'labels': 'LayerSettingsVisibilityRange',
        'clusters': 'LayerSettingsClustersVisibility'
    }

    attribute_map = {
        'layer': 'layer',
        'labels': 'labels',
        'clusters': 'clusters'
    }

    def __init__(self, layer=None, labels=None, clusters=None):  # noqa: E501
        """LayerSettingsVisibilityRanges - a model defined in Swagger"""  # noqa: E501
        self._layer = None
        self._labels = None
        self._clusters = None
        self.discriminator = None
        if layer is not None:
            self.layer = layer
        if labels is not None:
            self.labels = labels
        if clusters is not None:
            self.clusters = clusters

    @property
    def layer(self):
        """Gets the layer of this LayerSettingsVisibilityRanges.  # noqa: E501


        :return: The layer of this LayerSettingsVisibilityRanges.  # noqa: E501
        :rtype: LayerSettingsVisibilityRange
        """
        return self._layer

    @layer.setter
    def layer(self, layer):
        """Sets the layer of this LayerSettingsVisibilityRanges.


        :param layer: The layer of this LayerSettingsVisibilityRanges.  # noqa: E501
        :type: LayerSettingsVisibilityRange
        """

        self._layer = layer

    @property
    def labels(self):
        """Gets the labels of this LayerSettingsVisibilityRanges.  # noqa: E501


        :return: The labels of this LayerSettingsVisibilityRanges.  # noqa: E501
        :rtype: LayerSettingsVisibilityRange
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this LayerSettingsVisibilityRanges.


        :param labels: The labels of this LayerSettingsVisibilityRanges.  # noqa: E501
        :type: LayerSettingsVisibilityRange
        """

        self._labels = labels

    @property
    def clusters(self):
        """Gets the clusters of this LayerSettingsVisibilityRanges.  # noqa: E501


        :return: The clusters of this LayerSettingsVisibilityRanges.  # noqa: E501
        :rtype: LayerSettingsClustersVisibility
        """
        return self._clusters

    @clusters.setter
    def clusters(self, clusters):
        """Sets the clusters of this LayerSettingsVisibilityRanges.


        :param clusters: The clusters of this LayerSettingsVisibilityRanges.  # noqa: E501
        :type: LayerSettingsClustersVisibility
        """

        self._clusters = clusters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LayerSettingsVisibilityRanges, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LayerSettingsVisibilityRanges):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
