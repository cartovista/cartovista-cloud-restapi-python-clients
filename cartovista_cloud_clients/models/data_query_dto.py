# coding: utf-8

"""
    CartoVista REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DataQueryDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'linking_ids': 'list[str]',
        'linking_ids_for_stats': 'list[str]',
        'sort_data_columns': 'list[DataQueryColumnDTO]',
        'data_columns': 'list[DataQueryColumnDTO]',
        'filter_data_columns': 'list[DataQueryColumnDTO]',
        'group_by': 'DataQueryColumnDTO',
        'selection_stack_parameters': 'OneOfDataQueryDTOSelectionStackParameters',
        'spatial_filter': 'OneOfDataQueryDTOSpatialFilter',
        'time_range': 'OneOfDataQueryDTOTimeRange',
        'start_index': 'int',
        'max_count': 'int',
        'data_sampling_count': 'int',
        'search_criteria': 'str',
        'statistics': 'list[str]',
        'statistics_only': 'bool',
        'sort_orders': 'list[str]',
        'exclude_not_available_value': 'bool',
        'server_cache_enabled': 'bool',
        'client_stack_trace': 'str',
        'data_query_filters': 'list[DataQueryFilterDTOOfDataQueryColumnDTO]'
    }

    attribute_map = {
        'linking_ids': 'linkingIds',
        'linking_ids_for_stats': 'linkingIdsForStats',
        'sort_data_columns': 'sortDataColumns',
        'data_columns': 'dataColumns',
        'filter_data_columns': 'filterDataColumns',
        'group_by': 'groupBy',
        'selection_stack_parameters': 'selectionStackParameters',
        'spatial_filter': 'spatialFilter',
        'time_range': 'timeRange',
        'start_index': 'startIndex',
        'max_count': 'maxCount',
        'data_sampling_count': 'dataSamplingCount',
        'search_criteria': 'searchCriteria',
        'statistics': 'statistics',
        'statistics_only': 'statisticsOnly',
        'sort_orders': 'sortOrders',
        'exclude_not_available_value': 'excludeNotAvailableValue',
        'server_cache_enabled': 'serverCacheEnabled',
        'client_stack_trace': 'clientStackTrace',
        'data_query_filters': 'dataQueryFilters'
    }

    def __init__(self, linking_ids=None, linking_ids_for_stats=None, sort_data_columns=None, data_columns=None, filter_data_columns=None, group_by=None, selection_stack_parameters=None, spatial_filter=None, time_range=None, start_index=None, max_count=None, data_sampling_count=None, search_criteria=None, statistics=None, statistics_only=None, sort_orders=None, exclude_not_available_value=None, server_cache_enabled=None, client_stack_trace=None, data_query_filters=None):  # noqa: E501
        """DataQueryDTO - a model defined in Swagger"""  # noqa: E501
        self._linking_ids = None
        self._linking_ids_for_stats = None
        self._sort_data_columns = None
        self._data_columns = None
        self._filter_data_columns = None
        self._group_by = None
        self._selection_stack_parameters = None
        self._spatial_filter = None
        self._time_range = None
        self._start_index = None
        self._max_count = None
        self._data_sampling_count = None
        self._search_criteria = None
        self._statistics = None
        self._statistics_only = None
        self._sort_orders = None
        self._exclude_not_available_value = None
        self._server_cache_enabled = None
        self._client_stack_trace = None
        self._data_query_filters = None
        self.discriminator = None
        if linking_ids is not None:
            self.linking_ids = linking_ids
        if linking_ids_for_stats is not None:
            self.linking_ids_for_stats = linking_ids_for_stats
        if sort_data_columns is not None:
            self.sort_data_columns = sort_data_columns
        if data_columns is not None:
            self.data_columns = data_columns
        if filter_data_columns is not None:
            self.filter_data_columns = filter_data_columns
        if group_by is not None:
            self.group_by = group_by
        if selection_stack_parameters is not None:
            self.selection_stack_parameters = selection_stack_parameters
        if spatial_filter is not None:
            self.spatial_filter = spatial_filter
        if time_range is not None:
            self.time_range = time_range
        if start_index is not None:
            self.start_index = start_index
        if max_count is not None:
            self.max_count = max_count
        if data_sampling_count is not None:
            self.data_sampling_count = data_sampling_count
        if search_criteria is not None:
            self.search_criteria = search_criteria
        if statistics is not None:
            self.statistics = statistics
        if statistics_only is not None:
            self.statistics_only = statistics_only
        if sort_orders is not None:
            self.sort_orders = sort_orders
        if exclude_not_available_value is not None:
            self.exclude_not_available_value = exclude_not_available_value
        if server_cache_enabled is not None:
            self.server_cache_enabled = server_cache_enabled
        if client_stack_trace is not None:
            self.client_stack_trace = client_stack_trace
        if data_query_filters is not None:
            self.data_query_filters = data_query_filters

    @property
    def linking_ids(self):
        """Gets the linking_ids of this DataQueryDTO.  # noqa: E501


        :return: The linking_ids of this DataQueryDTO.  # noqa: E501
        :rtype: list[str]
        """
        return self._linking_ids

    @linking_ids.setter
    def linking_ids(self, linking_ids):
        """Sets the linking_ids of this DataQueryDTO.


        :param linking_ids: The linking_ids of this DataQueryDTO.  # noqa: E501
        :type: list[str]
        """

        self._linking_ids = linking_ids

    @property
    def linking_ids_for_stats(self):
        """Gets the linking_ids_for_stats of this DataQueryDTO.  # noqa: E501


        :return: The linking_ids_for_stats of this DataQueryDTO.  # noqa: E501
        :rtype: list[str]
        """
        return self._linking_ids_for_stats

    @linking_ids_for_stats.setter
    def linking_ids_for_stats(self, linking_ids_for_stats):
        """Sets the linking_ids_for_stats of this DataQueryDTO.


        :param linking_ids_for_stats: The linking_ids_for_stats of this DataQueryDTO.  # noqa: E501
        :type: list[str]
        """

        self._linking_ids_for_stats = linking_ids_for_stats

    @property
    def sort_data_columns(self):
        """Gets the sort_data_columns of this DataQueryDTO.  # noqa: E501


        :return: The sort_data_columns of this DataQueryDTO.  # noqa: E501
        :rtype: list[DataQueryColumnDTO]
        """
        return self._sort_data_columns

    @sort_data_columns.setter
    def sort_data_columns(self, sort_data_columns):
        """Sets the sort_data_columns of this DataQueryDTO.


        :param sort_data_columns: The sort_data_columns of this DataQueryDTO.  # noqa: E501
        :type: list[DataQueryColumnDTO]
        """

        self._sort_data_columns = sort_data_columns

    @property
    def data_columns(self):
        """Gets the data_columns of this DataQueryDTO.  # noqa: E501


        :return: The data_columns of this DataQueryDTO.  # noqa: E501
        :rtype: list[DataQueryColumnDTO]
        """
        return self._data_columns

    @data_columns.setter
    def data_columns(self, data_columns):
        """Sets the data_columns of this DataQueryDTO.


        :param data_columns: The data_columns of this DataQueryDTO.  # noqa: E501
        :type: list[DataQueryColumnDTO]
        """

        self._data_columns = data_columns

    @property
    def filter_data_columns(self):
        """Gets the filter_data_columns of this DataQueryDTO.  # noqa: E501


        :return: The filter_data_columns of this DataQueryDTO.  # noqa: E501
        :rtype: list[DataQueryColumnDTO]
        """
        return self._filter_data_columns

    @filter_data_columns.setter
    def filter_data_columns(self, filter_data_columns):
        """Sets the filter_data_columns of this DataQueryDTO.


        :param filter_data_columns: The filter_data_columns of this DataQueryDTO.  # noqa: E501
        :type: list[DataQueryColumnDTO]
        """

        self._filter_data_columns = filter_data_columns

    @property
    def group_by(self):
        """Gets the group_by of this DataQueryDTO.  # noqa: E501


        :return: The group_by of this DataQueryDTO.  # noqa: E501
        :rtype: DataQueryColumnDTO
        """
        return self._group_by

    @group_by.setter
    def group_by(self, group_by):
        """Sets the group_by of this DataQueryDTO.


        :param group_by: The group_by of this DataQueryDTO.  # noqa: E501
        :type: DataQueryColumnDTO
        """

        self._group_by = group_by

    @property
    def selection_stack_parameters(self):
        """Gets the selection_stack_parameters of this DataQueryDTO.  # noqa: E501


        :return: The selection_stack_parameters of this DataQueryDTO.  # noqa: E501
        :rtype: OneOfDataQueryDTOSelectionStackParameters
        """
        return self._selection_stack_parameters

    @selection_stack_parameters.setter
    def selection_stack_parameters(self, selection_stack_parameters):
        """Sets the selection_stack_parameters of this DataQueryDTO.


        :param selection_stack_parameters: The selection_stack_parameters of this DataQueryDTO.  # noqa: E501
        :type: OneOfDataQueryDTOSelectionStackParameters
        """

        self._selection_stack_parameters = selection_stack_parameters

    @property
    def spatial_filter(self):
        """Gets the spatial_filter of this DataQueryDTO.  # noqa: E501


        :return: The spatial_filter of this DataQueryDTO.  # noqa: E501
        :rtype: OneOfDataQueryDTOSpatialFilter
        """
        return self._spatial_filter

    @spatial_filter.setter
    def spatial_filter(self, spatial_filter):
        """Sets the spatial_filter of this DataQueryDTO.


        :param spatial_filter: The spatial_filter of this DataQueryDTO.  # noqa: E501
        :type: OneOfDataQueryDTOSpatialFilter
        """

        self._spatial_filter = spatial_filter

    @property
    def time_range(self):
        """Gets the time_range of this DataQueryDTO.  # noqa: E501


        :return: The time_range of this DataQueryDTO.  # noqa: E501
        :rtype: OneOfDataQueryDTOTimeRange
        """
        return self._time_range

    @time_range.setter
    def time_range(self, time_range):
        """Sets the time_range of this DataQueryDTO.


        :param time_range: The time_range of this DataQueryDTO.  # noqa: E501
        :type: OneOfDataQueryDTOTimeRange
        """

        self._time_range = time_range

    @property
    def start_index(self):
        """Gets the start_index of this DataQueryDTO.  # noqa: E501


        :return: The start_index of this DataQueryDTO.  # noqa: E501
        :rtype: int
        """
        return self._start_index

    @start_index.setter
    def start_index(self, start_index):
        """Sets the start_index of this DataQueryDTO.


        :param start_index: The start_index of this DataQueryDTO.  # noqa: E501
        :type: int
        """

        self._start_index = start_index

    @property
    def max_count(self):
        """Gets the max_count of this DataQueryDTO.  # noqa: E501


        :return: The max_count of this DataQueryDTO.  # noqa: E501
        :rtype: int
        """
        return self._max_count

    @max_count.setter
    def max_count(self, max_count):
        """Sets the max_count of this DataQueryDTO.


        :param max_count: The max_count of this DataQueryDTO.  # noqa: E501
        :type: int
        """

        self._max_count = max_count

    @property
    def data_sampling_count(self):
        """Gets the data_sampling_count of this DataQueryDTO.  # noqa: E501


        :return: The data_sampling_count of this DataQueryDTO.  # noqa: E501
        :rtype: int
        """
        return self._data_sampling_count

    @data_sampling_count.setter
    def data_sampling_count(self, data_sampling_count):
        """Sets the data_sampling_count of this DataQueryDTO.


        :param data_sampling_count: The data_sampling_count of this DataQueryDTO.  # noqa: E501
        :type: int
        """

        self._data_sampling_count = data_sampling_count

    @property
    def search_criteria(self):
        """Gets the search_criteria of this DataQueryDTO.  # noqa: E501


        :return: The search_criteria of this DataQueryDTO.  # noqa: E501
        :rtype: str
        """
        return self._search_criteria

    @search_criteria.setter
    def search_criteria(self, search_criteria):
        """Sets the search_criteria of this DataQueryDTO.


        :param search_criteria: The search_criteria of this DataQueryDTO.  # noqa: E501
        :type: str
        """

        self._search_criteria = search_criteria

    @property
    def statistics(self):
        """Gets the statistics of this DataQueryDTO.  # noqa: E501


        :return: The statistics of this DataQueryDTO.  # noqa: E501
        :rtype: list[str]
        """
        return self._statistics

    @statistics.setter
    def statistics(self, statistics):
        """Sets the statistics of this DataQueryDTO.


        :param statistics: The statistics of this DataQueryDTO.  # noqa: E501
        :type: list[str]
        """

        self._statistics = statistics

    @property
    def statistics_only(self):
        """Gets the statistics_only of this DataQueryDTO.  # noqa: E501


        :return: The statistics_only of this DataQueryDTO.  # noqa: E501
        :rtype: bool
        """
        return self._statistics_only

    @statistics_only.setter
    def statistics_only(self, statistics_only):
        """Sets the statistics_only of this DataQueryDTO.


        :param statistics_only: The statistics_only of this DataQueryDTO.  # noqa: E501
        :type: bool
        """

        self._statistics_only = statistics_only

    @property
    def sort_orders(self):
        """Gets the sort_orders of this DataQueryDTO.  # noqa: E501


        :return: The sort_orders of this DataQueryDTO.  # noqa: E501
        :rtype: list[str]
        """
        return self._sort_orders

    @sort_orders.setter
    def sort_orders(self, sort_orders):
        """Sets the sort_orders of this DataQueryDTO.


        :param sort_orders: The sort_orders of this DataQueryDTO.  # noqa: E501
        :type: list[str]
        """

        self._sort_orders = sort_orders

    @property
    def exclude_not_available_value(self):
        """Gets the exclude_not_available_value of this DataQueryDTO.  # noqa: E501


        :return: The exclude_not_available_value of this DataQueryDTO.  # noqa: E501
        :rtype: bool
        """
        return self._exclude_not_available_value

    @exclude_not_available_value.setter
    def exclude_not_available_value(self, exclude_not_available_value):
        """Sets the exclude_not_available_value of this DataQueryDTO.


        :param exclude_not_available_value: The exclude_not_available_value of this DataQueryDTO.  # noqa: E501
        :type: bool
        """

        self._exclude_not_available_value = exclude_not_available_value

    @property
    def server_cache_enabled(self):
        """Gets the server_cache_enabled of this DataQueryDTO.  # noqa: E501


        :return: The server_cache_enabled of this DataQueryDTO.  # noqa: E501
        :rtype: bool
        """
        return self._server_cache_enabled

    @server_cache_enabled.setter
    def server_cache_enabled(self, server_cache_enabled):
        """Sets the server_cache_enabled of this DataQueryDTO.


        :param server_cache_enabled: The server_cache_enabled of this DataQueryDTO.  # noqa: E501
        :type: bool
        """

        self._server_cache_enabled = server_cache_enabled

    @property
    def client_stack_trace(self):
        """Gets the client_stack_trace of this DataQueryDTO.  # noqa: E501


        :return: The client_stack_trace of this DataQueryDTO.  # noqa: E501
        :rtype: str
        """
        return self._client_stack_trace

    @client_stack_trace.setter
    def client_stack_trace(self, client_stack_trace):
        """Sets the client_stack_trace of this DataQueryDTO.


        :param client_stack_trace: The client_stack_trace of this DataQueryDTO.  # noqa: E501
        :type: str
        """

        self._client_stack_trace = client_stack_trace

    @property
    def data_query_filters(self):
        """Gets the data_query_filters of this DataQueryDTO.  # noqa: E501


        :return: The data_query_filters of this DataQueryDTO.  # noqa: E501
        :rtype: list[DataQueryFilterDTOOfDataQueryColumnDTO]
        """
        return self._data_query_filters

    @data_query_filters.setter
    def data_query_filters(self, data_query_filters):
        """Sets the data_query_filters of this DataQueryDTO.


        :param data_query_filters: The data_query_filters of this DataQueryDTO.  # noqa: E501
        :type: list[DataQueryFilterDTOOfDataQueryColumnDTO]
        """

        self._data_query_filters = data_query_filters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataQueryDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataQueryDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
