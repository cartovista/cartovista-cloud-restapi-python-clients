# coding: utf-8

"""
    CartoVista REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LayersExportByExtentParameter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'map_id': 'str',
        'selected_language': 'str',
        'layers_export': 'list[LayerExportParameter]',
        'extent': 'ExtentDTO'
    }

    attribute_map = {
        'map_id': 'mapId',
        'selected_language': 'selectedLanguage',
        'layers_export': 'layersExport',
        'extent': 'extent'
    }

    def __init__(self, map_id=None, selected_language=None, layers_export=None, extent=None):  # noqa: E501
        """LayersExportByExtentParameter - a model defined in Swagger"""  # noqa: E501
        self._map_id = None
        self._selected_language = None
        self._layers_export = None
        self._extent = None
        self.discriminator = None
        if map_id is not None:
            self.map_id = map_id
        if selected_language is not None:
            self.selected_language = selected_language
        if layers_export is not None:
            self.layers_export = layers_export
        if extent is not None:
            self.extent = extent

    @property
    def map_id(self):
        """Gets the map_id of this LayersExportByExtentParameter.  # noqa: E501


        :return: The map_id of this LayersExportByExtentParameter.  # noqa: E501
        :rtype: str
        """
        return self._map_id

    @map_id.setter
    def map_id(self, map_id):
        """Sets the map_id of this LayersExportByExtentParameter.


        :param map_id: The map_id of this LayersExportByExtentParameter.  # noqa: E501
        :type: str
        """

        self._map_id = map_id

    @property
    def selected_language(self):
        """Gets the selected_language of this LayersExportByExtentParameter.  # noqa: E501


        :return: The selected_language of this LayersExportByExtentParameter.  # noqa: E501
        :rtype: str
        """
        return self._selected_language

    @selected_language.setter
    def selected_language(self, selected_language):
        """Sets the selected_language of this LayersExportByExtentParameter.


        :param selected_language: The selected_language of this LayersExportByExtentParameter.  # noqa: E501
        :type: str
        """

        self._selected_language = selected_language

    @property
    def layers_export(self):
        """Gets the layers_export of this LayersExportByExtentParameter.  # noqa: E501


        :return: The layers_export of this LayersExportByExtentParameter.  # noqa: E501
        :rtype: list[LayerExportParameter]
        """
        return self._layers_export

    @layers_export.setter
    def layers_export(self, layers_export):
        """Sets the layers_export of this LayersExportByExtentParameter.


        :param layers_export: The layers_export of this LayersExportByExtentParameter.  # noqa: E501
        :type: list[LayerExportParameter]
        """

        self._layers_export = layers_export

    @property
    def extent(self):
        """Gets the extent of this LayersExportByExtentParameter.  # noqa: E501


        :return: The extent of this LayersExportByExtentParameter.  # noqa: E501
        :rtype: ExtentDTO
        """
        return self._extent

    @extent.setter
    def extent(self, extent):
        """Sets the extent of this LayersExportByExtentParameter.


        :param extent: The extent of this LayersExportByExtentParameter.  # noqa: E501
        :type: ExtentDTO
        """

        self._extent = extent

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LayersExportByExtentParameter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LayersExportByExtentParameter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
