# coding: utf-8

"""
    CartoVista REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TerritoryAnalyzedDistanceDataColumnAndValue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'column_id': 'str',
        'decimal_places': 'int',
        'data_type': 'CartoVistaPortalDataType',
        'value': 'object',
        'mappable': 'bool',
        'aggregation_method': 'str'
    }

    attribute_map = {
        'name': 'name',
        'column_id': 'columnId',
        'decimal_places': 'decimalPlaces',
        'data_type': 'dataType',
        'value': 'value',
        'mappable': 'mappable',
        'aggregation_method': 'aggregationMethod'
    }

    def __init__(self, name=None, column_id=None, decimal_places=None, data_type=None, value=None, mappable=None, aggregation_method=None):  # noqa: E501
        """TerritoryAnalyzedDistanceDataColumnAndValue - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._column_id = None
        self._decimal_places = None
        self._data_type = None
        self._value = None
        self._mappable = None
        self._aggregation_method = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if column_id is not None:
            self.column_id = column_id
        if decimal_places is not None:
            self.decimal_places = decimal_places
        if data_type is not None:
            self.data_type = data_type
        if value is not None:
            self.value = value
        if mappable is not None:
            self.mappable = mappable
        if aggregation_method is not None:
            self.aggregation_method = aggregation_method

    @property
    def name(self):
        """Gets the name of this TerritoryAnalyzedDistanceDataColumnAndValue.  # noqa: E501


        :return: The name of this TerritoryAnalyzedDistanceDataColumnAndValue.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TerritoryAnalyzedDistanceDataColumnAndValue.


        :param name: The name of this TerritoryAnalyzedDistanceDataColumnAndValue.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def column_id(self):
        """Gets the column_id of this TerritoryAnalyzedDistanceDataColumnAndValue.  # noqa: E501


        :return: The column_id of this TerritoryAnalyzedDistanceDataColumnAndValue.  # noqa: E501
        :rtype: str
        """
        return self._column_id

    @column_id.setter
    def column_id(self, column_id):
        """Sets the column_id of this TerritoryAnalyzedDistanceDataColumnAndValue.


        :param column_id: The column_id of this TerritoryAnalyzedDistanceDataColumnAndValue.  # noqa: E501
        :type: str
        """

        self._column_id = column_id

    @property
    def decimal_places(self):
        """Gets the decimal_places of this TerritoryAnalyzedDistanceDataColumnAndValue.  # noqa: E501


        :return: The decimal_places of this TerritoryAnalyzedDistanceDataColumnAndValue.  # noqa: E501
        :rtype: int
        """
        return self._decimal_places

    @decimal_places.setter
    def decimal_places(self, decimal_places):
        """Sets the decimal_places of this TerritoryAnalyzedDistanceDataColumnAndValue.


        :param decimal_places: The decimal_places of this TerritoryAnalyzedDistanceDataColumnAndValue.  # noqa: E501
        :type: int
        """

        self._decimal_places = decimal_places

    @property
    def data_type(self):
        """Gets the data_type of this TerritoryAnalyzedDistanceDataColumnAndValue.  # noqa: E501


        :return: The data_type of this TerritoryAnalyzedDistanceDataColumnAndValue.  # noqa: E501
        :rtype: CartoVistaPortalDataType
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this TerritoryAnalyzedDistanceDataColumnAndValue.


        :param data_type: The data_type of this TerritoryAnalyzedDistanceDataColumnAndValue.  # noqa: E501
        :type: CartoVistaPortalDataType
        """

        self._data_type = data_type

    @property
    def value(self):
        """Gets the value of this TerritoryAnalyzedDistanceDataColumnAndValue.  # noqa: E501


        :return: The value of this TerritoryAnalyzedDistanceDataColumnAndValue.  # noqa: E501
        :rtype: object
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this TerritoryAnalyzedDistanceDataColumnAndValue.


        :param value: The value of this TerritoryAnalyzedDistanceDataColumnAndValue.  # noqa: E501
        :type: object
        """

        self._value = value

    @property
    def mappable(self):
        """Gets the mappable of this TerritoryAnalyzedDistanceDataColumnAndValue.  # noqa: E501


        :return: The mappable of this TerritoryAnalyzedDistanceDataColumnAndValue.  # noqa: E501
        :rtype: bool
        """
        return self._mappable

    @mappable.setter
    def mappable(self, mappable):
        """Sets the mappable of this TerritoryAnalyzedDistanceDataColumnAndValue.


        :param mappable: The mappable of this TerritoryAnalyzedDistanceDataColumnAndValue.  # noqa: E501
        :type: bool
        """

        self._mappable = mappable

    @property
    def aggregation_method(self):
        """Gets the aggregation_method of this TerritoryAnalyzedDistanceDataColumnAndValue.  # noqa: E501


        :return: The aggregation_method of this TerritoryAnalyzedDistanceDataColumnAndValue.  # noqa: E501
        :rtype: str
        """
        return self._aggregation_method

    @aggregation_method.setter
    def aggregation_method(self, aggregation_method):
        """Sets the aggregation_method of this TerritoryAnalyzedDistanceDataColumnAndValue.


        :param aggregation_method: The aggregation_method of this TerritoryAnalyzedDistanceDataColumnAndValue.  # noqa: E501
        :type: str
        """

        self._aggregation_method = aggregation_method

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TerritoryAnalyzedDistanceDataColumnAndValue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TerritoryAnalyzedDistanceDataColumnAndValue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
