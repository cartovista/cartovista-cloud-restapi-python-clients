# coding: utf-8

"""
    CartoVista REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SubscriptionPlans(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'free': 'SubscriptionPlan',
        'basic': 'SubscriptionPlan',
        'professional': 'SubscriptionPlan',
        'enterprise': 'SubscriptionPlan',
        'currency': 'str',
        'user_limit': 'int'
    }

    attribute_map = {
        'free': 'free',
        'basic': 'basic',
        'professional': 'professional',
        'enterprise': 'enterprise',
        'currency': 'currency',
        'user_limit': 'userLimit'
    }

    def __init__(self, free=None, basic=None, professional=None, enterprise=None, currency=None, user_limit=None):  # noqa: E501
        """SubscriptionPlans - a model defined in Swagger"""  # noqa: E501
        self._free = None
        self._basic = None
        self._professional = None
        self._enterprise = None
        self._currency = None
        self._user_limit = None
        self.discriminator = None
        if free is not None:
            self.free = free
        if basic is not None:
            self.basic = basic
        if professional is not None:
            self.professional = professional
        if enterprise is not None:
            self.enterprise = enterprise
        if currency is not None:
            self.currency = currency
        if user_limit is not None:
            self.user_limit = user_limit

    @property
    def free(self):
        """Gets the free of this SubscriptionPlans.  # noqa: E501


        :return: The free of this SubscriptionPlans.  # noqa: E501
        :rtype: SubscriptionPlan
        """
        return self._free

    @free.setter
    def free(self, free):
        """Sets the free of this SubscriptionPlans.


        :param free: The free of this SubscriptionPlans.  # noqa: E501
        :type: SubscriptionPlan
        """

        self._free = free

    @property
    def basic(self):
        """Gets the basic of this SubscriptionPlans.  # noqa: E501


        :return: The basic of this SubscriptionPlans.  # noqa: E501
        :rtype: SubscriptionPlan
        """
        return self._basic

    @basic.setter
    def basic(self, basic):
        """Sets the basic of this SubscriptionPlans.


        :param basic: The basic of this SubscriptionPlans.  # noqa: E501
        :type: SubscriptionPlan
        """

        self._basic = basic

    @property
    def professional(self):
        """Gets the professional of this SubscriptionPlans.  # noqa: E501


        :return: The professional of this SubscriptionPlans.  # noqa: E501
        :rtype: SubscriptionPlan
        """
        return self._professional

    @professional.setter
    def professional(self, professional):
        """Sets the professional of this SubscriptionPlans.


        :param professional: The professional of this SubscriptionPlans.  # noqa: E501
        :type: SubscriptionPlan
        """

        self._professional = professional

    @property
    def enterprise(self):
        """Gets the enterprise of this SubscriptionPlans.  # noqa: E501


        :return: The enterprise of this SubscriptionPlans.  # noqa: E501
        :rtype: SubscriptionPlan
        """
        return self._enterprise

    @enterprise.setter
    def enterprise(self, enterprise):
        """Sets the enterprise of this SubscriptionPlans.


        :param enterprise: The enterprise of this SubscriptionPlans.  # noqa: E501
        :type: SubscriptionPlan
        """

        self._enterprise = enterprise

    @property
    def currency(self):
        """Gets the currency of this SubscriptionPlans.  # noqa: E501


        :return: The currency of this SubscriptionPlans.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this SubscriptionPlans.


        :param currency: The currency of this SubscriptionPlans.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def user_limit(self):
        """Gets the user_limit of this SubscriptionPlans.  # noqa: E501


        :return: The user_limit of this SubscriptionPlans.  # noqa: E501
        :rtype: int
        """
        return self._user_limit

    @user_limit.setter
    def user_limit(self, user_limit):
        """Sets the user_limit of this SubscriptionPlans.


        :param user_limit: The user_limit of this SubscriptionPlans.  # noqa: E501
        :type: int
        """

        self._user_limit = user_limit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SubscriptionPlans, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubscriptionPlans):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
