# coding: utf-8

"""
    CartoVista REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetClustersRepresentationDTOOfDataQueryColumnDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'cluster_ids': 'list[str]',
        'color_data_column': 'OneOfGetClustersRepresentationDTOOfDataQueryColumnDTOColorDataColumn',
        'filter_data_columns': 'list[DataQueryColumnDTO]',
        'range_of_values': 'list[RangeOfValueDTO]',
        'individual_values': 'list[IndividualValueDTO]',
        'gradient_values': 'list[GradientValueDTO]',
        'out_of_range_value': 'OneOfGetClustersRepresentationDTOOfDataQueryColumnDTOOutOfRangeValue',
        'spatial_filter': 'OneOfGetClustersRepresentationDTOOfDataQueryColumnDTOSpatialFilter',
        'values': 'list[IValueDTO]'
    }

    attribute_map = {
        'id': 'id',
        'cluster_ids': 'clusterIds',
        'color_data_column': 'colorDataColumn',
        'filter_data_columns': 'filterDataColumns',
        'range_of_values': 'rangeOfValues',
        'individual_values': 'individualValues',
        'gradient_values': 'gradientValues',
        'out_of_range_value': 'outOfRangeValue',
        'spatial_filter': 'spatialFilter',
        'values': 'values'
    }

    def __init__(self, id=None, cluster_ids=None, color_data_column=None, filter_data_columns=None, range_of_values=None, individual_values=None, gradient_values=None, out_of_range_value=None, spatial_filter=None, values=None):  # noqa: E501
        """GetClustersRepresentationDTOOfDataQueryColumnDTO - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._cluster_ids = None
        self._color_data_column = None
        self._filter_data_columns = None
        self._range_of_values = None
        self._individual_values = None
        self._gradient_values = None
        self._out_of_range_value = None
        self._spatial_filter = None
        self._values = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if cluster_ids is not None:
            self.cluster_ids = cluster_ids
        if color_data_column is not None:
            self.color_data_column = color_data_column
        if filter_data_columns is not None:
            self.filter_data_columns = filter_data_columns
        if range_of_values is not None:
            self.range_of_values = range_of_values
        if individual_values is not None:
            self.individual_values = individual_values
        if gradient_values is not None:
            self.gradient_values = gradient_values
        if out_of_range_value is not None:
            self.out_of_range_value = out_of_range_value
        if spatial_filter is not None:
            self.spatial_filter = spatial_filter
        if values is not None:
            self.values = values

    @property
    def id(self):
        """Gets the id of this GetClustersRepresentationDTOOfDataQueryColumnDTO.  # noqa: E501


        :return: The id of this GetClustersRepresentationDTOOfDataQueryColumnDTO.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetClustersRepresentationDTOOfDataQueryColumnDTO.


        :param id: The id of this GetClustersRepresentationDTOOfDataQueryColumnDTO.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def cluster_ids(self):
        """Gets the cluster_ids of this GetClustersRepresentationDTOOfDataQueryColumnDTO.  # noqa: E501


        :return: The cluster_ids of this GetClustersRepresentationDTOOfDataQueryColumnDTO.  # noqa: E501
        :rtype: list[str]
        """
        return self._cluster_ids

    @cluster_ids.setter
    def cluster_ids(self, cluster_ids):
        """Sets the cluster_ids of this GetClustersRepresentationDTOOfDataQueryColumnDTO.


        :param cluster_ids: The cluster_ids of this GetClustersRepresentationDTOOfDataQueryColumnDTO.  # noqa: E501
        :type: list[str]
        """

        self._cluster_ids = cluster_ids

    @property
    def color_data_column(self):
        """Gets the color_data_column of this GetClustersRepresentationDTOOfDataQueryColumnDTO.  # noqa: E501


        :return: The color_data_column of this GetClustersRepresentationDTOOfDataQueryColumnDTO.  # noqa: E501
        :rtype: OneOfGetClustersRepresentationDTOOfDataQueryColumnDTOColorDataColumn
        """
        return self._color_data_column

    @color_data_column.setter
    def color_data_column(self, color_data_column):
        """Sets the color_data_column of this GetClustersRepresentationDTOOfDataQueryColumnDTO.


        :param color_data_column: The color_data_column of this GetClustersRepresentationDTOOfDataQueryColumnDTO.  # noqa: E501
        :type: OneOfGetClustersRepresentationDTOOfDataQueryColumnDTOColorDataColumn
        """

        self._color_data_column = color_data_column

    @property
    def filter_data_columns(self):
        """Gets the filter_data_columns of this GetClustersRepresentationDTOOfDataQueryColumnDTO.  # noqa: E501


        :return: The filter_data_columns of this GetClustersRepresentationDTOOfDataQueryColumnDTO.  # noqa: E501
        :rtype: list[DataQueryColumnDTO]
        """
        return self._filter_data_columns

    @filter_data_columns.setter
    def filter_data_columns(self, filter_data_columns):
        """Sets the filter_data_columns of this GetClustersRepresentationDTOOfDataQueryColumnDTO.


        :param filter_data_columns: The filter_data_columns of this GetClustersRepresentationDTOOfDataQueryColumnDTO.  # noqa: E501
        :type: list[DataQueryColumnDTO]
        """

        self._filter_data_columns = filter_data_columns

    @property
    def range_of_values(self):
        """Gets the range_of_values of this GetClustersRepresentationDTOOfDataQueryColumnDTO.  # noqa: E501


        :return: The range_of_values of this GetClustersRepresentationDTOOfDataQueryColumnDTO.  # noqa: E501
        :rtype: list[RangeOfValueDTO]
        """
        return self._range_of_values

    @range_of_values.setter
    def range_of_values(self, range_of_values):
        """Sets the range_of_values of this GetClustersRepresentationDTOOfDataQueryColumnDTO.


        :param range_of_values: The range_of_values of this GetClustersRepresentationDTOOfDataQueryColumnDTO.  # noqa: E501
        :type: list[RangeOfValueDTO]
        """

        self._range_of_values = range_of_values

    @property
    def individual_values(self):
        """Gets the individual_values of this GetClustersRepresentationDTOOfDataQueryColumnDTO.  # noqa: E501


        :return: The individual_values of this GetClustersRepresentationDTOOfDataQueryColumnDTO.  # noqa: E501
        :rtype: list[IndividualValueDTO]
        """
        return self._individual_values

    @individual_values.setter
    def individual_values(self, individual_values):
        """Sets the individual_values of this GetClustersRepresentationDTOOfDataQueryColumnDTO.


        :param individual_values: The individual_values of this GetClustersRepresentationDTOOfDataQueryColumnDTO.  # noqa: E501
        :type: list[IndividualValueDTO]
        """

        self._individual_values = individual_values

    @property
    def gradient_values(self):
        """Gets the gradient_values of this GetClustersRepresentationDTOOfDataQueryColumnDTO.  # noqa: E501


        :return: The gradient_values of this GetClustersRepresentationDTOOfDataQueryColumnDTO.  # noqa: E501
        :rtype: list[GradientValueDTO]
        """
        return self._gradient_values

    @gradient_values.setter
    def gradient_values(self, gradient_values):
        """Sets the gradient_values of this GetClustersRepresentationDTOOfDataQueryColumnDTO.


        :param gradient_values: The gradient_values of this GetClustersRepresentationDTOOfDataQueryColumnDTO.  # noqa: E501
        :type: list[GradientValueDTO]
        """

        self._gradient_values = gradient_values

    @property
    def out_of_range_value(self):
        """Gets the out_of_range_value of this GetClustersRepresentationDTOOfDataQueryColumnDTO.  # noqa: E501


        :return: The out_of_range_value of this GetClustersRepresentationDTOOfDataQueryColumnDTO.  # noqa: E501
        :rtype: OneOfGetClustersRepresentationDTOOfDataQueryColumnDTOOutOfRangeValue
        """
        return self._out_of_range_value

    @out_of_range_value.setter
    def out_of_range_value(self, out_of_range_value):
        """Sets the out_of_range_value of this GetClustersRepresentationDTOOfDataQueryColumnDTO.


        :param out_of_range_value: The out_of_range_value of this GetClustersRepresentationDTOOfDataQueryColumnDTO.  # noqa: E501
        :type: OneOfGetClustersRepresentationDTOOfDataQueryColumnDTOOutOfRangeValue
        """

        self._out_of_range_value = out_of_range_value

    @property
    def spatial_filter(self):
        """Gets the spatial_filter of this GetClustersRepresentationDTOOfDataQueryColumnDTO.  # noqa: E501


        :return: The spatial_filter of this GetClustersRepresentationDTOOfDataQueryColumnDTO.  # noqa: E501
        :rtype: OneOfGetClustersRepresentationDTOOfDataQueryColumnDTOSpatialFilter
        """
        return self._spatial_filter

    @spatial_filter.setter
    def spatial_filter(self, spatial_filter):
        """Sets the spatial_filter of this GetClustersRepresentationDTOOfDataQueryColumnDTO.


        :param spatial_filter: The spatial_filter of this GetClustersRepresentationDTOOfDataQueryColumnDTO.  # noqa: E501
        :type: OneOfGetClustersRepresentationDTOOfDataQueryColumnDTOSpatialFilter
        """

        self._spatial_filter = spatial_filter

    @property
    def values(self):
        """Gets the values of this GetClustersRepresentationDTOOfDataQueryColumnDTO.  # noqa: E501


        :return: The values of this GetClustersRepresentationDTOOfDataQueryColumnDTO.  # noqa: E501
        :rtype: list[IValueDTO]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this GetClustersRepresentationDTOOfDataQueryColumnDTO.


        :param values: The values of this GetClustersRepresentationDTOOfDataQueryColumnDTO.  # noqa: E501
        :type: list[IValueDTO]
        """

        self._values = values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetClustersRepresentationDTOOfDataQueryColumnDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetClustersRepresentationDTOOfDataQueryColumnDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
