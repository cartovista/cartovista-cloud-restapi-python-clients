# coding: utf-8

"""
    CartoVista REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MapActionLayerParameter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'hint': 'str',
        'geometry_restriction': 'OneOfMapActionLayerParameterGeometryRestriction',
        'allow_creation': 'bool',
        'returns': 'list[MapActionParameterReturnOfLayerReturnsEnum]',
        'column_filters': 'list[MapActionLayerParameterColumnFilter]',
        'type': 'MapActionParameterType'
    }

    attribute_map = {
        'name': 'name',
        'hint': 'hint',
        'geometry_restriction': 'geometryRestriction',
        'allow_creation': 'allowCreation',
        'returns': 'returns',
        'column_filters': 'columnFilters',
        'type': 'type'
    }

    def __init__(self, name=None, hint=None, geometry_restriction=None, allow_creation=None, returns=None, column_filters=None, type=None):  # noqa: E501
        """MapActionLayerParameter - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._hint = None
        self._geometry_restriction = None
        self._allow_creation = None
        self._returns = None
        self._column_filters = None
        self._type = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if hint is not None:
            self.hint = hint
        if geometry_restriction is not None:
            self.geometry_restriction = geometry_restriction
        if allow_creation is not None:
            self.allow_creation = allow_creation
        if returns is not None:
            self.returns = returns
        if column_filters is not None:
            self.column_filters = column_filters
        if type is not None:
            self.type = type

    @property
    def name(self):
        """Gets the name of this MapActionLayerParameter.  # noqa: E501


        :return: The name of this MapActionLayerParameter.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MapActionLayerParameter.


        :param name: The name of this MapActionLayerParameter.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def hint(self):
        """Gets the hint of this MapActionLayerParameter.  # noqa: E501


        :return: The hint of this MapActionLayerParameter.  # noqa: E501
        :rtype: str
        """
        return self._hint

    @hint.setter
    def hint(self, hint):
        """Sets the hint of this MapActionLayerParameter.


        :param hint: The hint of this MapActionLayerParameter.  # noqa: E501
        :type: str
        """

        self._hint = hint

    @property
    def geometry_restriction(self):
        """Gets the geometry_restriction of this MapActionLayerParameter.  # noqa: E501


        :return: The geometry_restriction of this MapActionLayerParameter.  # noqa: E501
        :rtype: OneOfMapActionLayerParameterGeometryRestriction
        """
        return self._geometry_restriction

    @geometry_restriction.setter
    def geometry_restriction(self, geometry_restriction):
        """Sets the geometry_restriction of this MapActionLayerParameter.


        :param geometry_restriction: The geometry_restriction of this MapActionLayerParameter.  # noqa: E501
        :type: OneOfMapActionLayerParameterGeometryRestriction
        """

        self._geometry_restriction = geometry_restriction

    @property
    def allow_creation(self):
        """Gets the allow_creation of this MapActionLayerParameter.  # noqa: E501


        :return: The allow_creation of this MapActionLayerParameter.  # noqa: E501
        :rtype: bool
        """
        return self._allow_creation

    @allow_creation.setter
    def allow_creation(self, allow_creation):
        """Sets the allow_creation of this MapActionLayerParameter.


        :param allow_creation: The allow_creation of this MapActionLayerParameter.  # noqa: E501
        :type: bool
        """

        self._allow_creation = allow_creation

    @property
    def returns(self):
        """Gets the returns of this MapActionLayerParameter.  # noqa: E501


        :return: The returns of this MapActionLayerParameter.  # noqa: E501
        :rtype: list[MapActionParameterReturnOfLayerReturnsEnum]
        """
        return self._returns

    @returns.setter
    def returns(self, returns):
        """Sets the returns of this MapActionLayerParameter.


        :param returns: The returns of this MapActionLayerParameter.  # noqa: E501
        :type: list[MapActionParameterReturnOfLayerReturnsEnum]
        """

        self._returns = returns

    @property
    def column_filters(self):
        """Gets the column_filters of this MapActionLayerParameter.  # noqa: E501


        :return: The column_filters of this MapActionLayerParameter.  # noqa: E501
        :rtype: list[MapActionLayerParameterColumnFilter]
        """
        return self._column_filters

    @column_filters.setter
    def column_filters(self, column_filters):
        """Sets the column_filters of this MapActionLayerParameter.


        :param column_filters: The column_filters of this MapActionLayerParameter.  # noqa: E501
        :type: list[MapActionLayerParameterColumnFilter]
        """

        self._column_filters = column_filters

    @property
    def type(self):
        """Gets the type of this MapActionLayerParameter.  # noqa: E501


        :return: The type of this MapActionLayerParameter.  # noqa: E501
        :rtype: MapActionParameterType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MapActionLayerParameter.


        :param type: The type of this MapActionLayerParameter.  # noqa: E501
        :type: MapActionParameterType
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MapActionLayerParameter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MapActionLayerParameter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
