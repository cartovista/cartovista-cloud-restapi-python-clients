# coding: utf-8

"""
    CartoVista REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SelectionStackParametersDTOOfDataQueryColumnDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_clustering_activated': 'bool',
        'selection_stack': 'list[SelectionStackBaseDTOOfDataQueryColumnDTO]',
        'target_layer': 'str',
        'target_layer_id': 'str',
        'zoom_level': 'int'
    }

    attribute_map = {
        'is_clustering_activated': 'isClusteringActivated',
        'selection_stack': 'selectionStack',
        'target_layer': 'targetLayer',
        'target_layer_id': 'targetLayerId',
        'zoom_level': 'zoomLevel'
    }

    def __init__(self, is_clustering_activated=None, selection_stack=None, target_layer=None, target_layer_id=None, zoom_level=None):  # noqa: E501
        """SelectionStackParametersDTOOfDataQueryColumnDTO - a model defined in Swagger"""  # noqa: E501
        self._is_clustering_activated = None
        self._selection_stack = None
        self._target_layer = None
        self._target_layer_id = None
        self._zoom_level = None
        self.discriminator = None
        if is_clustering_activated is not None:
            self.is_clustering_activated = is_clustering_activated
        if selection_stack is not None:
            self.selection_stack = selection_stack
        if target_layer is not None:
            self.target_layer = target_layer
        if target_layer_id is not None:
            self.target_layer_id = target_layer_id
        if zoom_level is not None:
            self.zoom_level = zoom_level

    @property
    def is_clustering_activated(self):
        """Gets the is_clustering_activated of this SelectionStackParametersDTOOfDataQueryColumnDTO.  # noqa: E501


        :return: The is_clustering_activated of this SelectionStackParametersDTOOfDataQueryColumnDTO.  # noqa: E501
        :rtype: bool
        """
        return self._is_clustering_activated

    @is_clustering_activated.setter
    def is_clustering_activated(self, is_clustering_activated):
        """Sets the is_clustering_activated of this SelectionStackParametersDTOOfDataQueryColumnDTO.


        :param is_clustering_activated: The is_clustering_activated of this SelectionStackParametersDTOOfDataQueryColumnDTO.  # noqa: E501
        :type: bool
        """

        self._is_clustering_activated = is_clustering_activated

    @property
    def selection_stack(self):
        """Gets the selection_stack of this SelectionStackParametersDTOOfDataQueryColumnDTO.  # noqa: E501


        :return: The selection_stack of this SelectionStackParametersDTOOfDataQueryColumnDTO.  # noqa: E501
        :rtype: list[SelectionStackBaseDTOOfDataQueryColumnDTO]
        """
        return self._selection_stack

    @selection_stack.setter
    def selection_stack(self, selection_stack):
        """Sets the selection_stack of this SelectionStackParametersDTOOfDataQueryColumnDTO.


        :param selection_stack: The selection_stack of this SelectionStackParametersDTOOfDataQueryColumnDTO.  # noqa: E501
        :type: list[SelectionStackBaseDTOOfDataQueryColumnDTO]
        """

        self._selection_stack = selection_stack

    @property
    def target_layer(self):
        """Gets the target_layer of this SelectionStackParametersDTOOfDataQueryColumnDTO.  # noqa: E501


        :return: The target_layer of this SelectionStackParametersDTOOfDataQueryColumnDTO.  # noqa: E501
        :rtype: str
        """
        return self._target_layer

    @target_layer.setter
    def target_layer(self, target_layer):
        """Sets the target_layer of this SelectionStackParametersDTOOfDataQueryColumnDTO.


        :param target_layer: The target_layer of this SelectionStackParametersDTOOfDataQueryColumnDTO.  # noqa: E501
        :type: str
        """

        self._target_layer = target_layer

    @property
    def target_layer_id(self):
        """Gets the target_layer_id of this SelectionStackParametersDTOOfDataQueryColumnDTO.  # noqa: E501


        :return: The target_layer_id of this SelectionStackParametersDTOOfDataQueryColumnDTO.  # noqa: E501
        :rtype: str
        """
        return self._target_layer_id

    @target_layer_id.setter
    def target_layer_id(self, target_layer_id):
        """Sets the target_layer_id of this SelectionStackParametersDTOOfDataQueryColumnDTO.


        :param target_layer_id: The target_layer_id of this SelectionStackParametersDTOOfDataQueryColumnDTO.  # noqa: E501
        :type: str
        """

        self._target_layer_id = target_layer_id

    @property
    def zoom_level(self):
        """Gets the zoom_level of this SelectionStackParametersDTOOfDataQueryColumnDTO.  # noqa: E501


        :return: The zoom_level of this SelectionStackParametersDTOOfDataQueryColumnDTO.  # noqa: E501
        :rtype: int
        """
        return self._zoom_level

    @zoom_level.setter
    def zoom_level(self, zoom_level):
        """Sets the zoom_level of this SelectionStackParametersDTOOfDataQueryColumnDTO.


        :param zoom_level: The zoom_level of this SelectionStackParametersDTOOfDataQueryColumnDTO.  # noqa: E501
        :type: int
        """

        self._zoom_level = zoom_level

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SelectionStackParametersDTOOfDataQueryColumnDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SelectionStackParametersDTOOfDataQueryColumnDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
