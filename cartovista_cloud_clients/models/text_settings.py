# coding: utf-8

"""
    CartoVista REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TextSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'color': 'str',
        'font': 'str',
        'halo': 'bool',
        'halo_color': 'str',
        'bold': 'bool',
        'italic': 'bool',
        'size': 'int'
    }

    attribute_map = {
        'color': 'color',
        'font': 'font',
        'halo': 'halo',
        'halo_color': 'haloColor',
        'bold': 'bold',
        'italic': 'italic',
        'size': 'size'
    }

    def __init__(self, color=None, font=None, halo=None, halo_color=None, bold=None, italic=None, size=None):  # noqa: E501
        """TextSettings - a model defined in Swagger"""  # noqa: E501
        self._color = None
        self._font = None
        self._halo = None
        self._halo_color = None
        self._bold = None
        self._italic = None
        self._size = None
        self.discriminator = None
        if color is not None:
            self.color = color
        if font is not None:
            self.font = font
        if halo is not None:
            self.halo = halo
        if halo_color is not None:
            self.halo_color = halo_color
        if bold is not None:
            self.bold = bold
        if italic is not None:
            self.italic = italic
        if size is not None:
            self.size = size

    @property
    def color(self):
        """Gets the color of this TextSettings.  # noqa: E501


        :return: The color of this TextSettings.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this TextSettings.


        :param color: The color of this TextSettings.  # noqa: E501
        :type: str
        """

        self._color = color

    @property
    def font(self):
        """Gets the font of this TextSettings.  # noqa: E501


        :return: The font of this TextSettings.  # noqa: E501
        :rtype: str
        """
        return self._font

    @font.setter
    def font(self, font):
        """Sets the font of this TextSettings.


        :param font: The font of this TextSettings.  # noqa: E501
        :type: str
        """

        self._font = font

    @property
    def halo(self):
        """Gets the halo of this TextSettings.  # noqa: E501


        :return: The halo of this TextSettings.  # noqa: E501
        :rtype: bool
        """
        return self._halo

    @halo.setter
    def halo(self, halo):
        """Sets the halo of this TextSettings.


        :param halo: The halo of this TextSettings.  # noqa: E501
        :type: bool
        """

        self._halo = halo

    @property
    def halo_color(self):
        """Gets the halo_color of this TextSettings.  # noqa: E501


        :return: The halo_color of this TextSettings.  # noqa: E501
        :rtype: str
        """
        return self._halo_color

    @halo_color.setter
    def halo_color(self, halo_color):
        """Sets the halo_color of this TextSettings.


        :param halo_color: The halo_color of this TextSettings.  # noqa: E501
        :type: str
        """

        self._halo_color = halo_color

    @property
    def bold(self):
        """Gets the bold of this TextSettings.  # noqa: E501


        :return: The bold of this TextSettings.  # noqa: E501
        :rtype: bool
        """
        return self._bold

    @bold.setter
    def bold(self, bold):
        """Sets the bold of this TextSettings.


        :param bold: The bold of this TextSettings.  # noqa: E501
        :type: bool
        """

        self._bold = bold

    @property
    def italic(self):
        """Gets the italic of this TextSettings.  # noqa: E501


        :return: The italic of this TextSettings.  # noqa: E501
        :rtype: bool
        """
        return self._italic

    @italic.setter
    def italic(self, italic):
        """Sets the italic of this TextSettings.


        :param italic: The italic of this TextSettings.  # noqa: E501
        :type: bool
        """

        self._italic = italic

    @property
    def size(self):
        """Gets the size of this TextSettings.  # noqa: E501


        :return: The size of this TextSettings.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this TextSettings.


        :param size: The size of this TextSettings.  # noqa: E501
        :type: int
        """

        self._size = size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TextSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TextSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
