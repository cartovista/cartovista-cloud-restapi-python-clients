# coding: utf-8

"""
    CartoVista REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SearchGeocodingSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'countries': 'list[str]',
        'maximum_matches': 'int',
        'language': 'str'
    }

    attribute_map = {
        'countries': 'countries',
        'maximum_matches': 'maximumMatches',
        'language': 'language'
    }

    def __init__(self, countries=None, maximum_matches=None, language=None):  # noqa: E501
        """SearchGeocodingSettings - a model defined in Swagger"""  # noqa: E501
        self._countries = None
        self._maximum_matches = None
        self._language = None
        self.discriminator = None
        if countries is not None:
            self.countries = countries
        if maximum_matches is not None:
            self.maximum_matches = maximum_matches
        if language is not None:
            self.language = language

    @property
    def countries(self):
        """Gets the countries of this SearchGeocodingSettings.  # noqa: E501


        :return: The countries of this SearchGeocodingSettings.  # noqa: E501
        :rtype: list[str]
        """
        return self._countries

    @countries.setter
    def countries(self, countries):
        """Sets the countries of this SearchGeocodingSettings.


        :param countries: The countries of this SearchGeocodingSettings.  # noqa: E501
        :type: list[str]
        """

        self._countries = countries

    @property
    def maximum_matches(self):
        """Gets the maximum_matches of this SearchGeocodingSettings.  # noqa: E501


        :return: The maximum_matches of this SearchGeocodingSettings.  # noqa: E501
        :rtype: int
        """
        return self._maximum_matches

    @maximum_matches.setter
    def maximum_matches(self, maximum_matches):
        """Sets the maximum_matches of this SearchGeocodingSettings.


        :param maximum_matches: The maximum_matches of this SearchGeocodingSettings.  # noqa: E501
        :type: int
        """

        self._maximum_matches = maximum_matches

    @property
    def language(self):
        """Gets the language of this SearchGeocodingSettings.  # noqa: E501


        :return: The language of this SearchGeocodingSettings.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this SearchGeocodingSettings.


        :param language: The language of this SearchGeocodingSettings.  # noqa: E501
        :type: str
        """

        self._language = language

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SearchGeocodingSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchGeocodingSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
