# coding: utf-8

"""
    CartoVista REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TopbarSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'collapsed': 'bool',
        'map_title': 'bool',
        'slide_controls': 'bool',
        'share': 'bool',
        'notification': 'bool',
        'user_menu': 'bool'
    }

    attribute_map = {
        'collapsed': 'collapsed',
        'map_title': 'mapTitle',
        'slide_controls': 'slideControls',
        'share': 'share',
        'notification': 'notification',
        'user_menu': 'userMenu'
    }

    def __init__(self, collapsed=None, map_title=None, slide_controls=None, share=None, notification=None, user_menu=None):  # noqa: E501
        """TopbarSettings - a model defined in Swagger"""  # noqa: E501
        self._collapsed = None
        self._map_title = None
        self._slide_controls = None
        self._share = None
        self._notification = None
        self._user_menu = None
        self.discriminator = None
        if collapsed is not None:
            self.collapsed = collapsed
        if map_title is not None:
            self.map_title = map_title
        if slide_controls is not None:
            self.slide_controls = slide_controls
        if share is not None:
            self.share = share
        if notification is not None:
            self.notification = notification
        if user_menu is not None:
            self.user_menu = user_menu

    @property
    def collapsed(self):
        """Gets the collapsed of this TopbarSettings.  # noqa: E501


        :return: The collapsed of this TopbarSettings.  # noqa: E501
        :rtype: bool
        """
        return self._collapsed

    @collapsed.setter
    def collapsed(self, collapsed):
        """Sets the collapsed of this TopbarSettings.


        :param collapsed: The collapsed of this TopbarSettings.  # noqa: E501
        :type: bool
        """

        self._collapsed = collapsed

    @property
    def map_title(self):
        """Gets the map_title of this TopbarSettings.  # noqa: E501


        :return: The map_title of this TopbarSettings.  # noqa: E501
        :rtype: bool
        """
        return self._map_title

    @map_title.setter
    def map_title(self, map_title):
        """Sets the map_title of this TopbarSettings.


        :param map_title: The map_title of this TopbarSettings.  # noqa: E501
        :type: bool
        """

        self._map_title = map_title

    @property
    def slide_controls(self):
        """Gets the slide_controls of this TopbarSettings.  # noqa: E501


        :return: The slide_controls of this TopbarSettings.  # noqa: E501
        :rtype: bool
        """
        return self._slide_controls

    @slide_controls.setter
    def slide_controls(self, slide_controls):
        """Sets the slide_controls of this TopbarSettings.


        :param slide_controls: The slide_controls of this TopbarSettings.  # noqa: E501
        :type: bool
        """

        self._slide_controls = slide_controls

    @property
    def share(self):
        """Gets the share of this TopbarSettings.  # noqa: E501


        :return: The share of this TopbarSettings.  # noqa: E501
        :rtype: bool
        """
        return self._share

    @share.setter
    def share(self, share):
        """Sets the share of this TopbarSettings.


        :param share: The share of this TopbarSettings.  # noqa: E501
        :type: bool
        """

        self._share = share

    @property
    def notification(self):
        """Gets the notification of this TopbarSettings.  # noqa: E501


        :return: The notification of this TopbarSettings.  # noqa: E501
        :rtype: bool
        """
        return self._notification

    @notification.setter
    def notification(self, notification):
        """Sets the notification of this TopbarSettings.


        :param notification: The notification of this TopbarSettings.  # noqa: E501
        :type: bool
        """

        self._notification = notification

    @property
    def user_menu(self):
        """Gets the user_menu of this TopbarSettings.  # noqa: E501


        :return: The user_menu of this TopbarSettings.  # noqa: E501
        :rtype: bool
        """
        return self._user_menu

    @user_menu.setter
    def user_menu(self, user_menu):
        """Sets the user_menu of this TopbarSettings.


        :param user_menu: The user_menu of this TopbarSettings.  # noqa: E501
        :type: bool
        """

        self._user_menu = user_menu

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TopbarSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TopbarSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
