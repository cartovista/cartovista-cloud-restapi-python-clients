# coding: utf-8

"""
    CartoVista REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConfirmSignUpParameter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'firstname': 'str',
        'lastname': 'str',
        'company': 'str',
        'company_role': 'str',
        'industry': 'IndustryEnum',
        'phone': 'str'
    }

    attribute_map = {
        'firstname': 'firstname',
        'lastname': 'lastname',
        'company': 'company',
        'company_role': 'companyRole',
        'industry': 'industry',
        'phone': 'phone'
    }

    def __init__(self, firstname=None, lastname=None, company=None, company_role=None, industry=None, phone=None):  # noqa: E501
        """ConfirmSignUpParameter - a model defined in Swagger"""  # noqa: E501
        self._firstname = None
        self._lastname = None
        self._company = None
        self._company_role = None
        self._industry = None
        self._phone = None
        self.discriminator = None
        if firstname is not None:
            self.firstname = firstname
        if lastname is not None:
            self.lastname = lastname
        if company is not None:
            self.company = company
        if company_role is not None:
            self.company_role = company_role
        if industry is not None:
            self.industry = industry
        if phone is not None:
            self.phone = phone

    @property
    def firstname(self):
        """Gets the firstname of this ConfirmSignUpParameter.  # noqa: E501


        :return: The firstname of this ConfirmSignUpParameter.  # noqa: E501
        :rtype: str
        """
        return self._firstname

    @firstname.setter
    def firstname(self, firstname):
        """Sets the firstname of this ConfirmSignUpParameter.


        :param firstname: The firstname of this ConfirmSignUpParameter.  # noqa: E501
        :type: str
        """

        self._firstname = firstname

    @property
    def lastname(self):
        """Gets the lastname of this ConfirmSignUpParameter.  # noqa: E501


        :return: The lastname of this ConfirmSignUpParameter.  # noqa: E501
        :rtype: str
        """
        return self._lastname

    @lastname.setter
    def lastname(self, lastname):
        """Sets the lastname of this ConfirmSignUpParameter.


        :param lastname: The lastname of this ConfirmSignUpParameter.  # noqa: E501
        :type: str
        """

        self._lastname = lastname

    @property
    def company(self):
        """Gets the company of this ConfirmSignUpParameter.  # noqa: E501


        :return: The company of this ConfirmSignUpParameter.  # noqa: E501
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this ConfirmSignUpParameter.


        :param company: The company of this ConfirmSignUpParameter.  # noqa: E501
        :type: str
        """

        self._company = company

    @property
    def company_role(self):
        """Gets the company_role of this ConfirmSignUpParameter.  # noqa: E501


        :return: The company_role of this ConfirmSignUpParameter.  # noqa: E501
        :rtype: str
        """
        return self._company_role

    @company_role.setter
    def company_role(self, company_role):
        """Sets the company_role of this ConfirmSignUpParameter.


        :param company_role: The company_role of this ConfirmSignUpParameter.  # noqa: E501
        :type: str
        """

        self._company_role = company_role

    @property
    def industry(self):
        """Gets the industry of this ConfirmSignUpParameter.  # noqa: E501


        :return: The industry of this ConfirmSignUpParameter.  # noqa: E501
        :rtype: IndustryEnum
        """
        return self._industry

    @industry.setter
    def industry(self, industry):
        """Sets the industry of this ConfirmSignUpParameter.


        :param industry: The industry of this ConfirmSignUpParameter.  # noqa: E501
        :type: IndustryEnum
        """

        self._industry = industry

    @property
    def phone(self):
        """Gets the phone of this ConfirmSignUpParameter.  # noqa: E501


        :return: The phone of this ConfirmSignUpParameter.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this ConfirmSignUpParameter.


        :param phone: The phone of this ConfirmSignUpParameter.  # noqa: E501
        :type: str
        """

        self._phone = phone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfirmSignUpParameter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfirmSignUpParameter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
