# coding: utf-8

"""
    CartoVista REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FlatFileSpatialLayerDefinitionDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'file_id': 'str',
        'uploaded_file_path': 'str',
        'file_name': 'str',
        'name': 'str',
        'type_string': 'str',
        'sheets': 'list[FlatFileSheetDTO]',
        'selected_sheet_names': 'list[str]',
        'sheet_count': 'int',
        'upload_id': 'str',
        'type': 'DataElementType'
    }

    attribute_map = {
        'file_id': 'fileId',
        'uploaded_file_path': 'uploadedFilePath',
        'file_name': 'fileName',
        'name': 'name',
        'type_string': 'typeString',
        'sheets': 'sheets',
        'selected_sheet_names': 'selectedSheetNames',
        'sheet_count': 'sheetCount',
        'upload_id': 'uploadId',
        'type': 'type'
    }

    def __init__(self, file_id=None, uploaded_file_path=None, file_name=None, name=None, type_string=None, sheets=None, selected_sheet_names=None, sheet_count=None, upload_id=None, type=None):  # noqa: E501
        """FlatFileSpatialLayerDefinitionDTO - a model defined in Swagger"""  # noqa: E501
        self._file_id = None
        self._uploaded_file_path = None
        self._file_name = None
        self._name = None
        self._type_string = None
        self._sheets = None
        self._selected_sheet_names = None
        self._sheet_count = None
        self._upload_id = None
        self._type = None
        self.discriminator = None
        if file_id is not None:
            self.file_id = file_id
        if uploaded_file_path is not None:
            self.uploaded_file_path = uploaded_file_path
        if file_name is not None:
            self.file_name = file_name
        if name is not None:
            self.name = name
        if type_string is not None:
            self.type_string = type_string
        if sheets is not None:
            self.sheets = sheets
        if selected_sheet_names is not None:
            self.selected_sheet_names = selected_sheet_names
        if sheet_count is not None:
            self.sheet_count = sheet_count
        if upload_id is not None:
            self.upload_id = upload_id
        if type is not None:
            self.type = type

    @property
    def file_id(self):
        """Gets the file_id of this FlatFileSpatialLayerDefinitionDTO.  # noqa: E501


        :return: The file_id of this FlatFileSpatialLayerDefinitionDTO.  # noqa: E501
        :rtype: str
        """
        return self._file_id

    @file_id.setter
    def file_id(self, file_id):
        """Sets the file_id of this FlatFileSpatialLayerDefinitionDTO.


        :param file_id: The file_id of this FlatFileSpatialLayerDefinitionDTO.  # noqa: E501
        :type: str
        """

        self._file_id = file_id

    @property
    def uploaded_file_path(self):
        """Gets the uploaded_file_path of this FlatFileSpatialLayerDefinitionDTO.  # noqa: E501


        :return: The uploaded_file_path of this FlatFileSpatialLayerDefinitionDTO.  # noqa: E501
        :rtype: str
        """
        return self._uploaded_file_path

    @uploaded_file_path.setter
    def uploaded_file_path(self, uploaded_file_path):
        """Sets the uploaded_file_path of this FlatFileSpatialLayerDefinitionDTO.


        :param uploaded_file_path: The uploaded_file_path of this FlatFileSpatialLayerDefinitionDTO.  # noqa: E501
        :type: str
        """

        self._uploaded_file_path = uploaded_file_path

    @property
    def file_name(self):
        """Gets the file_name of this FlatFileSpatialLayerDefinitionDTO.  # noqa: E501


        :return: The file_name of this FlatFileSpatialLayerDefinitionDTO.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this FlatFileSpatialLayerDefinitionDTO.


        :param file_name: The file_name of this FlatFileSpatialLayerDefinitionDTO.  # noqa: E501
        :type: str
        """

        self._file_name = file_name

    @property
    def name(self):
        """Gets the name of this FlatFileSpatialLayerDefinitionDTO.  # noqa: E501


        :return: The name of this FlatFileSpatialLayerDefinitionDTO.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FlatFileSpatialLayerDefinitionDTO.


        :param name: The name of this FlatFileSpatialLayerDefinitionDTO.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type_string(self):
        """Gets the type_string of this FlatFileSpatialLayerDefinitionDTO.  # noqa: E501


        :return: The type_string of this FlatFileSpatialLayerDefinitionDTO.  # noqa: E501
        :rtype: str
        """
        return self._type_string

    @type_string.setter
    def type_string(self, type_string):
        """Sets the type_string of this FlatFileSpatialLayerDefinitionDTO.


        :param type_string: The type_string of this FlatFileSpatialLayerDefinitionDTO.  # noqa: E501
        :type: str
        """

        self._type_string = type_string

    @property
    def sheets(self):
        """Gets the sheets of this FlatFileSpatialLayerDefinitionDTO.  # noqa: E501


        :return: The sheets of this FlatFileSpatialLayerDefinitionDTO.  # noqa: E501
        :rtype: list[FlatFileSheetDTO]
        """
        return self._sheets

    @sheets.setter
    def sheets(self, sheets):
        """Sets the sheets of this FlatFileSpatialLayerDefinitionDTO.


        :param sheets: The sheets of this FlatFileSpatialLayerDefinitionDTO.  # noqa: E501
        :type: list[FlatFileSheetDTO]
        """

        self._sheets = sheets

    @property
    def selected_sheet_names(self):
        """Gets the selected_sheet_names of this FlatFileSpatialLayerDefinitionDTO.  # noqa: E501


        :return: The selected_sheet_names of this FlatFileSpatialLayerDefinitionDTO.  # noqa: E501
        :rtype: list[str]
        """
        return self._selected_sheet_names

    @selected_sheet_names.setter
    def selected_sheet_names(self, selected_sheet_names):
        """Sets the selected_sheet_names of this FlatFileSpatialLayerDefinitionDTO.


        :param selected_sheet_names: The selected_sheet_names of this FlatFileSpatialLayerDefinitionDTO.  # noqa: E501
        :type: list[str]
        """

        self._selected_sheet_names = selected_sheet_names

    @property
    def sheet_count(self):
        """Gets the sheet_count of this FlatFileSpatialLayerDefinitionDTO.  # noqa: E501


        :return: The sheet_count of this FlatFileSpatialLayerDefinitionDTO.  # noqa: E501
        :rtype: int
        """
        return self._sheet_count

    @sheet_count.setter
    def sheet_count(self, sheet_count):
        """Sets the sheet_count of this FlatFileSpatialLayerDefinitionDTO.


        :param sheet_count: The sheet_count of this FlatFileSpatialLayerDefinitionDTO.  # noqa: E501
        :type: int
        """

        self._sheet_count = sheet_count

    @property
    def upload_id(self):
        """Gets the upload_id of this FlatFileSpatialLayerDefinitionDTO.  # noqa: E501


        :return: The upload_id of this FlatFileSpatialLayerDefinitionDTO.  # noqa: E501
        :rtype: str
        """
        return self._upload_id

    @upload_id.setter
    def upload_id(self, upload_id):
        """Sets the upload_id of this FlatFileSpatialLayerDefinitionDTO.


        :param upload_id: The upload_id of this FlatFileSpatialLayerDefinitionDTO.  # noqa: E501
        :type: str
        """

        self._upload_id = upload_id

    @property
    def type(self):
        """Gets the type of this FlatFileSpatialLayerDefinitionDTO.  # noqa: E501


        :return: The type of this FlatFileSpatialLayerDefinitionDTO.  # noqa: E501
        :rtype: DataElementType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FlatFileSpatialLayerDefinitionDTO.


        :param type: The type of this FlatFileSpatialLayerDefinitionDTO.  # noqa: E501
        :type: DataElementType
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FlatFileSpatialLayerDefinitionDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FlatFileSpatialLayerDefinitionDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
