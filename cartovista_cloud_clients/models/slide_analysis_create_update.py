# coding: utf-8

"""
    CartoVista REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SlideAnalysisCreateUpdate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'layer_id': 'str',
        'layer_type': 'str',
        'icon_name': 'str',
        'theme_element_enum': 'str',
        'as_overlay': 'bool',
        'columns': 'list[str]',
        'representation_enum': 'str'
    }

    attribute_map = {
        'layer_id': 'layerId',
        'layer_type': 'layerType',
        'icon_name': 'iconName',
        'theme_element_enum': 'themeElementEnum',
        'as_overlay': 'asOverlay',
        'columns': 'columns',
        'representation_enum': 'representationEnum'
    }

    def __init__(self, layer_id=None, layer_type=None, icon_name=None, theme_element_enum=None, as_overlay=None, columns=None, representation_enum=None):  # noqa: E501
        """SlideAnalysisCreateUpdate - a model defined in Swagger"""  # noqa: E501
        self._layer_id = None
        self._layer_type = None
        self._icon_name = None
        self._theme_element_enum = None
        self._as_overlay = None
        self._columns = None
        self._representation_enum = None
        self.discriminator = None
        if layer_id is not None:
            self.layer_id = layer_id
        if layer_type is not None:
            self.layer_type = layer_type
        if icon_name is not None:
            self.icon_name = icon_name
        if theme_element_enum is not None:
            self.theme_element_enum = theme_element_enum
        if as_overlay is not None:
            self.as_overlay = as_overlay
        if columns is not None:
            self.columns = columns
        if representation_enum is not None:
            self.representation_enum = representation_enum

    @property
    def layer_id(self):
        """Gets the layer_id of this SlideAnalysisCreateUpdate.  # noqa: E501


        :return: The layer_id of this SlideAnalysisCreateUpdate.  # noqa: E501
        :rtype: str
        """
        return self._layer_id

    @layer_id.setter
    def layer_id(self, layer_id):
        """Sets the layer_id of this SlideAnalysisCreateUpdate.


        :param layer_id: The layer_id of this SlideAnalysisCreateUpdate.  # noqa: E501
        :type: str
        """

        self._layer_id = layer_id

    @property
    def layer_type(self):
        """Gets the layer_type of this SlideAnalysisCreateUpdate.  # noqa: E501


        :return: The layer_type of this SlideAnalysisCreateUpdate.  # noqa: E501
        :rtype: str
        """
        return self._layer_type

    @layer_type.setter
    def layer_type(self, layer_type):
        """Sets the layer_type of this SlideAnalysisCreateUpdate.


        :param layer_type: The layer_type of this SlideAnalysisCreateUpdate.  # noqa: E501
        :type: str
        """

        self._layer_type = layer_type

    @property
    def icon_name(self):
        """Gets the icon_name of this SlideAnalysisCreateUpdate.  # noqa: E501


        :return: The icon_name of this SlideAnalysisCreateUpdate.  # noqa: E501
        :rtype: str
        """
        return self._icon_name

    @icon_name.setter
    def icon_name(self, icon_name):
        """Sets the icon_name of this SlideAnalysisCreateUpdate.


        :param icon_name: The icon_name of this SlideAnalysisCreateUpdate.  # noqa: E501
        :type: str
        """

        self._icon_name = icon_name

    @property
    def theme_element_enum(self):
        """Gets the theme_element_enum of this SlideAnalysisCreateUpdate.  # noqa: E501


        :return: The theme_element_enum of this SlideAnalysisCreateUpdate.  # noqa: E501
        :rtype: str
        """
        return self._theme_element_enum

    @theme_element_enum.setter
    def theme_element_enum(self, theme_element_enum):
        """Sets the theme_element_enum of this SlideAnalysisCreateUpdate.


        :param theme_element_enum: The theme_element_enum of this SlideAnalysisCreateUpdate.  # noqa: E501
        :type: str
        """

        self._theme_element_enum = theme_element_enum

    @property
    def as_overlay(self):
        """Gets the as_overlay of this SlideAnalysisCreateUpdate.  # noqa: E501


        :return: The as_overlay of this SlideAnalysisCreateUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._as_overlay

    @as_overlay.setter
    def as_overlay(self, as_overlay):
        """Sets the as_overlay of this SlideAnalysisCreateUpdate.


        :param as_overlay: The as_overlay of this SlideAnalysisCreateUpdate.  # noqa: E501
        :type: bool
        """

        self._as_overlay = as_overlay

    @property
    def columns(self):
        """Gets the columns of this SlideAnalysisCreateUpdate.  # noqa: E501


        :return: The columns of this SlideAnalysisCreateUpdate.  # noqa: E501
        :rtype: list[str]
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this SlideAnalysisCreateUpdate.


        :param columns: The columns of this SlideAnalysisCreateUpdate.  # noqa: E501
        :type: list[str]
        """

        self._columns = columns

    @property
    def representation_enum(self):
        """Gets the representation_enum of this SlideAnalysisCreateUpdate.  # noqa: E501


        :return: The representation_enum of this SlideAnalysisCreateUpdate.  # noqa: E501
        :rtype: str
        """
        return self._representation_enum

    @representation_enum.setter
    def representation_enum(self, representation_enum):
        """Sets the representation_enum of this SlideAnalysisCreateUpdate.


        :param representation_enum: The representation_enum of this SlideAnalysisCreateUpdate.  # noqa: E501
        :type: str
        """

        self._representation_enum = representation_enum

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SlideAnalysisCreateUpdate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SlideAnalysisCreateUpdate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
