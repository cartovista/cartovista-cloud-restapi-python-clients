# coding: utf-8

"""
    CartoVista REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class QuadTreeConfigurationDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'quad_keys': 'list[str]',
        'lowest_visible_zoom': 'int',
        'quad_tree_extent': 'ExtentDTO'
    }

    attribute_map = {
        'quad_keys': 'quadKeys',
        'lowest_visible_zoom': 'lowestVisibleZoom',
        'quad_tree_extent': 'quadTreeExtent'
    }

    def __init__(self, quad_keys=None, lowest_visible_zoom=None, quad_tree_extent=None):  # noqa: E501
        """QuadTreeConfigurationDTO - a model defined in Swagger"""  # noqa: E501
        self._quad_keys = None
        self._lowest_visible_zoom = None
        self._quad_tree_extent = None
        self.discriminator = None
        if quad_keys is not None:
            self.quad_keys = quad_keys
        if lowest_visible_zoom is not None:
            self.lowest_visible_zoom = lowest_visible_zoom
        if quad_tree_extent is not None:
            self.quad_tree_extent = quad_tree_extent

    @property
    def quad_keys(self):
        """Gets the quad_keys of this QuadTreeConfigurationDTO.  # noqa: E501


        :return: The quad_keys of this QuadTreeConfigurationDTO.  # noqa: E501
        :rtype: list[str]
        """
        return self._quad_keys

    @quad_keys.setter
    def quad_keys(self, quad_keys):
        """Sets the quad_keys of this QuadTreeConfigurationDTO.


        :param quad_keys: The quad_keys of this QuadTreeConfigurationDTO.  # noqa: E501
        :type: list[str]
        """

        self._quad_keys = quad_keys

    @property
    def lowest_visible_zoom(self):
        """Gets the lowest_visible_zoom of this QuadTreeConfigurationDTO.  # noqa: E501


        :return: The lowest_visible_zoom of this QuadTreeConfigurationDTO.  # noqa: E501
        :rtype: int
        """
        return self._lowest_visible_zoom

    @lowest_visible_zoom.setter
    def lowest_visible_zoom(self, lowest_visible_zoom):
        """Sets the lowest_visible_zoom of this QuadTreeConfigurationDTO.


        :param lowest_visible_zoom: The lowest_visible_zoom of this QuadTreeConfigurationDTO.  # noqa: E501
        :type: int
        """

        self._lowest_visible_zoom = lowest_visible_zoom

    @property
    def quad_tree_extent(self):
        """Gets the quad_tree_extent of this QuadTreeConfigurationDTO.  # noqa: E501


        :return: The quad_tree_extent of this QuadTreeConfigurationDTO.  # noqa: E501
        :rtype: ExtentDTO
        """
        return self._quad_tree_extent

    @quad_tree_extent.setter
    def quad_tree_extent(self, quad_tree_extent):
        """Sets the quad_tree_extent of this QuadTreeConfigurationDTO.


        :param quad_tree_extent: The quad_tree_extent of this QuadTreeConfigurationDTO.  # noqa: E501
        :type: ExtentDTO
        """

        self._quad_tree_extent = quad_tree_extent

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QuadTreeConfigurationDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QuadTreeConfigurationDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
