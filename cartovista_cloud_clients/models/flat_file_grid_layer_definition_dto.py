# coding: utf-8

"""
    CartoVista REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FlatFileGridLayerDefinitionDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'table_ref': 'str',
        'uploaded_file_path': 'str',
        'file_name': 'str',
        'name': 'str',
        'description': 'str',
        'type_string': 'str',
        'upload_id': 'str',
        'type': 'DataElementType',
        'band_count': 'int',
        'proj4': 'str',
        'user_friendly_proj': 'str',
        'is_spherical_mercator': 'bool',
        'extent': 'list[float]',
        'unit': 'str',
        'selected_band': 'int',
        'metadata': 'str',
        'width': 'int',
        'height': 'int',
        'band_metadatas': 'list[str]',
        'no_data_values': 'list[str]',
        'selected_band_metadata': 'str',
        'reprojection_requested': 'bool',
        'select_all_bands': 'bool',
        'is_rgb': 'bool',
        'is_scale_min_max': 'bool',
        'is_scale_cumulative': 'bool',
        'cut_under': 'int',
        'cut_above': 'int',
        'compression': 'str',
        'sheet_count': 'int'
    }

    attribute_map = {
        'id': 'id',
        'table_ref': 'tableRef',
        'uploaded_file_path': 'uploadedFilePath',
        'file_name': 'fileName',
        'name': 'name',
        'description': 'description',
        'type_string': 'typeString',
        'upload_id': 'uploadId',
        'type': 'type',
        'band_count': 'bandCount',
        'proj4': 'proj4',
        'user_friendly_proj': 'userFriendlyProj',
        'is_spherical_mercator': 'isSphericalMercator',
        'extent': 'extent',
        'unit': 'unit',
        'selected_band': 'selectedBand',
        'metadata': 'metadata',
        'width': 'width',
        'height': 'height',
        'band_metadatas': 'bandMetadatas',
        'no_data_values': 'noDataValues',
        'selected_band_metadata': 'selectedBandMetadata',
        'reprojection_requested': 'reprojectionRequested',
        'select_all_bands': 'selectAllBands',
        'is_rgb': 'isRGB',
        'is_scale_min_max': 'isScaleMinMax',
        'is_scale_cumulative': 'isScaleCumulative',
        'cut_under': 'cutUnder',
        'cut_above': 'cutAbove',
        'compression': 'compression',
        'sheet_count': 'sheetCount'
    }

    def __init__(self, id=None, table_ref=None, uploaded_file_path=None, file_name=None, name=None, description=None, type_string=None, upload_id=None, type=None, band_count=None, proj4=None, user_friendly_proj=None, is_spherical_mercator=None, extent=None, unit=None, selected_band=None, metadata=None, width=None, height=None, band_metadatas=None, no_data_values=None, selected_band_metadata=None, reprojection_requested=None, select_all_bands=None, is_rgb=None, is_scale_min_max=None, is_scale_cumulative=None, cut_under=None, cut_above=None, compression=None, sheet_count=None):  # noqa: E501
        """FlatFileGridLayerDefinitionDTO - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._table_ref = None
        self._uploaded_file_path = None
        self._file_name = None
        self._name = None
        self._description = None
        self._type_string = None
        self._upload_id = None
        self._type = None
        self._band_count = None
        self._proj4 = None
        self._user_friendly_proj = None
        self._is_spherical_mercator = None
        self._extent = None
        self._unit = None
        self._selected_band = None
        self._metadata = None
        self._width = None
        self._height = None
        self._band_metadatas = None
        self._no_data_values = None
        self._selected_band_metadata = None
        self._reprojection_requested = None
        self._select_all_bands = None
        self._is_rgb = None
        self._is_scale_min_max = None
        self._is_scale_cumulative = None
        self._cut_under = None
        self._cut_above = None
        self._compression = None
        self._sheet_count = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if table_ref is not None:
            self.table_ref = table_ref
        if uploaded_file_path is not None:
            self.uploaded_file_path = uploaded_file_path
        if file_name is not None:
            self.file_name = file_name
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if type_string is not None:
            self.type_string = type_string
        if upload_id is not None:
            self.upload_id = upload_id
        if type is not None:
            self.type = type
        if band_count is not None:
            self.band_count = band_count
        if proj4 is not None:
            self.proj4 = proj4
        if user_friendly_proj is not None:
            self.user_friendly_proj = user_friendly_proj
        if is_spherical_mercator is not None:
            self.is_spherical_mercator = is_spherical_mercator
        if extent is not None:
            self.extent = extent
        if unit is not None:
            self.unit = unit
        if selected_band is not None:
            self.selected_band = selected_band
        if metadata is not None:
            self.metadata = metadata
        if width is not None:
            self.width = width
        if height is not None:
            self.height = height
        if band_metadatas is not None:
            self.band_metadatas = band_metadatas
        if no_data_values is not None:
            self.no_data_values = no_data_values
        if selected_band_metadata is not None:
            self.selected_band_metadata = selected_band_metadata
        if reprojection_requested is not None:
            self.reprojection_requested = reprojection_requested
        if select_all_bands is not None:
            self.select_all_bands = select_all_bands
        if is_rgb is not None:
            self.is_rgb = is_rgb
        if is_scale_min_max is not None:
            self.is_scale_min_max = is_scale_min_max
        if is_scale_cumulative is not None:
            self.is_scale_cumulative = is_scale_cumulative
        if cut_under is not None:
            self.cut_under = cut_under
        if cut_above is not None:
            self.cut_above = cut_above
        if compression is not None:
            self.compression = compression
        if sheet_count is not None:
            self.sheet_count = sheet_count

    @property
    def id(self):
        """Gets the id of this FlatFileGridLayerDefinitionDTO.  # noqa: E501


        :return: The id of this FlatFileGridLayerDefinitionDTO.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FlatFileGridLayerDefinitionDTO.


        :param id: The id of this FlatFileGridLayerDefinitionDTO.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def table_ref(self):
        """Gets the table_ref of this FlatFileGridLayerDefinitionDTO.  # noqa: E501


        :return: The table_ref of this FlatFileGridLayerDefinitionDTO.  # noqa: E501
        :rtype: str
        """
        return self._table_ref

    @table_ref.setter
    def table_ref(self, table_ref):
        """Sets the table_ref of this FlatFileGridLayerDefinitionDTO.


        :param table_ref: The table_ref of this FlatFileGridLayerDefinitionDTO.  # noqa: E501
        :type: str
        """

        self._table_ref = table_ref

    @property
    def uploaded_file_path(self):
        """Gets the uploaded_file_path of this FlatFileGridLayerDefinitionDTO.  # noqa: E501


        :return: The uploaded_file_path of this FlatFileGridLayerDefinitionDTO.  # noqa: E501
        :rtype: str
        """
        return self._uploaded_file_path

    @uploaded_file_path.setter
    def uploaded_file_path(self, uploaded_file_path):
        """Sets the uploaded_file_path of this FlatFileGridLayerDefinitionDTO.


        :param uploaded_file_path: The uploaded_file_path of this FlatFileGridLayerDefinitionDTO.  # noqa: E501
        :type: str
        """

        self._uploaded_file_path = uploaded_file_path

    @property
    def file_name(self):
        """Gets the file_name of this FlatFileGridLayerDefinitionDTO.  # noqa: E501


        :return: The file_name of this FlatFileGridLayerDefinitionDTO.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this FlatFileGridLayerDefinitionDTO.


        :param file_name: The file_name of this FlatFileGridLayerDefinitionDTO.  # noqa: E501
        :type: str
        """

        self._file_name = file_name

    @property
    def name(self):
        """Gets the name of this FlatFileGridLayerDefinitionDTO.  # noqa: E501


        :return: The name of this FlatFileGridLayerDefinitionDTO.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FlatFileGridLayerDefinitionDTO.


        :param name: The name of this FlatFileGridLayerDefinitionDTO.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this FlatFileGridLayerDefinitionDTO.  # noqa: E501


        :return: The description of this FlatFileGridLayerDefinitionDTO.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this FlatFileGridLayerDefinitionDTO.


        :param description: The description of this FlatFileGridLayerDefinitionDTO.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def type_string(self):
        """Gets the type_string of this FlatFileGridLayerDefinitionDTO.  # noqa: E501


        :return: The type_string of this FlatFileGridLayerDefinitionDTO.  # noqa: E501
        :rtype: str
        """
        return self._type_string

    @type_string.setter
    def type_string(self, type_string):
        """Sets the type_string of this FlatFileGridLayerDefinitionDTO.


        :param type_string: The type_string of this FlatFileGridLayerDefinitionDTO.  # noqa: E501
        :type: str
        """

        self._type_string = type_string

    @property
    def upload_id(self):
        """Gets the upload_id of this FlatFileGridLayerDefinitionDTO.  # noqa: E501


        :return: The upload_id of this FlatFileGridLayerDefinitionDTO.  # noqa: E501
        :rtype: str
        """
        return self._upload_id

    @upload_id.setter
    def upload_id(self, upload_id):
        """Sets the upload_id of this FlatFileGridLayerDefinitionDTO.


        :param upload_id: The upload_id of this FlatFileGridLayerDefinitionDTO.  # noqa: E501
        :type: str
        """

        self._upload_id = upload_id

    @property
    def type(self):
        """Gets the type of this FlatFileGridLayerDefinitionDTO.  # noqa: E501


        :return: The type of this FlatFileGridLayerDefinitionDTO.  # noqa: E501
        :rtype: DataElementType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FlatFileGridLayerDefinitionDTO.


        :param type: The type of this FlatFileGridLayerDefinitionDTO.  # noqa: E501
        :type: DataElementType
        """

        self._type = type

    @property
    def band_count(self):
        """Gets the band_count of this FlatFileGridLayerDefinitionDTO.  # noqa: E501


        :return: The band_count of this FlatFileGridLayerDefinitionDTO.  # noqa: E501
        :rtype: int
        """
        return self._band_count

    @band_count.setter
    def band_count(self, band_count):
        """Sets the band_count of this FlatFileGridLayerDefinitionDTO.


        :param band_count: The band_count of this FlatFileGridLayerDefinitionDTO.  # noqa: E501
        :type: int
        """

        self._band_count = band_count

    @property
    def proj4(self):
        """Gets the proj4 of this FlatFileGridLayerDefinitionDTO.  # noqa: E501


        :return: The proj4 of this FlatFileGridLayerDefinitionDTO.  # noqa: E501
        :rtype: str
        """
        return self._proj4

    @proj4.setter
    def proj4(self, proj4):
        """Sets the proj4 of this FlatFileGridLayerDefinitionDTO.


        :param proj4: The proj4 of this FlatFileGridLayerDefinitionDTO.  # noqa: E501
        :type: str
        """

        self._proj4 = proj4

    @property
    def user_friendly_proj(self):
        """Gets the user_friendly_proj of this FlatFileGridLayerDefinitionDTO.  # noqa: E501


        :return: The user_friendly_proj of this FlatFileGridLayerDefinitionDTO.  # noqa: E501
        :rtype: str
        """
        return self._user_friendly_proj

    @user_friendly_proj.setter
    def user_friendly_proj(self, user_friendly_proj):
        """Sets the user_friendly_proj of this FlatFileGridLayerDefinitionDTO.


        :param user_friendly_proj: The user_friendly_proj of this FlatFileGridLayerDefinitionDTO.  # noqa: E501
        :type: str
        """

        self._user_friendly_proj = user_friendly_proj

    @property
    def is_spherical_mercator(self):
        """Gets the is_spherical_mercator of this FlatFileGridLayerDefinitionDTO.  # noqa: E501


        :return: The is_spherical_mercator of this FlatFileGridLayerDefinitionDTO.  # noqa: E501
        :rtype: bool
        """
        return self._is_spherical_mercator

    @is_spherical_mercator.setter
    def is_spherical_mercator(self, is_spherical_mercator):
        """Sets the is_spherical_mercator of this FlatFileGridLayerDefinitionDTO.


        :param is_spherical_mercator: The is_spherical_mercator of this FlatFileGridLayerDefinitionDTO.  # noqa: E501
        :type: bool
        """

        self._is_spherical_mercator = is_spherical_mercator

    @property
    def extent(self):
        """Gets the extent of this FlatFileGridLayerDefinitionDTO.  # noqa: E501


        :return: The extent of this FlatFileGridLayerDefinitionDTO.  # noqa: E501
        :rtype: list[float]
        """
        return self._extent

    @extent.setter
    def extent(self, extent):
        """Sets the extent of this FlatFileGridLayerDefinitionDTO.


        :param extent: The extent of this FlatFileGridLayerDefinitionDTO.  # noqa: E501
        :type: list[float]
        """

        self._extent = extent

    @property
    def unit(self):
        """Gets the unit of this FlatFileGridLayerDefinitionDTO.  # noqa: E501


        :return: The unit of this FlatFileGridLayerDefinitionDTO.  # noqa: E501
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this FlatFileGridLayerDefinitionDTO.


        :param unit: The unit of this FlatFileGridLayerDefinitionDTO.  # noqa: E501
        :type: str
        """

        self._unit = unit

    @property
    def selected_band(self):
        """Gets the selected_band of this FlatFileGridLayerDefinitionDTO.  # noqa: E501


        :return: The selected_band of this FlatFileGridLayerDefinitionDTO.  # noqa: E501
        :rtype: int
        """
        return self._selected_band

    @selected_band.setter
    def selected_band(self, selected_band):
        """Sets the selected_band of this FlatFileGridLayerDefinitionDTO.


        :param selected_band: The selected_band of this FlatFileGridLayerDefinitionDTO.  # noqa: E501
        :type: int
        """

        self._selected_band = selected_band

    @property
    def metadata(self):
        """Gets the metadata of this FlatFileGridLayerDefinitionDTO.  # noqa: E501


        :return: The metadata of this FlatFileGridLayerDefinitionDTO.  # noqa: E501
        :rtype: str
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this FlatFileGridLayerDefinitionDTO.


        :param metadata: The metadata of this FlatFileGridLayerDefinitionDTO.  # noqa: E501
        :type: str
        """

        self._metadata = metadata

    @property
    def width(self):
        """Gets the width of this FlatFileGridLayerDefinitionDTO.  # noqa: E501


        :return: The width of this FlatFileGridLayerDefinitionDTO.  # noqa: E501
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this FlatFileGridLayerDefinitionDTO.


        :param width: The width of this FlatFileGridLayerDefinitionDTO.  # noqa: E501
        :type: int
        """

        self._width = width

    @property
    def height(self):
        """Gets the height of this FlatFileGridLayerDefinitionDTO.  # noqa: E501


        :return: The height of this FlatFileGridLayerDefinitionDTO.  # noqa: E501
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this FlatFileGridLayerDefinitionDTO.


        :param height: The height of this FlatFileGridLayerDefinitionDTO.  # noqa: E501
        :type: int
        """

        self._height = height

    @property
    def band_metadatas(self):
        """Gets the band_metadatas of this FlatFileGridLayerDefinitionDTO.  # noqa: E501


        :return: The band_metadatas of this FlatFileGridLayerDefinitionDTO.  # noqa: E501
        :rtype: list[str]
        """
        return self._band_metadatas

    @band_metadatas.setter
    def band_metadatas(self, band_metadatas):
        """Sets the band_metadatas of this FlatFileGridLayerDefinitionDTO.


        :param band_metadatas: The band_metadatas of this FlatFileGridLayerDefinitionDTO.  # noqa: E501
        :type: list[str]
        """

        self._band_metadatas = band_metadatas

    @property
    def no_data_values(self):
        """Gets the no_data_values of this FlatFileGridLayerDefinitionDTO.  # noqa: E501


        :return: The no_data_values of this FlatFileGridLayerDefinitionDTO.  # noqa: E501
        :rtype: list[str]
        """
        return self._no_data_values

    @no_data_values.setter
    def no_data_values(self, no_data_values):
        """Sets the no_data_values of this FlatFileGridLayerDefinitionDTO.


        :param no_data_values: The no_data_values of this FlatFileGridLayerDefinitionDTO.  # noqa: E501
        :type: list[str]
        """

        self._no_data_values = no_data_values

    @property
    def selected_band_metadata(self):
        """Gets the selected_band_metadata of this FlatFileGridLayerDefinitionDTO.  # noqa: E501


        :return: The selected_band_metadata of this FlatFileGridLayerDefinitionDTO.  # noqa: E501
        :rtype: str
        """
        return self._selected_band_metadata

    @selected_band_metadata.setter
    def selected_band_metadata(self, selected_band_metadata):
        """Sets the selected_band_metadata of this FlatFileGridLayerDefinitionDTO.


        :param selected_band_metadata: The selected_band_metadata of this FlatFileGridLayerDefinitionDTO.  # noqa: E501
        :type: str
        """

        self._selected_band_metadata = selected_band_metadata

    @property
    def reprojection_requested(self):
        """Gets the reprojection_requested of this FlatFileGridLayerDefinitionDTO.  # noqa: E501


        :return: The reprojection_requested of this FlatFileGridLayerDefinitionDTO.  # noqa: E501
        :rtype: bool
        """
        return self._reprojection_requested

    @reprojection_requested.setter
    def reprojection_requested(self, reprojection_requested):
        """Sets the reprojection_requested of this FlatFileGridLayerDefinitionDTO.


        :param reprojection_requested: The reprojection_requested of this FlatFileGridLayerDefinitionDTO.  # noqa: E501
        :type: bool
        """

        self._reprojection_requested = reprojection_requested

    @property
    def select_all_bands(self):
        """Gets the select_all_bands of this FlatFileGridLayerDefinitionDTO.  # noqa: E501


        :return: The select_all_bands of this FlatFileGridLayerDefinitionDTO.  # noqa: E501
        :rtype: bool
        """
        return self._select_all_bands

    @select_all_bands.setter
    def select_all_bands(self, select_all_bands):
        """Sets the select_all_bands of this FlatFileGridLayerDefinitionDTO.


        :param select_all_bands: The select_all_bands of this FlatFileGridLayerDefinitionDTO.  # noqa: E501
        :type: bool
        """

        self._select_all_bands = select_all_bands

    @property
    def is_rgb(self):
        """Gets the is_rgb of this FlatFileGridLayerDefinitionDTO.  # noqa: E501


        :return: The is_rgb of this FlatFileGridLayerDefinitionDTO.  # noqa: E501
        :rtype: bool
        """
        return self._is_rgb

    @is_rgb.setter
    def is_rgb(self, is_rgb):
        """Sets the is_rgb of this FlatFileGridLayerDefinitionDTO.


        :param is_rgb: The is_rgb of this FlatFileGridLayerDefinitionDTO.  # noqa: E501
        :type: bool
        """

        self._is_rgb = is_rgb

    @property
    def is_scale_min_max(self):
        """Gets the is_scale_min_max of this FlatFileGridLayerDefinitionDTO.  # noqa: E501


        :return: The is_scale_min_max of this FlatFileGridLayerDefinitionDTO.  # noqa: E501
        :rtype: bool
        """
        return self._is_scale_min_max

    @is_scale_min_max.setter
    def is_scale_min_max(self, is_scale_min_max):
        """Sets the is_scale_min_max of this FlatFileGridLayerDefinitionDTO.


        :param is_scale_min_max: The is_scale_min_max of this FlatFileGridLayerDefinitionDTO.  # noqa: E501
        :type: bool
        """

        self._is_scale_min_max = is_scale_min_max

    @property
    def is_scale_cumulative(self):
        """Gets the is_scale_cumulative of this FlatFileGridLayerDefinitionDTO.  # noqa: E501


        :return: The is_scale_cumulative of this FlatFileGridLayerDefinitionDTO.  # noqa: E501
        :rtype: bool
        """
        return self._is_scale_cumulative

    @is_scale_cumulative.setter
    def is_scale_cumulative(self, is_scale_cumulative):
        """Sets the is_scale_cumulative of this FlatFileGridLayerDefinitionDTO.


        :param is_scale_cumulative: The is_scale_cumulative of this FlatFileGridLayerDefinitionDTO.  # noqa: E501
        :type: bool
        """

        self._is_scale_cumulative = is_scale_cumulative

    @property
    def cut_under(self):
        """Gets the cut_under of this FlatFileGridLayerDefinitionDTO.  # noqa: E501


        :return: The cut_under of this FlatFileGridLayerDefinitionDTO.  # noqa: E501
        :rtype: int
        """
        return self._cut_under

    @cut_under.setter
    def cut_under(self, cut_under):
        """Sets the cut_under of this FlatFileGridLayerDefinitionDTO.


        :param cut_under: The cut_under of this FlatFileGridLayerDefinitionDTO.  # noqa: E501
        :type: int
        """

        self._cut_under = cut_under

    @property
    def cut_above(self):
        """Gets the cut_above of this FlatFileGridLayerDefinitionDTO.  # noqa: E501


        :return: The cut_above of this FlatFileGridLayerDefinitionDTO.  # noqa: E501
        :rtype: int
        """
        return self._cut_above

    @cut_above.setter
    def cut_above(self, cut_above):
        """Sets the cut_above of this FlatFileGridLayerDefinitionDTO.


        :param cut_above: The cut_above of this FlatFileGridLayerDefinitionDTO.  # noqa: E501
        :type: int
        """

        self._cut_above = cut_above

    @property
    def compression(self):
        """Gets the compression of this FlatFileGridLayerDefinitionDTO.  # noqa: E501


        :return: The compression of this FlatFileGridLayerDefinitionDTO.  # noqa: E501
        :rtype: str
        """
        return self._compression

    @compression.setter
    def compression(self, compression):
        """Sets the compression of this FlatFileGridLayerDefinitionDTO.


        :param compression: The compression of this FlatFileGridLayerDefinitionDTO.  # noqa: E501
        :type: str
        """

        self._compression = compression

    @property
    def sheet_count(self):
        """Gets the sheet_count of this FlatFileGridLayerDefinitionDTO.  # noqa: E501


        :return: The sheet_count of this FlatFileGridLayerDefinitionDTO.  # noqa: E501
        :rtype: int
        """
        return self._sheet_count

    @sheet_count.setter
    def sheet_count(self, sheet_count):
        """Sets the sheet_count of this FlatFileGridLayerDefinitionDTO.


        :param sheet_count: The sheet_count of this FlatFileGridLayerDefinitionDTO.  # noqa: E501
        :type: int
        """

        self._sheet_count = sheet_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FlatFileGridLayerDefinitionDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FlatFileGridLayerDefinitionDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
