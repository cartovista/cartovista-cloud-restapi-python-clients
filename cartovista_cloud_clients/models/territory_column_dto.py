# coding: utf-8

"""
    CartoVista REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TerritoryColumnDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'territory_column_id': 'str',
        'source_column_id': 'str',
        'column_name': 'str',
        'is_column_editable': 'bool'
    }

    attribute_map = {
        'territory_column_id': 'territoryColumnId',
        'source_column_id': 'sourceColumnId',
        'column_name': 'columnName',
        'is_column_editable': 'isColumnEditable'
    }

    def __init__(self, territory_column_id=None, source_column_id=None, column_name=None, is_column_editable=None):  # noqa: E501
        """TerritoryColumnDTO - a model defined in Swagger"""  # noqa: E501
        self._territory_column_id = None
        self._source_column_id = None
        self._column_name = None
        self._is_column_editable = None
        self.discriminator = None
        if territory_column_id is not None:
            self.territory_column_id = territory_column_id
        if source_column_id is not None:
            self.source_column_id = source_column_id
        if column_name is not None:
            self.column_name = column_name
        if is_column_editable is not None:
            self.is_column_editable = is_column_editable

    @property
    def territory_column_id(self):
        """Gets the territory_column_id of this TerritoryColumnDTO.  # noqa: E501


        :return: The territory_column_id of this TerritoryColumnDTO.  # noqa: E501
        :rtype: str
        """
        return self._territory_column_id

    @territory_column_id.setter
    def territory_column_id(self, territory_column_id):
        """Sets the territory_column_id of this TerritoryColumnDTO.


        :param territory_column_id: The territory_column_id of this TerritoryColumnDTO.  # noqa: E501
        :type: str
        """

        self._territory_column_id = territory_column_id

    @property
    def source_column_id(self):
        """Gets the source_column_id of this TerritoryColumnDTO.  # noqa: E501


        :return: The source_column_id of this TerritoryColumnDTO.  # noqa: E501
        :rtype: str
        """
        return self._source_column_id

    @source_column_id.setter
    def source_column_id(self, source_column_id):
        """Sets the source_column_id of this TerritoryColumnDTO.


        :param source_column_id: The source_column_id of this TerritoryColumnDTO.  # noqa: E501
        :type: str
        """

        self._source_column_id = source_column_id

    @property
    def column_name(self):
        """Gets the column_name of this TerritoryColumnDTO.  # noqa: E501


        :return: The column_name of this TerritoryColumnDTO.  # noqa: E501
        :rtype: str
        """
        return self._column_name

    @column_name.setter
    def column_name(self, column_name):
        """Sets the column_name of this TerritoryColumnDTO.


        :param column_name: The column_name of this TerritoryColumnDTO.  # noqa: E501
        :type: str
        """

        self._column_name = column_name

    @property
    def is_column_editable(self):
        """Gets the is_column_editable of this TerritoryColumnDTO.  # noqa: E501


        :return: The is_column_editable of this TerritoryColumnDTO.  # noqa: E501
        :rtype: bool
        """
        return self._is_column_editable

    @is_column_editable.setter
    def is_column_editable(self, is_column_editable):
        """Sets the is_column_editable of this TerritoryColumnDTO.


        :param is_column_editable: The is_column_editable of this TerritoryColumnDTO.  # noqa: E501
        :type: bool
        """

        self._is_column_editable = is_column_editable

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TerritoryColumnDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TerritoryColumnDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
