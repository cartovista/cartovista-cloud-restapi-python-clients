# coding: utf-8

"""
    CartoVista REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GridLayerWithDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'grid_layer': 'GridLayer',
        'grid_sources': 'list[GridSource]',
        'maps': 'list[Map]',
        'layers': 'list[Layer]',
        'permissions': 'list[PermissionPairComplexDTO]',
        'settings': 'GridLayerSettings',
        'heatmap_settings': 'OneOfGridLayerWithDetailsHeatmapSettings'
    }

    attribute_map = {
        'grid_layer': 'gridLayer',
        'grid_sources': 'gridSources',
        'maps': 'maps',
        'layers': 'layers',
        'permissions': 'permissions',
        'settings': 'settings',
        'heatmap_settings': 'heatmapSettings'
    }

    def __init__(self, grid_layer=None, grid_sources=None, maps=None, layers=None, permissions=None, settings=None, heatmap_settings=None):  # noqa: E501
        """GridLayerWithDetails - a model defined in Swagger"""  # noqa: E501
        self._grid_layer = None
        self._grid_sources = None
        self._maps = None
        self._layers = None
        self._permissions = None
        self._settings = None
        self._heatmap_settings = None
        self.discriminator = None
        if grid_layer is not None:
            self.grid_layer = grid_layer
        if grid_sources is not None:
            self.grid_sources = grid_sources
        if maps is not None:
            self.maps = maps
        if layers is not None:
            self.layers = layers
        if permissions is not None:
            self.permissions = permissions
        if settings is not None:
            self.settings = settings
        if heatmap_settings is not None:
            self.heatmap_settings = heatmap_settings

    @property
    def grid_layer(self):
        """Gets the grid_layer of this GridLayerWithDetails.  # noqa: E501


        :return: The grid_layer of this GridLayerWithDetails.  # noqa: E501
        :rtype: GridLayer
        """
        return self._grid_layer

    @grid_layer.setter
    def grid_layer(self, grid_layer):
        """Sets the grid_layer of this GridLayerWithDetails.


        :param grid_layer: The grid_layer of this GridLayerWithDetails.  # noqa: E501
        :type: GridLayer
        """

        self._grid_layer = grid_layer

    @property
    def grid_sources(self):
        """Gets the grid_sources of this GridLayerWithDetails.  # noqa: E501


        :return: The grid_sources of this GridLayerWithDetails.  # noqa: E501
        :rtype: list[GridSource]
        """
        return self._grid_sources

    @grid_sources.setter
    def grid_sources(self, grid_sources):
        """Sets the grid_sources of this GridLayerWithDetails.


        :param grid_sources: The grid_sources of this GridLayerWithDetails.  # noqa: E501
        :type: list[GridSource]
        """

        self._grid_sources = grid_sources

    @property
    def maps(self):
        """Gets the maps of this GridLayerWithDetails.  # noqa: E501


        :return: The maps of this GridLayerWithDetails.  # noqa: E501
        :rtype: list[Map]
        """
        return self._maps

    @maps.setter
    def maps(self, maps):
        """Sets the maps of this GridLayerWithDetails.


        :param maps: The maps of this GridLayerWithDetails.  # noqa: E501
        :type: list[Map]
        """

        self._maps = maps

    @property
    def layers(self):
        """Gets the layers of this GridLayerWithDetails.  # noqa: E501


        :return: The layers of this GridLayerWithDetails.  # noqa: E501
        :rtype: list[Layer]
        """
        return self._layers

    @layers.setter
    def layers(self, layers):
        """Sets the layers of this GridLayerWithDetails.


        :param layers: The layers of this GridLayerWithDetails.  # noqa: E501
        :type: list[Layer]
        """

        self._layers = layers

    @property
    def permissions(self):
        """Gets the permissions of this GridLayerWithDetails.  # noqa: E501


        :return: The permissions of this GridLayerWithDetails.  # noqa: E501
        :rtype: list[PermissionPairComplexDTO]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this GridLayerWithDetails.


        :param permissions: The permissions of this GridLayerWithDetails.  # noqa: E501
        :type: list[PermissionPairComplexDTO]
        """

        self._permissions = permissions

    @property
    def settings(self):
        """Gets the settings of this GridLayerWithDetails.  # noqa: E501


        :return: The settings of this GridLayerWithDetails.  # noqa: E501
        :rtype: GridLayerSettings
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this GridLayerWithDetails.


        :param settings: The settings of this GridLayerWithDetails.  # noqa: E501
        :type: GridLayerSettings
        """

        self._settings = settings

    @property
    def heatmap_settings(self):
        """Gets the heatmap_settings of this GridLayerWithDetails.  # noqa: E501


        :return: The heatmap_settings of this GridLayerWithDetails.  # noqa: E501
        :rtype: OneOfGridLayerWithDetailsHeatmapSettings
        """
        return self._heatmap_settings

    @heatmap_settings.setter
    def heatmap_settings(self, heatmap_settings):
        """Sets the heatmap_settings of this GridLayerWithDetails.


        :param heatmap_settings: The heatmap_settings of this GridLayerWithDetails.  # noqa: E501
        :type: OneOfGridLayerWithDetailsHeatmapSettings
        """

        self._heatmap_settings = heatmap_settings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GridLayerWithDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GridLayerWithDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
