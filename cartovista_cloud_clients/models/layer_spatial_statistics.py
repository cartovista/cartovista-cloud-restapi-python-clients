# coding: utf-8

"""
    CartoVista REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LayerSpatialStatistics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'unique_identifier': 'str',
        'geometries_area': 'float',
        'geometries_length': 'float',
        'geometries_count': 'int',
        'unit': 'str'
    }

    attribute_map = {
        'id': 'id',
        'unique_identifier': 'uniqueIdentifier',
        'geometries_area': 'geometriesArea',
        'geometries_length': 'geometriesLength',
        'geometries_count': 'geometriesCount',
        'unit': 'unit'
    }

    def __init__(self, id=None, unique_identifier=None, geometries_area=None, geometries_length=None, geometries_count=None, unit=None):  # noqa: E501
        """LayerSpatialStatistics - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._unique_identifier = None
        self._geometries_area = None
        self._geometries_length = None
        self._geometries_count = None
        self._unit = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if unique_identifier is not None:
            self.unique_identifier = unique_identifier
        if geometries_area is not None:
            self.geometries_area = geometries_area
        if geometries_length is not None:
            self.geometries_length = geometries_length
        if geometries_count is not None:
            self.geometries_count = geometries_count
        if unit is not None:
            self.unit = unit

    @property
    def id(self):
        """Gets the id of this LayerSpatialStatistics.  # noqa: E501


        :return: The id of this LayerSpatialStatistics.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LayerSpatialStatistics.


        :param id: The id of this LayerSpatialStatistics.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def unique_identifier(self):
        """Gets the unique_identifier of this LayerSpatialStatistics.  # noqa: E501


        :return: The unique_identifier of this LayerSpatialStatistics.  # noqa: E501
        :rtype: str
        """
        return self._unique_identifier

    @unique_identifier.setter
    def unique_identifier(self, unique_identifier):
        """Sets the unique_identifier of this LayerSpatialStatistics.


        :param unique_identifier: The unique_identifier of this LayerSpatialStatistics.  # noqa: E501
        :type: str
        """

        self._unique_identifier = unique_identifier

    @property
    def geometries_area(self):
        """Gets the geometries_area of this LayerSpatialStatistics.  # noqa: E501


        :return: The geometries_area of this LayerSpatialStatistics.  # noqa: E501
        :rtype: float
        """
        return self._geometries_area

    @geometries_area.setter
    def geometries_area(self, geometries_area):
        """Sets the geometries_area of this LayerSpatialStatistics.


        :param geometries_area: The geometries_area of this LayerSpatialStatistics.  # noqa: E501
        :type: float
        """

        self._geometries_area = geometries_area

    @property
    def geometries_length(self):
        """Gets the geometries_length of this LayerSpatialStatistics.  # noqa: E501


        :return: The geometries_length of this LayerSpatialStatistics.  # noqa: E501
        :rtype: float
        """
        return self._geometries_length

    @geometries_length.setter
    def geometries_length(self, geometries_length):
        """Sets the geometries_length of this LayerSpatialStatistics.


        :param geometries_length: The geometries_length of this LayerSpatialStatistics.  # noqa: E501
        :type: float
        """

        self._geometries_length = geometries_length

    @property
    def geometries_count(self):
        """Gets the geometries_count of this LayerSpatialStatistics.  # noqa: E501


        :return: The geometries_count of this LayerSpatialStatistics.  # noqa: E501
        :rtype: int
        """
        return self._geometries_count

    @geometries_count.setter
    def geometries_count(self, geometries_count):
        """Sets the geometries_count of this LayerSpatialStatistics.


        :param geometries_count: The geometries_count of this LayerSpatialStatistics.  # noqa: E501
        :type: int
        """

        self._geometries_count = geometries_count

    @property
    def unit(self):
        """Gets the unit of this LayerSpatialStatistics.  # noqa: E501


        :return: The unit of this LayerSpatialStatistics.  # noqa: E501
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this LayerSpatialStatistics.


        :param unit: The unit of this LayerSpatialStatistics.  # noqa: E501
        :type: str
        """

        self._unit = unit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LayerSpatialStatistics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LayerSpatialStatistics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
