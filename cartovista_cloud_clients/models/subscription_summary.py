# coding: utf-8

"""
    CartoVista REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SubscriptionSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tenant_id': 'str',
        'is_managed': 'bool',
        'is_license': 'bool',
        'package': 'SubscriptionPackage',
        'billing_cycle_end': 'datetime',
        'max_users': 'int',
        'geocoding_remaining': 'int',
        'industry': 'OneOfSubscriptionSummaryIndustry',
        'has_expired': 'bool',
        'grace_period_end': 'datetime'
    }

    attribute_map = {
        'tenant_id': 'tenantId',
        'is_managed': 'isManaged',
        'is_license': 'isLicense',
        'package': 'package',
        'billing_cycle_end': 'billingCycleEnd',
        'max_users': 'maxUsers',
        'geocoding_remaining': 'geocodingRemaining',
        'industry': 'industry',
        'has_expired': 'hasExpired',
        'grace_period_end': 'gracePeriodEnd'
    }

    def __init__(self, tenant_id=None, is_managed=None, is_license=None, package=None, billing_cycle_end=None, max_users=None, geocoding_remaining=None, industry=None, has_expired=None, grace_period_end=None):  # noqa: E501
        """SubscriptionSummary - a model defined in Swagger"""  # noqa: E501
        self._tenant_id = None
        self._is_managed = None
        self._is_license = None
        self._package = None
        self._billing_cycle_end = None
        self._max_users = None
        self._geocoding_remaining = None
        self._industry = None
        self._has_expired = None
        self._grace_period_end = None
        self.discriminator = None
        if tenant_id is not None:
            self.tenant_id = tenant_id
        if is_managed is not None:
            self.is_managed = is_managed
        if is_license is not None:
            self.is_license = is_license
        if package is not None:
            self.package = package
        if billing_cycle_end is not None:
            self.billing_cycle_end = billing_cycle_end
        if max_users is not None:
            self.max_users = max_users
        if geocoding_remaining is not None:
            self.geocoding_remaining = geocoding_remaining
        if industry is not None:
            self.industry = industry
        if has_expired is not None:
            self.has_expired = has_expired
        if grace_period_end is not None:
            self.grace_period_end = grace_period_end

    @property
    def tenant_id(self):
        """Gets the tenant_id of this SubscriptionSummary.  # noqa: E501


        :return: The tenant_id of this SubscriptionSummary.  # noqa: E501
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this SubscriptionSummary.


        :param tenant_id: The tenant_id of this SubscriptionSummary.  # noqa: E501
        :type: str
        """

        self._tenant_id = tenant_id

    @property
    def is_managed(self):
        """Gets the is_managed of this SubscriptionSummary.  # noqa: E501


        :return: The is_managed of this SubscriptionSummary.  # noqa: E501
        :rtype: bool
        """
        return self._is_managed

    @is_managed.setter
    def is_managed(self, is_managed):
        """Sets the is_managed of this SubscriptionSummary.


        :param is_managed: The is_managed of this SubscriptionSummary.  # noqa: E501
        :type: bool
        """

        self._is_managed = is_managed

    @property
    def is_license(self):
        """Gets the is_license of this SubscriptionSummary.  # noqa: E501


        :return: The is_license of this SubscriptionSummary.  # noqa: E501
        :rtype: bool
        """
        return self._is_license

    @is_license.setter
    def is_license(self, is_license):
        """Sets the is_license of this SubscriptionSummary.


        :param is_license: The is_license of this SubscriptionSummary.  # noqa: E501
        :type: bool
        """

        self._is_license = is_license

    @property
    def package(self):
        """Gets the package of this SubscriptionSummary.  # noqa: E501


        :return: The package of this SubscriptionSummary.  # noqa: E501
        :rtype: SubscriptionPackage
        """
        return self._package

    @package.setter
    def package(self, package):
        """Sets the package of this SubscriptionSummary.


        :param package: The package of this SubscriptionSummary.  # noqa: E501
        :type: SubscriptionPackage
        """

        self._package = package

    @property
    def billing_cycle_end(self):
        """Gets the billing_cycle_end of this SubscriptionSummary.  # noqa: E501


        :return: The billing_cycle_end of this SubscriptionSummary.  # noqa: E501
        :rtype: datetime
        """
        return self._billing_cycle_end

    @billing_cycle_end.setter
    def billing_cycle_end(self, billing_cycle_end):
        """Sets the billing_cycle_end of this SubscriptionSummary.


        :param billing_cycle_end: The billing_cycle_end of this SubscriptionSummary.  # noqa: E501
        :type: datetime
        """

        self._billing_cycle_end = billing_cycle_end

    @property
    def max_users(self):
        """Gets the max_users of this SubscriptionSummary.  # noqa: E501


        :return: The max_users of this SubscriptionSummary.  # noqa: E501
        :rtype: int
        """
        return self._max_users

    @max_users.setter
    def max_users(self, max_users):
        """Sets the max_users of this SubscriptionSummary.


        :param max_users: The max_users of this SubscriptionSummary.  # noqa: E501
        :type: int
        """

        self._max_users = max_users

    @property
    def geocoding_remaining(self):
        """Gets the geocoding_remaining of this SubscriptionSummary.  # noqa: E501


        :return: The geocoding_remaining of this SubscriptionSummary.  # noqa: E501
        :rtype: int
        """
        return self._geocoding_remaining

    @geocoding_remaining.setter
    def geocoding_remaining(self, geocoding_remaining):
        """Sets the geocoding_remaining of this SubscriptionSummary.


        :param geocoding_remaining: The geocoding_remaining of this SubscriptionSummary.  # noqa: E501
        :type: int
        """

        self._geocoding_remaining = geocoding_remaining

    @property
    def industry(self):
        """Gets the industry of this SubscriptionSummary.  # noqa: E501


        :return: The industry of this SubscriptionSummary.  # noqa: E501
        :rtype: OneOfSubscriptionSummaryIndustry
        """
        return self._industry

    @industry.setter
    def industry(self, industry):
        """Sets the industry of this SubscriptionSummary.


        :param industry: The industry of this SubscriptionSummary.  # noqa: E501
        :type: OneOfSubscriptionSummaryIndustry
        """

        self._industry = industry

    @property
    def has_expired(self):
        """Gets the has_expired of this SubscriptionSummary.  # noqa: E501


        :return: The has_expired of this SubscriptionSummary.  # noqa: E501
        :rtype: bool
        """
        return self._has_expired

    @has_expired.setter
    def has_expired(self, has_expired):
        """Sets the has_expired of this SubscriptionSummary.


        :param has_expired: The has_expired of this SubscriptionSummary.  # noqa: E501
        :type: bool
        """

        self._has_expired = has_expired

    @property
    def grace_period_end(self):
        """Gets the grace_period_end of this SubscriptionSummary.  # noqa: E501


        :return: The grace_period_end of this SubscriptionSummary.  # noqa: E501
        :rtype: datetime
        """
        return self._grace_period_end

    @grace_period_end.setter
    def grace_period_end(self, grace_period_end):
        """Sets the grace_period_end of this SubscriptionSummary.


        :param grace_period_end: The grace_period_end of this SubscriptionSummary.  # noqa: E501
        :type: datetime
        """

        self._grace_period_end = grace_period_end

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SubscriptionSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubscriptionSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
