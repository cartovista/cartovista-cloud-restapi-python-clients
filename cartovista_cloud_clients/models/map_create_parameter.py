# coding: utf-8

"""
    CartoVista REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MapCreateParameter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'system_identifier': 'str',
        'title': 'str',
        'description': 'str',
        'language': 'LanguageEnum',
        'editable': 'bool',
        'seo_title': 'str',
        'seo_description': 'str',
        'seo_custom_html': 'str',
        'layers': 'list[MapLayerParameter]',
        'default_slide_name': 'str',
        'folder_id': 'str'
    }

    attribute_map = {
        'system_identifier': 'systemIdentifier',
        'title': 'title',
        'description': 'description',
        'language': 'language',
        'editable': 'editable',
        'seo_title': 'seoTitle',
        'seo_description': 'seoDescription',
        'seo_custom_html': 'seoCustomHTML',
        'layers': 'layers',
        'default_slide_name': 'defaultSlideName',
        'folder_id': 'folderId'
    }

    def __init__(self, system_identifier=None, title=None, description=None, language=None, editable=None, seo_title=None, seo_description=None, seo_custom_html=None, layers=None, default_slide_name=None, folder_id=None):  # noqa: E501
        """MapCreateParameter - a model defined in Swagger"""  # noqa: E501
        self._system_identifier = None
        self._title = None
        self._description = None
        self._language = None
        self._editable = None
        self._seo_title = None
        self._seo_description = None
        self._seo_custom_html = None
        self._layers = None
        self._default_slide_name = None
        self._folder_id = None
        self.discriminator = None
        if system_identifier is not None:
            self.system_identifier = system_identifier
        if title is not None:
            self.title = title
        if description is not None:
            self.description = description
        if language is not None:
            self.language = language
        if editable is not None:
            self.editable = editable
        if seo_title is not None:
            self.seo_title = seo_title
        if seo_description is not None:
            self.seo_description = seo_description
        if seo_custom_html is not None:
            self.seo_custom_html = seo_custom_html
        if layers is not None:
            self.layers = layers
        if default_slide_name is not None:
            self.default_slide_name = default_slide_name
        if folder_id is not None:
            self.folder_id = folder_id

    @property
    def system_identifier(self):
        """Gets the system_identifier of this MapCreateParameter.  # noqa: E501


        :return: The system_identifier of this MapCreateParameter.  # noqa: E501
        :rtype: str
        """
        return self._system_identifier

    @system_identifier.setter
    def system_identifier(self, system_identifier):
        """Sets the system_identifier of this MapCreateParameter.


        :param system_identifier: The system_identifier of this MapCreateParameter.  # noqa: E501
        :type: str
        """

        self._system_identifier = system_identifier

    @property
    def title(self):
        """Gets the title of this MapCreateParameter.  # noqa: E501


        :return: The title of this MapCreateParameter.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this MapCreateParameter.


        :param title: The title of this MapCreateParameter.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def description(self):
        """Gets the description of this MapCreateParameter.  # noqa: E501


        :return: The description of this MapCreateParameter.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MapCreateParameter.


        :param description: The description of this MapCreateParameter.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def language(self):
        """Gets the language of this MapCreateParameter.  # noqa: E501


        :return: The language of this MapCreateParameter.  # noqa: E501
        :rtype: LanguageEnum
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this MapCreateParameter.


        :param language: The language of this MapCreateParameter.  # noqa: E501
        :type: LanguageEnum
        """

        self._language = language

    @property
    def editable(self):
        """Gets the editable of this MapCreateParameter.  # noqa: E501


        :return: The editable of this MapCreateParameter.  # noqa: E501
        :rtype: bool
        """
        return self._editable

    @editable.setter
    def editable(self, editable):
        """Sets the editable of this MapCreateParameter.


        :param editable: The editable of this MapCreateParameter.  # noqa: E501
        :type: bool
        """

        self._editable = editable

    @property
    def seo_title(self):
        """Gets the seo_title of this MapCreateParameter.  # noqa: E501


        :return: The seo_title of this MapCreateParameter.  # noqa: E501
        :rtype: str
        """
        return self._seo_title

    @seo_title.setter
    def seo_title(self, seo_title):
        """Sets the seo_title of this MapCreateParameter.


        :param seo_title: The seo_title of this MapCreateParameter.  # noqa: E501
        :type: str
        """

        self._seo_title = seo_title

    @property
    def seo_description(self):
        """Gets the seo_description of this MapCreateParameter.  # noqa: E501


        :return: The seo_description of this MapCreateParameter.  # noqa: E501
        :rtype: str
        """
        return self._seo_description

    @seo_description.setter
    def seo_description(self, seo_description):
        """Sets the seo_description of this MapCreateParameter.


        :param seo_description: The seo_description of this MapCreateParameter.  # noqa: E501
        :type: str
        """

        self._seo_description = seo_description

    @property
    def seo_custom_html(self):
        """Gets the seo_custom_html of this MapCreateParameter.  # noqa: E501


        :return: The seo_custom_html of this MapCreateParameter.  # noqa: E501
        :rtype: str
        """
        return self._seo_custom_html

    @seo_custom_html.setter
    def seo_custom_html(self, seo_custom_html):
        """Sets the seo_custom_html of this MapCreateParameter.


        :param seo_custom_html: The seo_custom_html of this MapCreateParameter.  # noqa: E501
        :type: str
        """

        self._seo_custom_html = seo_custom_html

    @property
    def layers(self):
        """Gets the layers of this MapCreateParameter.  # noqa: E501


        :return: The layers of this MapCreateParameter.  # noqa: E501
        :rtype: list[MapLayerParameter]
        """
        return self._layers

    @layers.setter
    def layers(self, layers):
        """Sets the layers of this MapCreateParameter.


        :param layers: The layers of this MapCreateParameter.  # noqa: E501
        :type: list[MapLayerParameter]
        """

        self._layers = layers

    @property
    def default_slide_name(self):
        """Gets the default_slide_name of this MapCreateParameter.  # noqa: E501


        :return: The default_slide_name of this MapCreateParameter.  # noqa: E501
        :rtype: str
        """
        return self._default_slide_name

    @default_slide_name.setter
    def default_slide_name(self, default_slide_name):
        """Sets the default_slide_name of this MapCreateParameter.


        :param default_slide_name: The default_slide_name of this MapCreateParameter.  # noqa: E501
        :type: str
        """

        self._default_slide_name = default_slide_name

    @property
    def folder_id(self):
        """Gets the folder_id of this MapCreateParameter.  # noqa: E501


        :return: The folder_id of this MapCreateParameter.  # noqa: E501
        :rtype: str
        """
        return self._folder_id

    @folder_id.setter
    def folder_id(self, folder_id):
        """Sets the folder_id of this MapCreateParameter.


        :param folder_id: The folder_id of this MapCreateParameter.  # noqa: E501
        :type: str
        """

        self._folder_id = folder_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MapCreateParameter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MapCreateParameter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
