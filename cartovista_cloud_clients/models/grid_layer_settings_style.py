# coding: utf-8

"""
    CartoVista REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GridLayerSettingsStyle(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mode': 'GridLayerSettingsStyleMode',
        'values': 'list[GridLayerSettingsStyleValue]',
        'color_palette': 'str',
        'arrow_color': 'str',
        'shadow': 'bool',
        'smooth_rendering': 'bool',
        'rotation_unit': 'GridLayerSettingsStyleRotationUnit',
        'min': 'float',
        'max': 'float'
    }

    attribute_map = {
        'mode': 'mode',
        'values': 'values',
        'color_palette': 'colorPalette',
        'arrow_color': 'arrowColor',
        'shadow': 'shadow',
        'smooth_rendering': 'smoothRendering',
        'rotation_unit': 'rotationUnit',
        'min': 'min',
        'max': 'max'
    }

    def __init__(self, mode=None, values=None, color_palette=None, arrow_color=None, shadow=None, smooth_rendering=None, rotation_unit=None, min=None, max=None):  # noqa: E501
        """GridLayerSettingsStyle - a model defined in Swagger"""  # noqa: E501
        self._mode = None
        self._values = None
        self._color_palette = None
        self._arrow_color = None
        self._shadow = None
        self._smooth_rendering = None
        self._rotation_unit = None
        self._min = None
        self._max = None
        self.discriminator = None
        if mode is not None:
            self.mode = mode
        if values is not None:
            self.values = values
        if color_palette is not None:
            self.color_palette = color_palette
        if arrow_color is not None:
            self.arrow_color = arrow_color
        if shadow is not None:
            self.shadow = shadow
        if smooth_rendering is not None:
            self.smooth_rendering = smooth_rendering
        if rotation_unit is not None:
            self.rotation_unit = rotation_unit
        if min is not None:
            self.min = min
        if max is not None:
            self.max = max

    @property
    def mode(self):
        """Gets the mode of this GridLayerSettingsStyle.  # noqa: E501


        :return: The mode of this GridLayerSettingsStyle.  # noqa: E501
        :rtype: GridLayerSettingsStyleMode
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this GridLayerSettingsStyle.


        :param mode: The mode of this GridLayerSettingsStyle.  # noqa: E501
        :type: GridLayerSettingsStyleMode
        """

        self._mode = mode

    @property
    def values(self):
        """Gets the values of this GridLayerSettingsStyle.  # noqa: E501


        :return: The values of this GridLayerSettingsStyle.  # noqa: E501
        :rtype: list[GridLayerSettingsStyleValue]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this GridLayerSettingsStyle.


        :param values: The values of this GridLayerSettingsStyle.  # noqa: E501
        :type: list[GridLayerSettingsStyleValue]
        """

        self._values = values

    @property
    def color_palette(self):
        """Gets the color_palette of this GridLayerSettingsStyle.  # noqa: E501


        :return: The color_palette of this GridLayerSettingsStyle.  # noqa: E501
        :rtype: str
        """
        return self._color_palette

    @color_palette.setter
    def color_palette(self, color_palette):
        """Sets the color_palette of this GridLayerSettingsStyle.


        :param color_palette: The color_palette of this GridLayerSettingsStyle.  # noqa: E501
        :type: str
        """

        self._color_palette = color_palette

    @property
    def arrow_color(self):
        """Gets the arrow_color of this GridLayerSettingsStyle.  # noqa: E501


        :return: The arrow_color of this GridLayerSettingsStyle.  # noqa: E501
        :rtype: str
        """
        return self._arrow_color

    @arrow_color.setter
    def arrow_color(self, arrow_color):
        """Sets the arrow_color of this GridLayerSettingsStyle.


        :param arrow_color: The arrow_color of this GridLayerSettingsStyle.  # noqa: E501
        :type: str
        """

        self._arrow_color = arrow_color

    @property
    def shadow(self):
        """Gets the shadow of this GridLayerSettingsStyle.  # noqa: E501


        :return: The shadow of this GridLayerSettingsStyle.  # noqa: E501
        :rtype: bool
        """
        return self._shadow

    @shadow.setter
    def shadow(self, shadow):
        """Sets the shadow of this GridLayerSettingsStyle.


        :param shadow: The shadow of this GridLayerSettingsStyle.  # noqa: E501
        :type: bool
        """

        self._shadow = shadow

    @property
    def smooth_rendering(self):
        """Gets the smooth_rendering of this GridLayerSettingsStyle.  # noqa: E501


        :return: The smooth_rendering of this GridLayerSettingsStyle.  # noqa: E501
        :rtype: bool
        """
        return self._smooth_rendering

    @smooth_rendering.setter
    def smooth_rendering(self, smooth_rendering):
        """Sets the smooth_rendering of this GridLayerSettingsStyle.


        :param smooth_rendering: The smooth_rendering of this GridLayerSettingsStyle.  # noqa: E501
        :type: bool
        """

        self._smooth_rendering = smooth_rendering

    @property
    def rotation_unit(self):
        """Gets the rotation_unit of this GridLayerSettingsStyle.  # noqa: E501


        :return: The rotation_unit of this GridLayerSettingsStyle.  # noqa: E501
        :rtype: GridLayerSettingsStyleRotationUnit
        """
        return self._rotation_unit

    @rotation_unit.setter
    def rotation_unit(self, rotation_unit):
        """Sets the rotation_unit of this GridLayerSettingsStyle.


        :param rotation_unit: The rotation_unit of this GridLayerSettingsStyle.  # noqa: E501
        :type: GridLayerSettingsStyleRotationUnit
        """

        self._rotation_unit = rotation_unit

    @property
    def min(self):
        """Gets the min of this GridLayerSettingsStyle.  # noqa: E501


        :return: The min of this GridLayerSettingsStyle.  # noqa: E501
        :rtype: float
        """
        return self._min

    @min.setter
    def min(self, min):
        """Sets the min of this GridLayerSettingsStyle.


        :param min: The min of this GridLayerSettingsStyle.  # noqa: E501
        :type: float
        """

        self._min = min

    @property
    def max(self):
        """Gets the max of this GridLayerSettingsStyle.  # noqa: E501


        :return: The max of this GridLayerSettingsStyle.  # noqa: E501
        :rtype: float
        """
        return self._max

    @max.setter
    def max(self, max):
        """Sets the max of this GridLayerSettingsStyle.


        :param max: The max of this GridLayerSettingsStyle.  # noqa: E501
        :type: float
        """

        self._max = max

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GridLayerSettingsStyle, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GridLayerSettingsStyle):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
