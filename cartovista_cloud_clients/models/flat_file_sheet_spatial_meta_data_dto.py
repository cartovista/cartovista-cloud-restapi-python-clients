# coding: utf-8

"""
    CartoVista REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FlatFileSheetSpatialMetaDataDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'spatial_metadata_id': 'str',
        'geometry_type': 'GeometryTypeEnum',
        'target_proj4': 'str',
        'target_srid': 'int',
        'proj4': 'str',
        'user_friendly_proj': 'str',
        'reprojection_requested': 'bool',
        'is_spherical_mercator': 'bool'
    }

    attribute_map = {
        'spatial_metadata_id': 'spatialMetadataId',
        'geometry_type': 'geometryType',
        'target_proj4': 'targetProj4',
        'target_srid': 'targetSrid',
        'proj4': 'proj4',
        'user_friendly_proj': 'userFriendlyProj',
        'reprojection_requested': 'reprojectionRequested',
        'is_spherical_mercator': 'isSphericalMercator'
    }

    def __init__(self, spatial_metadata_id=None, geometry_type=None, target_proj4=None, target_srid=None, proj4=None, user_friendly_proj=None, reprojection_requested=None, is_spherical_mercator=None):  # noqa: E501
        """FlatFileSheetSpatialMetaDataDTO - a model defined in Swagger"""  # noqa: E501
        self._spatial_metadata_id = None
        self._geometry_type = None
        self._target_proj4 = None
        self._target_srid = None
        self._proj4 = None
        self._user_friendly_proj = None
        self._reprojection_requested = None
        self._is_spherical_mercator = None
        self.discriminator = None
        if spatial_metadata_id is not None:
            self.spatial_metadata_id = spatial_metadata_id
        if geometry_type is not None:
            self.geometry_type = geometry_type
        if target_proj4 is not None:
            self.target_proj4 = target_proj4
        if target_srid is not None:
            self.target_srid = target_srid
        if proj4 is not None:
            self.proj4 = proj4
        if user_friendly_proj is not None:
            self.user_friendly_proj = user_friendly_proj
        if reprojection_requested is not None:
            self.reprojection_requested = reprojection_requested
        if is_spherical_mercator is not None:
            self.is_spherical_mercator = is_spherical_mercator

    @property
    def spatial_metadata_id(self):
        """Gets the spatial_metadata_id of this FlatFileSheetSpatialMetaDataDTO.  # noqa: E501


        :return: The spatial_metadata_id of this FlatFileSheetSpatialMetaDataDTO.  # noqa: E501
        :rtype: str
        """
        return self._spatial_metadata_id

    @spatial_metadata_id.setter
    def spatial_metadata_id(self, spatial_metadata_id):
        """Sets the spatial_metadata_id of this FlatFileSheetSpatialMetaDataDTO.


        :param spatial_metadata_id: The spatial_metadata_id of this FlatFileSheetSpatialMetaDataDTO.  # noqa: E501
        :type: str
        """

        self._spatial_metadata_id = spatial_metadata_id

    @property
    def geometry_type(self):
        """Gets the geometry_type of this FlatFileSheetSpatialMetaDataDTO.  # noqa: E501


        :return: The geometry_type of this FlatFileSheetSpatialMetaDataDTO.  # noqa: E501
        :rtype: GeometryTypeEnum
        """
        return self._geometry_type

    @geometry_type.setter
    def geometry_type(self, geometry_type):
        """Sets the geometry_type of this FlatFileSheetSpatialMetaDataDTO.


        :param geometry_type: The geometry_type of this FlatFileSheetSpatialMetaDataDTO.  # noqa: E501
        :type: GeometryTypeEnum
        """

        self._geometry_type = geometry_type

    @property
    def target_proj4(self):
        """Gets the target_proj4 of this FlatFileSheetSpatialMetaDataDTO.  # noqa: E501


        :return: The target_proj4 of this FlatFileSheetSpatialMetaDataDTO.  # noqa: E501
        :rtype: str
        """
        return self._target_proj4

    @target_proj4.setter
    def target_proj4(self, target_proj4):
        """Sets the target_proj4 of this FlatFileSheetSpatialMetaDataDTO.


        :param target_proj4: The target_proj4 of this FlatFileSheetSpatialMetaDataDTO.  # noqa: E501
        :type: str
        """

        self._target_proj4 = target_proj4

    @property
    def target_srid(self):
        """Gets the target_srid of this FlatFileSheetSpatialMetaDataDTO.  # noqa: E501


        :return: The target_srid of this FlatFileSheetSpatialMetaDataDTO.  # noqa: E501
        :rtype: int
        """
        return self._target_srid

    @target_srid.setter
    def target_srid(self, target_srid):
        """Sets the target_srid of this FlatFileSheetSpatialMetaDataDTO.


        :param target_srid: The target_srid of this FlatFileSheetSpatialMetaDataDTO.  # noqa: E501
        :type: int
        """

        self._target_srid = target_srid

    @property
    def proj4(self):
        """Gets the proj4 of this FlatFileSheetSpatialMetaDataDTO.  # noqa: E501


        :return: The proj4 of this FlatFileSheetSpatialMetaDataDTO.  # noqa: E501
        :rtype: str
        """
        return self._proj4

    @proj4.setter
    def proj4(self, proj4):
        """Sets the proj4 of this FlatFileSheetSpatialMetaDataDTO.


        :param proj4: The proj4 of this FlatFileSheetSpatialMetaDataDTO.  # noqa: E501
        :type: str
        """

        self._proj4 = proj4

    @property
    def user_friendly_proj(self):
        """Gets the user_friendly_proj of this FlatFileSheetSpatialMetaDataDTO.  # noqa: E501


        :return: The user_friendly_proj of this FlatFileSheetSpatialMetaDataDTO.  # noqa: E501
        :rtype: str
        """
        return self._user_friendly_proj

    @user_friendly_proj.setter
    def user_friendly_proj(self, user_friendly_proj):
        """Sets the user_friendly_proj of this FlatFileSheetSpatialMetaDataDTO.


        :param user_friendly_proj: The user_friendly_proj of this FlatFileSheetSpatialMetaDataDTO.  # noqa: E501
        :type: str
        """

        self._user_friendly_proj = user_friendly_proj

    @property
    def reprojection_requested(self):
        """Gets the reprojection_requested of this FlatFileSheetSpatialMetaDataDTO.  # noqa: E501


        :return: The reprojection_requested of this FlatFileSheetSpatialMetaDataDTO.  # noqa: E501
        :rtype: bool
        """
        return self._reprojection_requested

    @reprojection_requested.setter
    def reprojection_requested(self, reprojection_requested):
        """Sets the reprojection_requested of this FlatFileSheetSpatialMetaDataDTO.


        :param reprojection_requested: The reprojection_requested of this FlatFileSheetSpatialMetaDataDTO.  # noqa: E501
        :type: bool
        """

        self._reprojection_requested = reprojection_requested

    @property
    def is_spherical_mercator(self):
        """Gets the is_spherical_mercator of this FlatFileSheetSpatialMetaDataDTO.  # noqa: E501


        :return: The is_spherical_mercator of this FlatFileSheetSpatialMetaDataDTO.  # noqa: E501
        :rtype: bool
        """
        return self._is_spherical_mercator

    @is_spherical_mercator.setter
    def is_spherical_mercator(self, is_spherical_mercator):
        """Sets the is_spherical_mercator of this FlatFileSheetSpatialMetaDataDTO.


        :param is_spherical_mercator: The is_spherical_mercator of this FlatFileSheetSpatialMetaDataDTO.  # noqa: E501
        :type: bool
        """

        self._is_spherical_mercator = is_spherical_mercator

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FlatFileSheetSpatialMetaDataDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FlatFileSheetSpatialMetaDataDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
