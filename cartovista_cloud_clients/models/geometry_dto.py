# coding: utf-8

"""
    CartoVista REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GeometryDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        't': 'str',
        'centroid': 'list[float]',
        'extent': 'list[float]'
    }

    attribute_map = {
        't': 't',
        'centroid': 'centroid',
        'extent': 'extent'
    }

    def __init__(self, t=None, centroid=None, extent=None):  # noqa: E501
        """GeometryDTO - a model defined in Swagger"""  # noqa: E501
        self._t = None
        self._centroid = None
        self._extent = None
        self.discriminator = None
        if t is not None:
            self.t = t
        if centroid is not None:
            self.centroid = centroid
        if extent is not None:
            self.extent = extent

    @property
    def t(self):
        """Gets the t of this GeometryDTO.  # noqa: E501


        :return: The t of this GeometryDTO.  # noqa: E501
        :rtype: str
        """
        return self._t

    @t.setter
    def t(self, t):
        """Sets the t of this GeometryDTO.


        :param t: The t of this GeometryDTO.  # noqa: E501
        :type: str
        """

        self._t = t

    @property
    def centroid(self):
        """Gets the centroid of this GeometryDTO.  # noqa: E501


        :return: The centroid of this GeometryDTO.  # noqa: E501
        :rtype: list[float]
        """
        return self._centroid

    @centroid.setter
    def centroid(self, centroid):
        """Sets the centroid of this GeometryDTO.


        :param centroid: The centroid of this GeometryDTO.  # noqa: E501
        :type: list[float]
        """

        self._centroid = centroid

    @property
    def extent(self):
        """Gets the extent of this GeometryDTO.  # noqa: E501


        :return: The extent of this GeometryDTO.  # noqa: E501
        :rtype: list[float]
        """
        return self._extent

    @extent.setter
    def extent(self, extent):
        """Sets the extent of this GeometryDTO.


        :param extent: The extent of this GeometryDTO.  # noqa: E501
        :type: list[float]
        """

        self._extent = extent

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GeometryDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GeometryDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
