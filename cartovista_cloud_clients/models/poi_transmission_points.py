# coding: utf-8

"""
    CartoVista REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PoiTransmissionPoints(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'layer_id': 'str',
        'transmission_id_column_id': 'str',
        'contingency_column_id': 'str',
        'from_kv_column_id': 'str'
    }

    attribute_map = {
        'layer_id': 'layerId',
        'transmission_id_column_id': 'transmissionIdColumnId',
        'contingency_column_id': 'contingencyColumnId',
        'from_kv_column_id': 'fromKvColumnId'
    }

    def __init__(self, layer_id=None, transmission_id_column_id=None, contingency_column_id=None, from_kv_column_id=None):  # noqa: E501
        """PoiTransmissionPoints - a model defined in Swagger"""  # noqa: E501
        self._layer_id = None
        self._transmission_id_column_id = None
        self._contingency_column_id = None
        self._from_kv_column_id = None
        self.discriminator = None
        if layer_id is not None:
            self.layer_id = layer_id
        if transmission_id_column_id is not None:
            self.transmission_id_column_id = transmission_id_column_id
        if contingency_column_id is not None:
            self.contingency_column_id = contingency_column_id
        if from_kv_column_id is not None:
            self.from_kv_column_id = from_kv_column_id

    @property
    def layer_id(self):
        """Gets the layer_id of this PoiTransmissionPoints.  # noqa: E501


        :return: The layer_id of this PoiTransmissionPoints.  # noqa: E501
        :rtype: str
        """
        return self._layer_id

    @layer_id.setter
    def layer_id(self, layer_id):
        """Sets the layer_id of this PoiTransmissionPoints.


        :param layer_id: The layer_id of this PoiTransmissionPoints.  # noqa: E501
        :type: str
        """

        self._layer_id = layer_id

    @property
    def transmission_id_column_id(self):
        """Gets the transmission_id_column_id of this PoiTransmissionPoints.  # noqa: E501


        :return: The transmission_id_column_id of this PoiTransmissionPoints.  # noqa: E501
        :rtype: str
        """
        return self._transmission_id_column_id

    @transmission_id_column_id.setter
    def transmission_id_column_id(self, transmission_id_column_id):
        """Sets the transmission_id_column_id of this PoiTransmissionPoints.


        :param transmission_id_column_id: The transmission_id_column_id of this PoiTransmissionPoints.  # noqa: E501
        :type: str
        """

        self._transmission_id_column_id = transmission_id_column_id

    @property
    def contingency_column_id(self):
        """Gets the contingency_column_id of this PoiTransmissionPoints.  # noqa: E501


        :return: The contingency_column_id of this PoiTransmissionPoints.  # noqa: E501
        :rtype: str
        """
        return self._contingency_column_id

    @contingency_column_id.setter
    def contingency_column_id(self, contingency_column_id):
        """Sets the contingency_column_id of this PoiTransmissionPoints.


        :param contingency_column_id: The contingency_column_id of this PoiTransmissionPoints.  # noqa: E501
        :type: str
        """

        self._contingency_column_id = contingency_column_id

    @property
    def from_kv_column_id(self):
        """Gets the from_kv_column_id of this PoiTransmissionPoints.  # noqa: E501


        :return: The from_kv_column_id of this PoiTransmissionPoints.  # noqa: E501
        :rtype: str
        """
        return self._from_kv_column_id

    @from_kv_column_id.setter
    def from_kv_column_id(self, from_kv_column_id):
        """Sets the from_kv_column_id of this PoiTransmissionPoints.


        :param from_kv_column_id: The from_kv_column_id of this PoiTransmissionPoints.  # noqa: E501
        :type: str
        """

        self._from_kv_column_id = from_kv_column_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PoiTransmissionPoints, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PoiTransmissionPoints):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
