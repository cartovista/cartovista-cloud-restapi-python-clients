# coding: utf-8

"""
    CartoVista REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdateTerritoryBlocksParameter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'acknowledged_implantation_conflicts': 'bool',
        'resolutions': 'OneOfUpdateTerritoryBlocksParameterResolutions',
        'blocks_to_add': 'UpdateTerritoryBlockList',
        'blocks_to_delete': 'list[UpdateTerritoryBlockList]'
    }

    attribute_map = {
        'acknowledged_implantation_conflicts': 'acknowledgedImplantationConflicts',
        'resolutions': 'resolutions',
        'blocks_to_add': 'blocksToAdd',
        'blocks_to_delete': 'blocksToDelete'
    }

    def __init__(self, acknowledged_implantation_conflicts=None, resolutions=None, blocks_to_add=None, blocks_to_delete=None):  # noqa: E501
        """UpdateTerritoryBlocksParameter - a model defined in Swagger"""  # noqa: E501
        self._acknowledged_implantation_conflicts = None
        self._resolutions = None
        self._blocks_to_add = None
        self._blocks_to_delete = None
        self.discriminator = None
        if acknowledged_implantation_conflicts is not None:
            self.acknowledged_implantation_conflicts = acknowledged_implantation_conflicts
        if resolutions is not None:
            self.resolutions = resolutions
        if blocks_to_add is not None:
            self.blocks_to_add = blocks_to_add
        if blocks_to_delete is not None:
            self.blocks_to_delete = blocks_to_delete

    @property
    def acknowledged_implantation_conflicts(self):
        """Gets the acknowledged_implantation_conflicts of this UpdateTerritoryBlocksParameter.  # noqa: E501


        :return: The acknowledged_implantation_conflicts of this UpdateTerritoryBlocksParameter.  # noqa: E501
        :rtype: bool
        """
        return self._acknowledged_implantation_conflicts

    @acknowledged_implantation_conflicts.setter
    def acknowledged_implantation_conflicts(self, acknowledged_implantation_conflicts):
        """Sets the acknowledged_implantation_conflicts of this UpdateTerritoryBlocksParameter.


        :param acknowledged_implantation_conflicts: The acknowledged_implantation_conflicts of this UpdateTerritoryBlocksParameter.  # noqa: E501
        :type: bool
        """

        self._acknowledged_implantation_conflicts = acknowledged_implantation_conflicts

    @property
    def resolutions(self):
        """Gets the resolutions of this UpdateTerritoryBlocksParameter.  # noqa: E501


        :return: The resolutions of this UpdateTerritoryBlocksParameter.  # noqa: E501
        :rtype: OneOfUpdateTerritoryBlocksParameterResolutions
        """
        return self._resolutions

    @resolutions.setter
    def resolutions(self, resolutions):
        """Sets the resolutions of this UpdateTerritoryBlocksParameter.


        :param resolutions: The resolutions of this UpdateTerritoryBlocksParameter.  # noqa: E501
        :type: OneOfUpdateTerritoryBlocksParameterResolutions
        """

        self._resolutions = resolutions

    @property
    def blocks_to_add(self):
        """Gets the blocks_to_add of this UpdateTerritoryBlocksParameter.  # noqa: E501


        :return: The blocks_to_add of this UpdateTerritoryBlocksParameter.  # noqa: E501
        :rtype: UpdateTerritoryBlockList
        """
        return self._blocks_to_add

    @blocks_to_add.setter
    def blocks_to_add(self, blocks_to_add):
        """Sets the blocks_to_add of this UpdateTerritoryBlocksParameter.


        :param blocks_to_add: The blocks_to_add of this UpdateTerritoryBlocksParameter.  # noqa: E501
        :type: UpdateTerritoryBlockList
        """

        self._blocks_to_add = blocks_to_add

    @property
    def blocks_to_delete(self):
        """Gets the blocks_to_delete of this UpdateTerritoryBlocksParameter.  # noqa: E501


        :return: The blocks_to_delete of this UpdateTerritoryBlocksParameter.  # noqa: E501
        :rtype: list[UpdateTerritoryBlockList]
        """
        return self._blocks_to_delete

    @blocks_to_delete.setter
    def blocks_to_delete(self, blocks_to_delete):
        """Sets the blocks_to_delete of this UpdateTerritoryBlocksParameter.


        :param blocks_to_delete: The blocks_to_delete of this UpdateTerritoryBlocksParameter.  # noqa: E501
        :type: list[UpdateTerritoryBlockList]
        """

        self._blocks_to_delete = blocks_to_delete

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateTerritoryBlocksParameter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateTerritoryBlocksParameter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
