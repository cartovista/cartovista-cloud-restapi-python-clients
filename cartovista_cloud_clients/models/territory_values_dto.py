# coding: utf-8

"""
    CartoVista REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TerritoryValuesDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'territory_id': 'int',
        'wkt': 'str',
        'aggregated_values': 'dict(str, float)'
    }

    attribute_map = {
        'territory_id': 'territoryId',
        'wkt': 'wkt',
        'aggregated_values': 'aggregatedValues'
    }

    def __init__(self, territory_id=None, wkt=None, aggregated_values=None):  # noqa: E501
        """TerritoryValuesDTO - a model defined in Swagger"""  # noqa: E501
        self._territory_id = None
        self._wkt = None
        self._aggregated_values = None
        self.discriminator = None
        if territory_id is not None:
            self.territory_id = territory_id
        if wkt is not None:
            self.wkt = wkt
        if aggregated_values is not None:
            self.aggregated_values = aggregated_values

    @property
    def territory_id(self):
        """Gets the territory_id of this TerritoryValuesDTO.  # noqa: E501


        :return: The territory_id of this TerritoryValuesDTO.  # noqa: E501
        :rtype: int
        """
        return self._territory_id

    @territory_id.setter
    def territory_id(self, territory_id):
        """Sets the territory_id of this TerritoryValuesDTO.


        :param territory_id: The territory_id of this TerritoryValuesDTO.  # noqa: E501
        :type: int
        """

        self._territory_id = territory_id

    @property
    def wkt(self):
        """Gets the wkt of this TerritoryValuesDTO.  # noqa: E501


        :return: The wkt of this TerritoryValuesDTO.  # noqa: E501
        :rtype: str
        """
        return self._wkt

    @wkt.setter
    def wkt(self, wkt):
        """Sets the wkt of this TerritoryValuesDTO.


        :param wkt: The wkt of this TerritoryValuesDTO.  # noqa: E501
        :type: str
        """

        self._wkt = wkt

    @property
    def aggregated_values(self):
        """Gets the aggregated_values of this TerritoryValuesDTO.  # noqa: E501


        :return: The aggregated_values of this TerritoryValuesDTO.  # noqa: E501
        :rtype: dict(str, float)
        """
        return self._aggregated_values

    @aggregated_values.setter
    def aggregated_values(self, aggregated_values):
        """Sets the aggregated_values of this TerritoryValuesDTO.


        :param aggregated_values: The aggregated_values of this TerritoryValuesDTO.  # noqa: E501
        :type: dict(str, float)
        """

        self._aggregated_values = aggregated_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TerritoryValuesDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TerritoryValuesDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
