# coding: utf-8

"""
    CartoVista REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FinalizeUploadParameters(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'columns_tokeep': 'list[FinalizeColumnUploadParameters]',
        'lat_long_columns': 'OneOfFinalizeUploadParametersLatLongColumns',
        'address_columns': 'OneOfFinalizeUploadParametersAddressColumns',
        'grid_layer_definition': 'OneOfFinalizeUploadParametersGridLayerDefinition',
        'is_layer': 'bool',
        'is_grid_layer': 'bool',
        'map_identifier_to_add_layer': 'str',
        'upload_join_paramaters': 'OneOfFinalizeUploadParametersUploadJoinParamaters',
        'selected_sheet_name': 'str',
        'folder_id': 'str',
        'set_public_access': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'columns_tokeep': 'columnsTokeep',
        'lat_long_columns': 'latLongColumns',
        'address_columns': 'addressColumns',
        'grid_layer_definition': 'gridLayerDefinition',
        'is_layer': 'isLayer',
        'is_grid_layer': 'isGridLayer',
        'map_identifier_to_add_layer': 'mapIdentifierToAddLayer',
        'upload_join_paramaters': 'uploadJoinParamaters',
        'selected_sheet_name': 'selectedSheetName',
        'folder_id': 'folderId',
        'set_public_access': 'setPublicAccess'
    }

    def __init__(self, name=None, columns_tokeep=None, lat_long_columns=None, address_columns=None, grid_layer_definition=None, is_layer=None, is_grid_layer=None, map_identifier_to_add_layer=None, upload_join_paramaters=None, selected_sheet_name=None, folder_id=None, set_public_access=None):  # noqa: E501
        """FinalizeUploadParameters - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._columns_tokeep = None
        self._lat_long_columns = None
        self._address_columns = None
        self._grid_layer_definition = None
        self._is_layer = None
        self._is_grid_layer = None
        self._map_identifier_to_add_layer = None
        self._upload_join_paramaters = None
        self._selected_sheet_name = None
        self._folder_id = None
        self._set_public_access = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if columns_tokeep is not None:
            self.columns_tokeep = columns_tokeep
        if lat_long_columns is not None:
            self.lat_long_columns = lat_long_columns
        if address_columns is not None:
            self.address_columns = address_columns
        if grid_layer_definition is not None:
            self.grid_layer_definition = grid_layer_definition
        if is_layer is not None:
            self.is_layer = is_layer
        if is_grid_layer is not None:
            self.is_grid_layer = is_grid_layer
        if map_identifier_to_add_layer is not None:
            self.map_identifier_to_add_layer = map_identifier_to_add_layer
        if upload_join_paramaters is not None:
            self.upload_join_paramaters = upload_join_paramaters
        if selected_sheet_name is not None:
            self.selected_sheet_name = selected_sheet_name
        if folder_id is not None:
            self.folder_id = folder_id
        if set_public_access is not None:
            self.set_public_access = set_public_access

    @property
    def name(self):
        """Gets the name of this FinalizeUploadParameters.  # noqa: E501


        :return: The name of this FinalizeUploadParameters.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FinalizeUploadParameters.


        :param name: The name of this FinalizeUploadParameters.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def columns_tokeep(self):
        """Gets the columns_tokeep of this FinalizeUploadParameters.  # noqa: E501


        :return: The columns_tokeep of this FinalizeUploadParameters.  # noqa: E501
        :rtype: list[FinalizeColumnUploadParameters]
        """
        return self._columns_tokeep

    @columns_tokeep.setter
    def columns_tokeep(self, columns_tokeep):
        """Sets the columns_tokeep of this FinalizeUploadParameters.


        :param columns_tokeep: The columns_tokeep of this FinalizeUploadParameters.  # noqa: E501
        :type: list[FinalizeColumnUploadParameters]
        """

        self._columns_tokeep = columns_tokeep

    @property
    def lat_long_columns(self):
        """Gets the lat_long_columns of this FinalizeUploadParameters.  # noqa: E501


        :return: The lat_long_columns of this FinalizeUploadParameters.  # noqa: E501
        :rtype: OneOfFinalizeUploadParametersLatLongColumns
        """
        return self._lat_long_columns

    @lat_long_columns.setter
    def lat_long_columns(self, lat_long_columns):
        """Sets the lat_long_columns of this FinalizeUploadParameters.


        :param lat_long_columns: The lat_long_columns of this FinalizeUploadParameters.  # noqa: E501
        :type: OneOfFinalizeUploadParametersLatLongColumns
        """

        self._lat_long_columns = lat_long_columns

    @property
    def address_columns(self):
        """Gets the address_columns of this FinalizeUploadParameters.  # noqa: E501


        :return: The address_columns of this FinalizeUploadParameters.  # noqa: E501
        :rtype: OneOfFinalizeUploadParametersAddressColumns
        """
        return self._address_columns

    @address_columns.setter
    def address_columns(self, address_columns):
        """Sets the address_columns of this FinalizeUploadParameters.


        :param address_columns: The address_columns of this FinalizeUploadParameters.  # noqa: E501
        :type: OneOfFinalizeUploadParametersAddressColumns
        """

        self._address_columns = address_columns

    @property
    def grid_layer_definition(self):
        """Gets the grid_layer_definition of this FinalizeUploadParameters.  # noqa: E501


        :return: The grid_layer_definition of this FinalizeUploadParameters.  # noqa: E501
        :rtype: OneOfFinalizeUploadParametersGridLayerDefinition
        """
        return self._grid_layer_definition

    @grid_layer_definition.setter
    def grid_layer_definition(self, grid_layer_definition):
        """Sets the grid_layer_definition of this FinalizeUploadParameters.


        :param grid_layer_definition: The grid_layer_definition of this FinalizeUploadParameters.  # noqa: E501
        :type: OneOfFinalizeUploadParametersGridLayerDefinition
        """

        self._grid_layer_definition = grid_layer_definition

    @property
    def is_layer(self):
        """Gets the is_layer of this FinalizeUploadParameters.  # noqa: E501


        :return: The is_layer of this FinalizeUploadParameters.  # noqa: E501
        :rtype: bool
        """
        return self._is_layer

    @is_layer.setter
    def is_layer(self, is_layer):
        """Sets the is_layer of this FinalizeUploadParameters.


        :param is_layer: The is_layer of this FinalizeUploadParameters.  # noqa: E501
        :type: bool
        """

        self._is_layer = is_layer

    @property
    def is_grid_layer(self):
        """Gets the is_grid_layer of this FinalizeUploadParameters.  # noqa: E501


        :return: The is_grid_layer of this FinalizeUploadParameters.  # noqa: E501
        :rtype: bool
        """
        return self._is_grid_layer

    @is_grid_layer.setter
    def is_grid_layer(self, is_grid_layer):
        """Sets the is_grid_layer of this FinalizeUploadParameters.


        :param is_grid_layer: The is_grid_layer of this FinalizeUploadParameters.  # noqa: E501
        :type: bool
        """

        self._is_grid_layer = is_grid_layer

    @property
    def map_identifier_to_add_layer(self):
        """Gets the map_identifier_to_add_layer of this FinalizeUploadParameters.  # noqa: E501


        :return: The map_identifier_to_add_layer of this FinalizeUploadParameters.  # noqa: E501
        :rtype: str
        """
        return self._map_identifier_to_add_layer

    @map_identifier_to_add_layer.setter
    def map_identifier_to_add_layer(self, map_identifier_to_add_layer):
        """Sets the map_identifier_to_add_layer of this FinalizeUploadParameters.


        :param map_identifier_to_add_layer: The map_identifier_to_add_layer of this FinalizeUploadParameters.  # noqa: E501
        :type: str
        """

        self._map_identifier_to_add_layer = map_identifier_to_add_layer

    @property
    def upload_join_paramaters(self):
        """Gets the upload_join_paramaters of this FinalizeUploadParameters.  # noqa: E501


        :return: The upload_join_paramaters of this FinalizeUploadParameters.  # noqa: E501
        :rtype: OneOfFinalizeUploadParametersUploadJoinParamaters
        """
        return self._upload_join_paramaters

    @upload_join_paramaters.setter
    def upload_join_paramaters(self, upload_join_paramaters):
        """Sets the upload_join_paramaters of this FinalizeUploadParameters.


        :param upload_join_paramaters: The upload_join_paramaters of this FinalizeUploadParameters.  # noqa: E501
        :type: OneOfFinalizeUploadParametersUploadJoinParamaters
        """

        self._upload_join_paramaters = upload_join_paramaters

    @property
    def selected_sheet_name(self):
        """Gets the selected_sheet_name of this FinalizeUploadParameters.  # noqa: E501


        :return: The selected_sheet_name of this FinalizeUploadParameters.  # noqa: E501
        :rtype: str
        """
        return self._selected_sheet_name

    @selected_sheet_name.setter
    def selected_sheet_name(self, selected_sheet_name):
        """Sets the selected_sheet_name of this FinalizeUploadParameters.


        :param selected_sheet_name: The selected_sheet_name of this FinalizeUploadParameters.  # noqa: E501
        :type: str
        """

        self._selected_sheet_name = selected_sheet_name

    @property
    def folder_id(self):
        """Gets the folder_id of this FinalizeUploadParameters.  # noqa: E501


        :return: The folder_id of this FinalizeUploadParameters.  # noqa: E501
        :rtype: str
        """
        return self._folder_id

    @folder_id.setter
    def folder_id(self, folder_id):
        """Sets the folder_id of this FinalizeUploadParameters.


        :param folder_id: The folder_id of this FinalizeUploadParameters.  # noqa: E501
        :type: str
        """

        self._folder_id = folder_id

    @property
    def set_public_access(self):
        """Gets the set_public_access of this FinalizeUploadParameters.  # noqa: E501


        :return: The set_public_access of this FinalizeUploadParameters.  # noqa: E501
        :rtype: bool
        """
        return self._set_public_access

    @set_public_access.setter
    def set_public_access(self, set_public_access):
        """Sets the set_public_access of this FinalizeUploadParameters.


        :param set_public_access: The set_public_access of this FinalizeUploadParameters.  # noqa: E501
        :type: bool
        """

        self._set_public_access = set_public_access

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FinalizeUploadParameters, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FinalizeUploadParameters):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
