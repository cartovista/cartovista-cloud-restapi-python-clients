# coding: utf-8

"""
    CartoVista REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Group(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'system_identifier': 'str',
        'unique_identifier': 'str',
        'name': 'str',
        'description': 'str',
        'path': 'str',
        'folder_id': 'str',
        'creation_time': 'datetime',
        'last_modification_time': 'datetime',
        'provider': 'SecurityProvider',
        'provider_status': 'ProviderStatus',
        'provider_name': 'str',
        'users': 'list[User]',
        'permissions': 'list[PermissionDTO]'
    }

    attribute_map = {
        'system_identifier': 'systemIdentifier',
        'unique_identifier': 'uniqueIdentifier',
        'name': 'name',
        'description': 'description',
        'path': 'path',
        'folder_id': 'folderId',
        'creation_time': 'creationTime',
        'last_modification_time': 'lastModificationTime',
        'provider': 'provider',
        'provider_status': 'providerStatus',
        'provider_name': 'providerName',
        'users': 'users',
        'permissions': 'permissions'
    }

    def __init__(self, system_identifier=None, unique_identifier=None, name=None, description=None, path=None, folder_id=None, creation_time=None, last_modification_time=None, provider=None, provider_status=None, provider_name=None, users=None, permissions=None):  # noqa: E501
        """Group - a model defined in Swagger"""  # noqa: E501
        self._system_identifier = None
        self._unique_identifier = None
        self._name = None
        self._description = None
        self._path = None
        self._folder_id = None
        self._creation_time = None
        self._last_modification_time = None
        self._provider = None
        self._provider_status = None
        self._provider_name = None
        self._users = None
        self._permissions = None
        self.discriminator = None
        if system_identifier is not None:
            self.system_identifier = system_identifier
        if unique_identifier is not None:
            self.unique_identifier = unique_identifier
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if path is not None:
            self.path = path
        if folder_id is not None:
            self.folder_id = folder_id
        if creation_time is not None:
            self.creation_time = creation_time
        if last_modification_time is not None:
            self.last_modification_time = last_modification_time
        if provider is not None:
            self.provider = provider
        if provider_status is not None:
            self.provider_status = provider_status
        if provider_name is not None:
            self.provider_name = provider_name
        if users is not None:
            self.users = users
        if permissions is not None:
            self.permissions = permissions

    @property
    def system_identifier(self):
        """Gets the system_identifier of this Group.  # noqa: E501


        :return: The system_identifier of this Group.  # noqa: E501
        :rtype: str
        """
        return self._system_identifier

    @system_identifier.setter
    def system_identifier(self, system_identifier):
        """Sets the system_identifier of this Group.


        :param system_identifier: The system_identifier of this Group.  # noqa: E501
        :type: str
        """

        self._system_identifier = system_identifier

    @property
    def unique_identifier(self):
        """Gets the unique_identifier of this Group.  # noqa: E501


        :return: The unique_identifier of this Group.  # noqa: E501
        :rtype: str
        """
        return self._unique_identifier

    @unique_identifier.setter
    def unique_identifier(self, unique_identifier):
        """Sets the unique_identifier of this Group.


        :param unique_identifier: The unique_identifier of this Group.  # noqa: E501
        :type: str
        """

        self._unique_identifier = unique_identifier

    @property
    def name(self):
        """Gets the name of this Group.  # noqa: E501


        :return: The name of this Group.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Group.


        :param name: The name of this Group.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this Group.  # noqa: E501


        :return: The description of this Group.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Group.


        :param description: The description of this Group.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def path(self):
        """Gets the path of this Group.  # noqa: E501


        :return: The path of this Group.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this Group.


        :param path: The path of this Group.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def folder_id(self):
        """Gets the folder_id of this Group.  # noqa: E501


        :return: The folder_id of this Group.  # noqa: E501
        :rtype: str
        """
        return self._folder_id

    @folder_id.setter
    def folder_id(self, folder_id):
        """Sets the folder_id of this Group.


        :param folder_id: The folder_id of this Group.  # noqa: E501
        :type: str
        """

        self._folder_id = folder_id

    @property
    def creation_time(self):
        """Gets the creation_time of this Group.  # noqa: E501


        :return: The creation_time of this Group.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this Group.


        :param creation_time: The creation_time of this Group.  # noqa: E501
        :type: datetime
        """

        self._creation_time = creation_time

    @property
    def last_modification_time(self):
        """Gets the last_modification_time of this Group.  # noqa: E501


        :return: The last_modification_time of this Group.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modification_time

    @last_modification_time.setter
    def last_modification_time(self, last_modification_time):
        """Sets the last_modification_time of this Group.


        :param last_modification_time: The last_modification_time of this Group.  # noqa: E501
        :type: datetime
        """

        self._last_modification_time = last_modification_time

    @property
    def provider(self):
        """Gets the provider of this Group.  # noqa: E501


        :return: The provider of this Group.  # noqa: E501
        :rtype: SecurityProvider
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this Group.


        :param provider: The provider of this Group.  # noqa: E501
        :type: SecurityProvider
        """

        self._provider = provider

    @property
    def provider_status(self):
        """Gets the provider_status of this Group.  # noqa: E501


        :return: The provider_status of this Group.  # noqa: E501
        :rtype: ProviderStatus
        """
        return self._provider_status

    @provider_status.setter
    def provider_status(self, provider_status):
        """Sets the provider_status of this Group.


        :param provider_status: The provider_status of this Group.  # noqa: E501
        :type: ProviderStatus
        """

        self._provider_status = provider_status

    @property
    def provider_name(self):
        """Gets the provider_name of this Group.  # noqa: E501


        :return: The provider_name of this Group.  # noqa: E501
        :rtype: str
        """
        return self._provider_name

    @provider_name.setter
    def provider_name(self, provider_name):
        """Sets the provider_name of this Group.


        :param provider_name: The provider_name of this Group.  # noqa: E501
        :type: str
        """

        self._provider_name = provider_name

    @property
    def users(self):
        """Gets the users of this Group.  # noqa: E501


        :return: The users of this Group.  # noqa: E501
        :rtype: list[User]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this Group.


        :param users: The users of this Group.  # noqa: E501
        :type: list[User]
        """

        self._users = users

    @property
    def permissions(self):
        """Gets the permissions of this Group.  # noqa: E501


        :return: The permissions of this Group.  # noqa: E501
        :rtype: list[PermissionDTO]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this Group.


        :param permissions: The permissions of this Group.  # noqa: E501
        :type: list[PermissionDTO]
        """

        self._permissions = permissions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Group, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Group):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
