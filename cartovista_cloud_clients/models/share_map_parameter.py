# coding: utf-8

"""
    CartoVista REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ShareMapParameter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'identities': 'list[str]',
        'send_email': 'bool',
        'all_users': 'bool',
        'all_map_creators': 'bool'
    }

    attribute_map = {
        'identities': 'identities',
        'send_email': 'sendEmail',
        'all_users': 'allUsers',
        'all_map_creators': 'allMapCreators'
    }

    def __init__(self, identities=None, send_email=None, all_users=None, all_map_creators=None):  # noqa: E501
        """ShareMapParameter - a model defined in Swagger"""  # noqa: E501
        self._identities = None
        self._send_email = None
        self._all_users = None
        self._all_map_creators = None
        self.discriminator = None
        if identities is not None:
            self.identities = identities
        if send_email is not None:
            self.send_email = send_email
        if all_users is not None:
            self.all_users = all_users
        if all_map_creators is not None:
            self.all_map_creators = all_map_creators

    @property
    def identities(self):
        """Gets the identities of this ShareMapParameter.  # noqa: E501


        :return: The identities of this ShareMapParameter.  # noqa: E501
        :rtype: list[str]
        """
        return self._identities

    @identities.setter
    def identities(self, identities):
        """Sets the identities of this ShareMapParameter.


        :param identities: The identities of this ShareMapParameter.  # noqa: E501
        :type: list[str]
        """

        self._identities = identities

    @property
    def send_email(self):
        """Gets the send_email of this ShareMapParameter.  # noqa: E501


        :return: The send_email of this ShareMapParameter.  # noqa: E501
        :rtype: bool
        """
        return self._send_email

    @send_email.setter
    def send_email(self, send_email):
        """Sets the send_email of this ShareMapParameter.


        :param send_email: The send_email of this ShareMapParameter.  # noqa: E501
        :type: bool
        """

        self._send_email = send_email

    @property
    def all_users(self):
        """Gets the all_users of this ShareMapParameter.  # noqa: E501


        :return: The all_users of this ShareMapParameter.  # noqa: E501
        :rtype: bool
        """
        return self._all_users

    @all_users.setter
    def all_users(self, all_users):
        """Sets the all_users of this ShareMapParameter.


        :param all_users: The all_users of this ShareMapParameter.  # noqa: E501
        :type: bool
        """

        self._all_users = all_users

    @property
    def all_map_creators(self):
        """Gets the all_map_creators of this ShareMapParameter.  # noqa: E501


        :return: The all_map_creators of this ShareMapParameter.  # noqa: E501
        :rtype: bool
        """
        return self._all_map_creators

    @all_map_creators.setter
    def all_map_creators(self, all_map_creators):
        """Sets the all_map_creators of this ShareMapParameter.


        :param all_map_creators: The all_map_creators of this ShareMapParameter.  # noqa: E501
        :type: bool
        """

        self._all_map_creators = all_map_creators

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ShareMapParameter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ShareMapParameter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
