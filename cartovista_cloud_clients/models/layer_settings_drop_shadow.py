# coding: utf-8

"""
    CartoVista REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LayerSettingsDropShadow(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'alpha': 'float',
        'color': 'str',
        'size': 'int',
        'strength': 'float',
        'distance': 'int',
        'angle': 'int'
    }

    attribute_map = {
        'alpha': 'alpha',
        'color': 'color',
        'size': 'size',
        'strength': 'strength',
        'distance': 'distance',
        'angle': 'angle'
    }

    def __init__(self, alpha=None, color=None, size=None, strength=None, distance=None, angle=None):  # noqa: E501
        """LayerSettingsDropShadow - a model defined in Swagger"""  # noqa: E501
        self._alpha = None
        self._color = None
        self._size = None
        self._strength = None
        self._distance = None
        self._angle = None
        self.discriminator = None
        if alpha is not None:
            self.alpha = alpha
        if color is not None:
            self.color = color
        if size is not None:
            self.size = size
        if strength is not None:
            self.strength = strength
        if distance is not None:
            self.distance = distance
        if angle is not None:
            self.angle = angle

    @property
    def alpha(self):
        """Gets the alpha of this LayerSettingsDropShadow.  # noqa: E501


        :return: The alpha of this LayerSettingsDropShadow.  # noqa: E501
        :rtype: float
        """
        return self._alpha

    @alpha.setter
    def alpha(self, alpha):
        """Sets the alpha of this LayerSettingsDropShadow.


        :param alpha: The alpha of this LayerSettingsDropShadow.  # noqa: E501
        :type: float
        """

        self._alpha = alpha

    @property
    def color(self):
        """Gets the color of this LayerSettingsDropShadow.  # noqa: E501


        :return: The color of this LayerSettingsDropShadow.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this LayerSettingsDropShadow.


        :param color: The color of this LayerSettingsDropShadow.  # noqa: E501
        :type: str
        """

        self._color = color

    @property
    def size(self):
        """Gets the size of this LayerSettingsDropShadow.  # noqa: E501


        :return: The size of this LayerSettingsDropShadow.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this LayerSettingsDropShadow.


        :param size: The size of this LayerSettingsDropShadow.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def strength(self):
        """Gets the strength of this LayerSettingsDropShadow.  # noqa: E501


        :return: The strength of this LayerSettingsDropShadow.  # noqa: E501
        :rtype: float
        """
        return self._strength

    @strength.setter
    def strength(self, strength):
        """Sets the strength of this LayerSettingsDropShadow.


        :param strength: The strength of this LayerSettingsDropShadow.  # noqa: E501
        :type: float
        """

        self._strength = strength

    @property
    def distance(self):
        """Gets the distance of this LayerSettingsDropShadow.  # noqa: E501


        :return: The distance of this LayerSettingsDropShadow.  # noqa: E501
        :rtype: int
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this LayerSettingsDropShadow.


        :param distance: The distance of this LayerSettingsDropShadow.  # noqa: E501
        :type: int
        """

        self._distance = distance

    @property
    def angle(self):
        """Gets the angle of this LayerSettingsDropShadow.  # noqa: E501


        :return: The angle of this LayerSettingsDropShadow.  # noqa: E501
        :rtype: int
        """
        return self._angle

    @angle.setter
    def angle(self, angle):
        """Sets the angle of this LayerSettingsDropShadow.


        :param angle: The angle of this LayerSettingsDropShadow.  # noqa: E501
        :type: int
        """

        self._angle = angle

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LayerSettingsDropShadow, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LayerSettingsDropShadow):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
