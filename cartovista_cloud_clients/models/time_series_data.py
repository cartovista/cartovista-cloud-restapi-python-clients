# coding: utf-8

"""
    CartoVista REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TimeSeriesData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data': 'list[TimeSeriesDataValue]',
        'range': 'TimeSeriesRange',
        'limit': 'int',
        'feature_id': 'str'
    }

    attribute_map = {
        'data': 'data',
        'range': 'range',
        'limit': 'limit',
        'feature_id': 'featureId'
    }

    def __init__(self, data=None, range=None, limit=None, feature_id=None):  # noqa: E501
        """TimeSeriesData - a model defined in Swagger"""  # noqa: E501
        self._data = None
        self._range = None
        self._limit = None
        self._feature_id = None
        self.discriminator = None
        if data is not None:
            self.data = data
        if range is not None:
            self.range = range
        if limit is not None:
            self.limit = limit
        if feature_id is not None:
            self.feature_id = feature_id

    @property
    def data(self):
        """Gets the data of this TimeSeriesData.  # noqa: E501


        :return: The data of this TimeSeriesData.  # noqa: E501
        :rtype: list[TimeSeriesDataValue]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this TimeSeriesData.


        :param data: The data of this TimeSeriesData.  # noqa: E501
        :type: list[TimeSeriesDataValue]
        """

        self._data = data

    @property
    def range(self):
        """Gets the range of this TimeSeriesData.  # noqa: E501


        :return: The range of this TimeSeriesData.  # noqa: E501
        :rtype: TimeSeriesRange
        """
        return self._range

    @range.setter
    def range(self, range):
        """Sets the range of this TimeSeriesData.


        :param range: The range of this TimeSeriesData.  # noqa: E501
        :type: TimeSeriesRange
        """

        self._range = range

    @property
    def limit(self):
        """Gets the limit of this TimeSeriesData.  # noqa: E501


        :return: The limit of this TimeSeriesData.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this TimeSeriesData.


        :param limit: The limit of this TimeSeriesData.  # noqa: E501
        :type: int
        """

        self._limit = limit

    @property
    def feature_id(self):
        """Gets the feature_id of this TimeSeriesData.  # noqa: E501


        :return: The feature_id of this TimeSeriesData.  # noqa: E501
        :rtype: str
        """
        return self._feature_id

    @feature_id.setter
    def feature_id(self, feature_id):
        """Sets the feature_id of this TimeSeriesData.


        :param feature_id: The feature_id of this TimeSeriesData.  # noqa: E501
        :type: str
        """

        self._feature_id = feature_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TimeSeriesData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TimeSeriesData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
