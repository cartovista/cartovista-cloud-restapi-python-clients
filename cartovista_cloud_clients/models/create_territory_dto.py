# coding: utf-8

"""
    CartoVista REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateTerritoryDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'TerritoryStatusEnum',
        'exclusive_zone_id': 'int',
        'is_implantation_block_exclusive': 'bool',
        'pta_zone_id': 'int',
        'name': 'str',
        'longitude': 'float',
        'latitude': 'float',
        'area_by': 'TerritoryAreaByEnum',
        'zones': 'list[CreateTerritoryZoneDTO]',
        'transport_mode': 'TerritoryTransportTypeEnum',
        'departure_time': 'str'
    }

    attribute_map = {
        'status': 'status',
        'exclusive_zone_id': 'exclusiveZoneId',
        'is_implantation_block_exclusive': 'isImplantationBlockExclusive',
        'pta_zone_id': 'ptaZoneId',
        'name': 'name',
        'longitude': 'longitude',
        'latitude': 'latitude',
        'area_by': 'areaBy',
        'zones': 'zones',
        'transport_mode': 'transportMode',
        'departure_time': 'departureTime'
    }

    def __init__(self, status=None, exclusive_zone_id=None, is_implantation_block_exclusive=None, pta_zone_id=None, name=None, longitude=None, latitude=None, area_by=None, zones=None, transport_mode=None, departure_time=None):  # noqa: E501
        """CreateTerritoryDTO - a model defined in Swagger"""  # noqa: E501
        self._status = None
        self._exclusive_zone_id = None
        self._is_implantation_block_exclusive = None
        self._pta_zone_id = None
        self._name = None
        self._longitude = None
        self._latitude = None
        self._area_by = None
        self._zones = None
        self._transport_mode = None
        self._departure_time = None
        self.discriminator = None
        if status is not None:
            self.status = status
        if exclusive_zone_id is not None:
            self.exclusive_zone_id = exclusive_zone_id
        if is_implantation_block_exclusive is not None:
            self.is_implantation_block_exclusive = is_implantation_block_exclusive
        if pta_zone_id is not None:
            self.pta_zone_id = pta_zone_id
        if name is not None:
            self.name = name
        if longitude is not None:
            self.longitude = longitude
        if latitude is not None:
            self.latitude = latitude
        if area_by is not None:
            self.area_by = area_by
        if zones is not None:
            self.zones = zones
        if transport_mode is not None:
            self.transport_mode = transport_mode
        if departure_time is not None:
            self.departure_time = departure_time

    @property
    def status(self):
        """Gets the status of this CreateTerritoryDTO.  # noqa: E501


        :return: The status of this CreateTerritoryDTO.  # noqa: E501
        :rtype: TerritoryStatusEnum
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CreateTerritoryDTO.


        :param status: The status of this CreateTerritoryDTO.  # noqa: E501
        :type: TerritoryStatusEnum
        """

        self._status = status

    @property
    def exclusive_zone_id(self):
        """Gets the exclusive_zone_id of this CreateTerritoryDTO.  # noqa: E501


        :return: The exclusive_zone_id of this CreateTerritoryDTO.  # noqa: E501
        :rtype: int
        """
        return self._exclusive_zone_id

    @exclusive_zone_id.setter
    def exclusive_zone_id(self, exclusive_zone_id):
        """Sets the exclusive_zone_id of this CreateTerritoryDTO.


        :param exclusive_zone_id: The exclusive_zone_id of this CreateTerritoryDTO.  # noqa: E501
        :type: int
        """

        self._exclusive_zone_id = exclusive_zone_id

    @property
    def is_implantation_block_exclusive(self):
        """Gets the is_implantation_block_exclusive of this CreateTerritoryDTO.  # noqa: E501


        :return: The is_implantation_block_exclusive of this CreateTerritoryDTO.  # noqa: E501
        :rtype: bool
        """
        return self._is_implantation_block_exclusive

    @is_implantation_block_exclusive.setter
    def is_implantation_block_exclusive(self, is_implantation_block_exclusive):
        """Sets the is_implantation_block_exclusive of this CreateTerritoryDTO.


        :param is_implantation_block_exclusive: The is_implantation_block_exclusive of this CreateTerritoryDTO.  # noqa: E501
        :type: bool
        """

        self._is_implantation_block_exclusive = is_implantation_block_exclusive

    @property
    def pta_zone_id(self):
        """Gets the pta_zone_id of this CreateTerritoryDTO.  # noqa: E501


        :return: The pta_zone_id of this CreateTerritoryDTO.  # noqa: E501
        :rtype: int
        """
        return self._pta_zone_id

    @pta_zone_id.setter
    def pta_zone_id(self, pta_zone_id):
        """Sets the pta_zone_id of this CreateTerritoryDTO.


        :param pta_zone_id: The pta_zone_id of this CreateTerritoryDTO.  # noqa: E501
        :type: int
        """

        self._pta_zone_id = pta_zone_id

    @property
    def name(self):
        """Gets the name of this CreateTerritoryDTO.  # noqa: E501


        :return: The name of this CreateTerritoryDTO.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateTerritoryDTO.


        :param name: The name of this CreateTerritoryDTO.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def longitude(self):
        """Gets the longitude of this CreateTerritoryDTO.  # noqa: E501


        :return: The longitude of this CreateTerritoryDTO.  # noqa: E501
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this CreateTerritoryDTO.


        :param longitude: The longitude of this CreateTerritoryDTO.  # noqa: E501
        :type: float
        """

        self._longitude = longitude

    @property
    def latitude(self):
        """Gets the latitude of this CreateTerritoryDTO.  # noqa: E501


        :return: The latitude of this CreateTerritoryDTO.  # noqa: E501
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this CreateTerritoryDTO.


        :param latitude: The latitude of this CreateTerritoryDTO.  # noqa: E501
        :type: float
        """

        self._latitude = latitude

    @property
    def area_by(self):
        """Gets the area_by of this CreateTerritoryDTO.  # noqa: E501


        :return: The area_by of this CreateTerritoryDTO.  # noqa: E501
        :rtype: TerritoryAreaByEnum
        """
        return self._area_by

    @area_by.setter
    def area_by(self, area_by):
        """Sets the area_by of this CreateTerritoryDTO.


        :param area_by: The area_by of this CreateTerritoryDTO.  # noqa: E501
        :type: TerritoryAreaByEnum
        """

        self._area_by = area_by

    @property
    def zones(self):
        """Gets the zones of this CreateTerritoryDTO.  # noqa: E501


        :return: The zones of this CreateTerritoryDTO.  # noqa: E501
        :rtype: list[CreateTerritoryZoneDTO]
        """
        return self._zones

    @zones.setter
    def zones(self, zones):
        """Sets the zones of this CreateTerritoryDTO.


        :param zones: The zones of this CreateTerritoryDTO.  # noqa: E501
        :type: list[CreateTerritoryZoneDTO]
        """

        self._zones = zones

    @property
    def transport_mode(self):
        """Gets the transport_mode of this CreateTerritoryDTO.  # noqa: E501


        :return: The transport_mode of this CreateTerritoryDTO.  # noqa: E501
        :rtype: TerritoryTransportTypeEnum
        """
        return self._transport_mode

    @transport_mode.setter
    def transport_mode(self, transport_mode):
        """Sets the transport_mode of this CreateTerritoryDTO.


        :param transport_mode: The transport_mode of this CreateTerritoryDTO.  # noqa: E501
        :type: TerritoryTransportTypeEnum
        """

        self._transport_mode = transport_mode

    @property
    def departure_time(self):
        """Gets the departure_time of this CreateTerritoryDTO.  # noqa: E501


        :return: The departure_time of this CreateTerritoryDTO.  # noqa: E501
        :rtype: str
        """
        return self._departure_time

    @departure_time.setter
    def departure_time(self, departure_time):
        """Sets the departure_time of this CreateTerritoryDTO.


        :param departure_time: The departure_time of this CreateTerritoryDTO.  # noqa: E501
        :type: str
        """

        self._departure_time = departure_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateTerritoryDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateTerritoryDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
