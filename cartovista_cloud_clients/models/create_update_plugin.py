# coding: utf-8

"""
    CartoVista REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateUpdatePlugin(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'unique_identifier': 'str',
        'name': 'str',
        'url': 'str',
        'logo_icon': 'str',
        'permissions': 'list[ReadPermission]'
    }

    attribute_map = {
        'unique_identifier': 'uniqueIdentifier',
        'name': 'name',
        'url': 'url',
        'logo_icon': 'logoIcon',
        'permissions': 'permissions'
    }

    def __init__(self, unique_identifier=None, name=None, url=None, logo_icon=None, permissions=None):  # noqa: E501
        """CreateUpdatePlugin - a model defined in Swagger"""  # noqa: E501
        self._unique_identifier = None
        self._name = None
        self._url = None
        self._logo_icon = None
        self._permissions = None
        self.discriminator = None
        if unique_identifier is not None:
            self.unique_identifier = unique_identifier
        if name is not None:
            self.name = name
        if url is not None:
            self.url = url
        if logo_icon is not None:
            self.logo_icon = logo_icon
        if permissions is not None:
            self.permissions = permissions

    @property
    def unique_identifier(self):
        """Gets the unique_identifier of this CreateUpdatePlugin.  # noqa: E501


        :return: The unique_identifier of this CreateUpdatePlugin.  # noqa: E501
        :rtype: str
        """
        return self._unique_identifier

    @unique_identifier.setter
    def unique_identifier(self, unique_identifier):
        """Sets the unique_identifier of this CreateUpdatePlugin.


        :param unique_identifier: The unique_identifier of this CreateUpdatePlugin.  # noqa: E501
        :type: str
        """

        self._unique_identifier = unique_identifier

    @property
    def name(self):
        """Gets the name of this CreateUpdatePlugin.  # noqa: E501


        :return: The name of this CreateUpdatePlugin.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateUpdatePlugin.


        :param name: The name of this CreateUpdatePlugin.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def url(self):
        """Gets the url of this CreateUpdatePlugin.  # noqa: E501


        :return: The url of this CreateUpdatePlugin.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this CreateUpdatePlugin.


        :param url: The url of this CreateUpdatePlugin.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def logo_icon(self):
        """Gets the logo_icon of this CreateUpdatePlugin.  # noqa: E501


        :return: The logo_icon of this CreateUpdatePlugin.  # noqa: E501
        :rtype: str
        """
        return self._logo_icon

    @logo_icon.setter
    def logo_icon(self, logo_icon):
        """Sets the logo_icon of this CreateUpdatePlugin.


        :param logo_icon: The logo_icon of this CreateUpdatePlugin.  # noqa: E501
        :type: str
        """

        self._logo_icon = logo_icon

    @property
    def permissions(self):
        """Gets the permissions of this CreateUpdatePlugin.  # noqa: E501


        :return: The permissions of this CreateUpdatePlugin.  # noqa: E501
        :rtype: list[ReadPermission]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this CreateUpdatePlugin.


        :param permissions: The permissions of this CreateUpdatePlugin.  # noqa: E501
        :type: list[ReadPermission]
        """

        self._permissions = permissions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateUpdatePlugin, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateUpdatePlugin):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
