# coding: utf-8

"""
    CartoVista REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Slide(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'theme_set': 'str',
        'thematic_schemes': 'str',
        'extent': 'str',
        'is_default_slide': 'bool',
        'vector_layers': 'list[VectorLayer]',
        'displayed_data_columns_by_layer': 'dict(str, SlideColumns)',
        'layout': 'OneOfSlideLayout',
        'story': 'str',
        'order': 'int',
        'id': 'str',
        'map_id': 'str',
        'thumbnail_url': 'str',
        'last_update': 'datetime',
        'analyses': 'list[SlideAnalysis]'
    }

    attribute_map = {
        'name': 'name',
        'theme_set': 'themeSet',
        'thematic_schemes': 'thematicSchemes',
        'extent': 'extent',
        'is_default_slide': 'isDefaultSlide',
        'vector_layers': 'vectorLayers',
        'displayed_data_columns_by_layer': 'displayedDataColumnsByLayer',
        'layout': 'layout',
        'story': 'story',
        'order': 'order',
        'id': 'id',
        'map_id': 'mapId',
        'thumbnail_url': 'thumbnailUrl',
        'last_update': 'lastUpdate',
        'analyses': 'analyses'
    }

    def __init__(self, name=None, theme_set=None, thematic_schemes=None, extent=None, is_default_slide=None, vector_layers=None, displayed_data_columns_by_layer=None, layout=None, story=None, order=None, id=None, map_id=None, thumbnail_url=None, last_update=None, analyses=None):  # noqa: E501
        """Slide - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._theme_set = None
        self._thematic_schemes = None
        self._extent = None
        self._is_default_slide = None
        self._vector_layers = None
        self._displayed_data_columns_by_layer = None
        self._layout = None
        self._story = None
        self._order = None
        self._id = None
        self._map_id = None
        self._thumbnail_url = None
        self._last_update = None
        self._analyses = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if theme_set is not None:
            self.theme_set = theme_set
        if thematic_schemes is not None:
            self.thematic_schemes = thematic_schemes
        if extent is not None:
            self.extent = extent
        if is_default_slide is not None:
            self.is_default_slide = is_default_slide
        if vector_layers is not None:
            self.vector_layers = vector_layers
        if displayed_data_columns_by_layer is not None:
            self.displayed_data_columns_by_layer = displayed_data_columns_by_layer
        if layout is not None:
            self.layout = layout
        if story is not None:
            self.story = story
        if order is not None:
            self.order = order
        if id is not None:
            self.id = id
        if map_id is not None:
            self.map_id = map_id
        if thumbnail_url is not None:
            self.thumbnail_url = thumbnail_url
        if last_update is not None:
            self.last_update = last_update
        if analyses is not None:
            self.analyses = analyses

    @property
    def name(self):
        """Gets the name of this Slide.  # noqa: E501


        :return: The name of this Slide.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Slide.


        :param name: The name of this Slide.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def theme_set(self):
        """Gets the theme_set of this Slide.  # noqa: E501


        :return: The theme_set of this Slide.  # noqa: E501
        :rtype: str
        """
        return self._theme_set

    @theme_set.setter
    def theme_set(self, theme_set):
        """Sets the theme_set of this Slide.


        :param theme_set: The theme_set of this Slide.  # noqa: E501
        :type: str
        """

        self._theme_set = theme_set

    @property
    def thematic_schemes(self):
        """Gets the thematic_schemes of this Slide.  # noqa: E501


        :return: The thematic_schemes of this Slide.  # noqa: E501
        :rtype: str
        """
        return self._thematic_schemes

    @thematic_schemes.setter
    def thematic_schemes(self, thematic_schemes):
        """Sets the thematic_schemes of this Slide.


        :param thematic_schemes: The thematic_schemes of this Slide.  # noqa: E501
        :type: str
        """

        self._thematic_schemes = thematic_schemes

    @property
    def extent(self):
        """Gets the extent of this Slide.  # noqa: E501


        :return: The extent of this Slide.  # noqa: E501
        :rtype: str
        """
        return self._extent

    @extent.setter
    def extent(self, extent):
        """Sets the extent of this Slide.


        :param extent: The extent of this Slide.  # noqa: E501
        :type: str
        """

        self._extent = extent

    @property
    def is_default_slide(self):
        """Gets the is_default_slide of this Slide.  # noqa: E501


        :return: The is_default_slide of this Slide.  # noqa: E501
        :rtype: bool
        """
        return self._is_default_slide

    @is_default_slide.setter
    def is_default_slide(self, is_default_slide):
        """Sets the is_default_slide of this Slide.


        :param is_default_slide: The is_default_slide of this Slide.  # noqa: E501
        :type: bool
        """

        self._is_default_slide = is_default_slide

    @property
    def vector_layers(self):
        """Gets the vector_layers of this Slide.  # noqa: E501


        :return: The vector_layers of this Slide.  # noqa: E501
        :rtype: list[VectorLayer]
        """
        return self._vector_layers

    @vector_layers.setter
    def vector_layers(self, vector_layers):
        """Sets the vector_layers of this Slide.


        :param vector_layers: The vector_layers of this Slide.  # noqa: E501
        :type: list[VectorLayer]
        """

        self._vector_layers = vector_layers

    @property
    def displayed_data_columns_by_layer(self):
        """Gets the displayed_data_columns_by_layer of this Slide.  # noqa: E501


        :return: The displayed_data_columns_by_layer of this Slide.  # noqa: E501
        :rtype: dict(str, SlideColumns)
        """
        return self._displayed_data_columns_by_layer

    @displayed_data_columns_by_layer.setter
    def displayed_data_columns_by_layer(self, displayed_data_columns_by_layer):
        """Sets the displayed_data_columns_by_layer of this Slide.


        :param displayed_data_columns_by_layer: The displayed_data_columns_by_layer of this Slide.  # noqa: E501
        :type: dict(str, SlideColumns)
        """

        self._displayed_data_columns_by_layer = displayed_data_columns_by_layer

    @property
    def layout(self):
        """Gets the layout of this Slide.  # noqa: E501


        :return: The layout of this Slide.  # noqa: E501
        :rtype: OneOfSlideLayout
        """
        return self._layout

    @layout.setter
    def layout(self, layout):
        """Sets the layout of this Slide.


        :param layout: The layout of this Slide.  # noqa: E501
        :type: OneOfSlideLayout
        """

        self._layout = layout

    @property
    def story(self):
        """Gets the story of this Slide.  # noqa: E501


        :return: The story of this Slide.  # noqa: E501
        :rtype: str
        """
        return self._story

    @story.setter
    def story(self, story):
        """Sets the story of this Slide.


        :param story: The story of this Slide.  # noqa: E501
        :type: str
        """

        self._story = story

    @property
    def order(self):
        """Gets the order of this Slide.  # noqa: E501


        :return: The order of this Slide.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this Slide.


        :param order: The order of this Slide.  # noqa: E501
        :type: int
        """

        self._order = order

    @property
    def id(self):
        """Gets the id of this Slide.  # noqa: E501


        :return: The id of this Slide.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Slide.


        :param id: The id of this Slide.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def map_id(self):
        """Gets the map_id of this Slide.  # noqa: E501


        :return: The map_id of this Slide.  # noqa: E501
        :rtype: str
        """
        return self._map_id

    @map_id.setter
    def map_id(self, map_id):
        """Sets the map_id of this Slide.


        :param map_id: The map_id of this Slide.  # noqa: E501
        :type: str
        """

        self._map_id = map_id

    @property
    def thumbnail_url(self):
        """Gets the thumbnail_url of this Slide.  # noqa: E501


        :return: The thumbnail_url of this Slide.  # noqa: E501
        :rtype: str
        """
        return self._thumbnail_url

    @thumbnail_url.setter
    def thumbnail_url(self, thumbnail_url):
        """Sets the thumbnail_url of this Slide.


        :param thumbnail_url: The thumbnail_url of this Slide.  # noqa: E501
        :type: str
        """

        self._thumbnail_url = thumbnail_url

    @property
    def last_update(self):
        """Gets the last_update of this Slide.  # noqa: E501


        :return: The last_update of this Slide.  # noqa: E501
        :rtype: datetime
        """
        return self._last_update

    @last_update.setter
    def last_update(self, last_update):
        """Sets the last_update of this Slide.


        :param last_update: The last_update of this Slide.  # noqa: E501
        :type: datetime
        """

        self._last_update = last_update

    @property
    def analyses(self):
        """Gets the analyses of this Slide.  # noqa: E501


        :return: The analyses of this Slide.  # noqa: E501
        :rtype: list[SlideAnalysis]
        """
        return self._analyses

    @analyses.setter
    def analyses(self, analyses):
        """Sets the analyses of this Slide.


        :param analyses: The analyses of this Slide.  # noqa: E501
        :type: list[SlideAnalysis]
        """

        self._analyses = analyses

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Slide, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Slide):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
