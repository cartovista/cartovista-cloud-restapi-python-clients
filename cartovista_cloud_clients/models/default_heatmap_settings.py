# coding: utf-8

"""
    CartoVista REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DefaultHeatmapSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pixel_size': 'PixelSizeBounds',
        'default_power': 'float',
        'default_smoothing': 'float'
    }

    attribute_map = {
        'pixel_size': 'pixelSize',
        'default_power': 'defaultPower',
        'default_smoothing': 'defaultSmoothing'
    }

    def __init__(self, pixel_size=None, default_power=None, default_smoothing=None):  # noqa: E501
        """DefaultHeatmapSettings - a model defined in Swagger"""  # noqa: E501
        self._pixel_size = None
        self._default_power = None
        self._default_smoothing = None
        self.discriminator = None
        if pixel_size is not None:
            self.pixel_size = pixel_size
        if default_power is not None:
            self.default_power = default_power
        if default_smoothing is not None:
            self.default_smoothing = default_smoothing

    @property
    def pixel_size(self):
        """Gets the pixel_size of this DefaultHeatmapSettings.  # noqa: E501


        :return: The pixel_size of this DefaultHeatmapSettings.  # noqa: E501
        :rtype: PixelSizeBounds
        """
        return self._pixel_size

    @pixel_size.setter
    def pixel_size(self, pixel_size):
        """Sets the pixel_size of this DefaultHeatmapSettings.


        :param pixel_size: The pixel_size of this DefaultHeatmapSettings.  # noqa: E501
        :type: PixelSizeBounds
        """

        self._pixel_size = pixel_size

    @property
    def default_power(self):
        """Gets the default_power of this DefaultHeatmapSettings.  # noqa: E501


        :return: The default_power of this DefaultHeatmapSettings.  # noqa: E501
        :rtype: float
        """
        return self._default_power

    @default_power.setter
    def default_power(self, default_power):
        """Sets the default_power of this DefaultHeatmapSettings.


        :param default_power: The default_power of this DefaultHeatmapSettings.  # noqa: E501
        :type: float
        """

        self._default_power = default_power

    @property
    def default_smoothing(self):
        """Gets the default_smoothing of this DefaultHeatmapSettings.  # noqa: E501


        :return: The default_smoothing of this DefaultHeatmapSettings.  # noqa: E501
        :rtype: float
        """
        return self._default_smoothing

    @default_smoothing.setter
    def default_smoothing(self, default_smoothing):
        """Sets the default_smoothing of this DefaultHeatmapSettings.


        :param default_smoothing: The default_smoothing of this DefaultHeatmapSettings.  # noqa: E501
        :type: float
        """

        self._default_smoothing = default_smoothing

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DefaultHeatmapSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DefaultHeatmapSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
