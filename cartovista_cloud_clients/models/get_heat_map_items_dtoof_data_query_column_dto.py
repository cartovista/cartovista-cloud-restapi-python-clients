# coding: utf-8

"""
    CartoVista REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetHeatMapItemsDTOOfDataQueryColumnDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'width': 'int',
        'extent': 'ExtentDto',
        'thematic_data_column': 'OneOfGetHeatMapItemsDTOOfDataQueryColumnDTOThematicDataColumn',
        'filter_data_columns': 'list[DataQueryColumnDTO]',
        'spatial_filter': 'OneOfGetHeatMapItemsDTOOfDataQueryColumnDTOSpatialFilter'
    }

    attribute_map = {
        'id': 'id',
        'width': 'width',
        'extent': 'extent',
        'thematic_data_column': 'thematicDataColumn',
        'filter_data_columns': 'filterDataColumns',
        'spatial_filter': 'spatialFilter'
    }

    def __init__(self, id=None, width=None, extent=None, thematic_data_column=None, filter_data_columns=None, spatial_filter=None):  # noqa: E501
        """GetHeatMapItemsDTOOfDataQueryColumnDTO - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._width = None
        self._extent = None
        self._thematic_data_column = None
        self._filter_data_columns = None
        self._spatial_filter = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if width is not None:
            self.width = width
        if extent is not None:
            self.extent = extent
        if thematic_data_column is not None:
            self.thematic_data_column = thematic_data_column
        if filter_data_columns is not None:
            self.filter_data_columns = filter_data_columns
        if spatial_filter is not None:
            self.spatial_filter = spatial_filter

    @property
    def id(self):
        """Gets the id of this GetHeatMapItemsDTOOfDataQueryColumnDTO.  # noqa: E501


        :return: The id of this GetHeatMapItemsDTOOfDataQueryColumnDTO.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetHeatMapItemsDTOOfDataQueryColumnDTO.


        :param id: The id of this GetHeatMapItemsDTOOfDataQueryColumnDTO.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def width(self):
        """Gets the width of this GetHeatMapItemsDTOOfDataQueryColumnDTO.  # noqa: E501


        :return: The width of this GetHeatMapItemsDTOOfDataQueryColumnDTO.  # noqa: E501
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this GetHeatMapItemsDTOOfDataQueryColumnDTO.


        :param width: The width of this GetHeatMapItemsDTOOfDataQueryColumnDTO.  # noqa: E501
        :type: int
        """

        self._width = width

    @property
    def extent(self):
        """Gets the extent of this GetHeatMapItemsDTOOfDataQueryColumnDTO.  # noqa: E501


        :return: The extent of this GetHeatMapItemsDTOOfDataQueryColumnDTO.  # noqa: E501
        :rtype: ExtentDto
        """
        return self._extent

    @extent.setter
    def extent(self, extent):
        """Sets the extent of this GetHeatMapItemsDTOOfDataQueryColumnDTO.


        :param extent: The extent of this GetHeatMapItemsDTOOfDataQueryColumnDTO.  # noqa: E501
        :type: ExtentDto
        """

        self._extent = extent

    @property
    def thematic_data_column(self):
        """Gets the thematic_data_column of this GetHeatMapItemsDTOOfDataQueryColumnDTO.  # noqa: E501


        :return: The thematic_data_column of this GetHeatMapItemsDTOOfDataQueryColumnDTO.  # noqa: E501
        :rtype: OneOfGetHeatMapItemsDTOOfDataQueryColumnDTOThematicDataColumn
        """
        return self._thematic_data_column

    @thematic_data_column.setter
    def thematic_data_column(self, thematic_data_column):
        """Sets the thematic_data_column of this GetHeatMapItemsDTOOfDataQueryColumnDTO.


        :param thematic_data_column: The thematic_data_column of this GetHeatMapItemsDTOOfDataQueryColumnDTO.  # noqa: E501
        :type: OneOfGetHeatMapItemsDTOOfDataQueryColumnDTOThematicDataColumn
        """

        self._thematic_data_column = thematic_data_column

    @property
    def filter_data_columns(self):
        """Gets the filter_data_columns of this GetHeatMapItemsDTOOfDataQueryColumnDTO.  # noqa: E501


        :return: The filter_data_columns of this GetHeatMapItemsDTOOfDataQueryColumnDTO.  # noqa: E501
        :rtype: list[DataQueryColumnDTO]
        """
        return self._filter_data_columns

    @filter_data_columns.setter
    def filter_data_columns(self, filter_data_columns):
        """Sets the filter_data_columns of this GetHeatMapItemsDTOOfDataQueryColumnDTO.


        :param filter_data_columns: The filter_data_columns of this GetHeatMapItemsDTOOfDataQueryColumnDTO.  # noqa: E501
        :type: list[DataQueryColumnDTO]
        """

        self._filter_data_columns = filter_data_columns

    @property
    def spatial_filter(self):
        """Gets the spatial_filter of this GetHeatMapItemsDTOOfDataQueryColumnDTO.  # noqa: E501


        :return: The spatial_filter of this GetHeatMapItemsDTOOfDataQueryColumnDTO.  # noqa: E501
        :rtype: OneOfGetHeatMapItemsDTOOfDataQueryColumnDTOSpatialFilter
        """
        return self._spatial_filter

    @spatial_filter.setter
    def spatial_filter(self, spatial_filter):
        """Sets the spatial_filter of this GetHeatMapItemsDTOOfDataQueryColumnDTO.


        :param spatial_filter: The spatial_filter of this GetHeatMapItemsDTOOfDataQueryColumnDTO.  # noqa: E501
        :type: OneOfGetHeatMapItemsDTOOfDataQueryColumnDTOSpatialFilter
        """

        self._spatial_filter = spatial_filter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetHeatMapItemsDTOOfDataQueryColumnDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetHeatMapItemsDTOOfDataQueryColumnDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
