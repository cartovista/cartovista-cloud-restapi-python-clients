# coding: utf-8

"""
    CartoVista REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdateVariableDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'type': 'VariableTypeEnum',
        'target_value': 'float',
        'weight': 'float',
        'range_min': 'float',
        'range_max': 'float',
        'is_user_set': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'type': 'type',
        'target_value': 'targetValue',
        'weight': 'weight',
        'range_min': 'rangeMin',
        'range_max': 'rangeMax',
        'is_user_set': 'isUserSet'
    }

    def __init__(self, name=None, type=None, target_value=None, weight=None, range_min=None, range_max=None, is_user_set=None):  # noqa: E501
        """UpdateVariableDTO - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._type = None
        self._target_value = None
        self._weight = None
        self._range_min = None
        self._range_max = None
        self._is_user_set = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if target_value is not None:
            self.target_value = target_value
        if weight is not None:
            self.weight = weight
        if range_min is not None:
            self.range_min = range_min
        if range_max is not None:
            self.range_max = range_max
        if is_user_set is not None:
            self.is_user_set = is_user_set

    @property
    def name(self):
        """Gets the name of this UpdateVariableDTO.  # noqa: E501


        :return: The name of this UpdateVariableDTO.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateVariableDTO.


        :param name: The name of this UpdateVariableDTO.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this UpdateVariableDTO.  # noqa: E501


        :return: The type of this UpdateVariableDTO.  # noqa: E501
        :rtype: VariableTypeEnum
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this UpdateVariableDTO.


        :param type: The type of this UpdateVariableDTO.  # noqa: E501
        :type: VariableTypeEnum
        """

        self._type = type

    @property
    def target_value(self):
        """Gets the target_value of this UpdateVariableDTO.  # noqa: E501


        :return: The target_value of this UpdateVariableDTO.  # noqa: E501
        :rtype: float
        """
        return self._target_value

    @target_value.setter
    def target_value(self, target_value):
        """Sets the target_value of this UpdateVariableDTO.


        :param target_value: The target_value of this UpdateVariableDTO.  # noqa: E501
        :type: float
        """

        self._target_value = target_value

    @property
    def weight(self):
        """Gets the weight of this UpdateVariableDTO.  # noqa: E501


        :return: The weight of this UpdateVariableDTO.  # noqa: E501
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this UpdateVariableDTO.


        :param weight: The weight of this UpdateVariableDTO.  # noqa: E501
        :type: float
        """

        self._weight = weight

    @property
    def range_min(self):
        """Gets the range_min of this UpdateVariableDTO.  # noqa: E501


        :return: The range_min of this UpdateVariableDTO.  # noqa: E501
        :rtype: float
        """
        return self._range_min

    @range_min.setter
    def range_min(self, range_min):
        """Sets the range_min of this UpdateVariableDTO.


        :param range_min: The range_min of this UpdateVariableDTO.  # noqa: E501
        :type: float
        """

        self._range_min = range_min

    @property
    def range_max(self):
        """Gets the range_max of this UpdateVariableDTO.  # noqa: E501


        :return: The range_max of this UpdateVariableDTO.  # noqa: E501
        :rtype: float
        """
        return self._range_max

    @range_max.setter
    def range_max(self, range_max):
        """Sets the range_max of this UpdateVariableDTO.


        :param range_max: The range_max of this UpdateVariableDTO.  # noqa: E501
        :type: float
        """

        self._range_max = range_max

    @property
    def is_user_set(self):
        """Gets the is_user_set of this UpdateVariableDTO.  # noqa: E501


        :return: The is_user_set of this UpdateVariableDTO.  # noqa: E501
        :rtype: bool
        """
        return self._is_user_set

    @is_user_set.setter
    def is_user_set(self, is_user_set):
        """Sets the is_user_set of this UpdateVariableDTO.


        :param is_user_set: The is_user_set of this UpdateVariableDTO.  # noqa: E501
        :type: bool
        """

        self._is_user_set = is_user_set

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateVariableDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateVariableDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
