# coding: utf-8

"""
    CartoVista REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Organization(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'default_language': 'LanguageEnum',
        'primary_color': 'str',
        'default_theme': 'ThemeEnum',
        'logo_url': 'str',
        'is_enterprise': 'bool',
        'url_code': 'str',
        'open_id_providers': 'list[OpenIdProviderInformation]',
        'froala_key': 'str',
        'disclaimers': 'list[TenantDisclaimer]',
        'invalidate_disclaimer_time': 'datetime'
    }

    attribute_map = {
        'name': 'name',
        'default_language': 'defaultLanguage',
        'primary_color': 'primaryColor',
        'default_theme': 'defaultTheme',
        'logo_url': 'logoUrl',
        'is_enterprise': 'isEnterprise',
        'url_code': 'urlCode',
        'open_id_providers': 'openIdProviders',
        'froala_key': 'froalaKey',
        'disclaimers': 'disclaimers',
        'invalidate_disclaimer_time': 'invalidateDisclaimerTime'
    }

    def __init__(self, name=None, default_language=None, primary_color=None, default_theme=None, logo_url=None, is_enterprise=None, url_code=None, open_id_providers=None, froala_key=None, disclaimers=None, invalidate_disclaimer_time=None):  # noqa: E501
        """Organization - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._default_language = None
        self._primary_color = None
        self._default_theme = None
        self._logo_url = None
        self._is_enterprise = None
        self._url_code = None
        self._open_id_providers = None
        self._froala_key = None
        self._disclaimers = None
        self._invalidate_disclaimer_time = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if default_language is not None:
            self.default_language = default_language
        if primary_color is not None:
            self.primary_color = primary_color
        if default_theme is not None:
            self.default_theme = default_theme
        if logo_url is not None:
            self.logo_url = logo_url
        if is_enterprise is not None:
            self.is_enterprise = is_enterprise
        if url_code is not None:
            self.url_code = url_code
        if open_id_providers is not None:
            self.open_id_providers = open_id_providers
        if froala_key is not None:
            self.froala_key = froala_key
        if disclaimers is not None:
            self.disclaimers = disclaimers
        if invalidate_disclaimer_time is not None:
            self.invalidate_disclaimer_time = invalidate_disclaimer_time

    @property
    def name(self):
        """Gets the name of this Organization.  # noqa: E501


        :return: The name of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Organization.


        :param name: The name of this Organization.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def default_language(self):
        """Gets the default_language of this Organization.  # noqa: E501


        :return: The default_language of this Organization.  # noqa: E501
        :rtype: LanguageEnum
        """
        return self._default_language

    @default_language.setter
    def default_language(self, default_language):
        """Sets the default_language of this Organization.


        :param default_language: The default_language of this Organization.  # noqa: E501
        :type: LanguageEnum
        """

        self._default_language = default_language

    @property
    def primary_color(self):
        """Gets the primary_color of this Organization.  # noqa: E501


        :return: The primary_color of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._primary_color

    @primary_color.setter
    def primary_color(self, primary_color):
        """Sets the primary_color of this Organization.


        :param primary_color: The primary_color of this Organization.  # noqa: E501
        :type: str
        """

        self._primary_color = primary_color

    @property
    def default_theme(self):
        """Gets the default_theme of this Organization.  # noqa: E501


        :return: The default_theme of this Organization.  # noqa: E501
        :rtype: ThemeEnum
        """
        return self._default_theme

    @default_theme.setter
    def default_theme(self, default_theme):
        """Sets the default_theme of this Organization.


        :param default_theme: The default_theme of this Organization.  # noqa: E501
        :type: ThemeEnum
        """

        self._default_theme = default_theme

    @property
    def logo_url(self):
        """Gets the logo_url of this Organization.  # noqa: E501


        :return: The logo_url of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._logo_url

    @logo_url.setter
    def logo_url(self, logo_url):
        """Sets the logo_url of this Organization.


        :param logo_url: The logo_url of this Organization.  # noqa: E501
        :type: str
        """

        self._logo_url = logo_url

    @property
    def is_enterprise(self):
        """Gets the is_enterprise of this Organization.  # noqa: E501


        :return: The is_enterprise of this Organization.  # noqa: E501
        :rtype: bool
        """
        return self._is_enterprise

    @is_enterprise.setter
    def is_enterprise(self, is_enterprise):
        """Sets the is_enterprise of this Organization.


        :param is_enterprise: The is_enterprise of this Organization.  # noqa: E501
        :type: bool
        """

        self._is_enterprise = is_enterprise

    @property
    def url_code(self):
        """Gets the url_code of this Organization.  # noqa: E501


        :return: The url_code of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._url_code

    @url_code.setter
    def url_code(self, url_code):
        """Sets the url_code of this Organization.


        :param url_code: The url_code of this Organization.  # noqa: E501
        :type: str
        """

        self._url_code = url_code

    @property
    def open_id_providers(self):
        """Gets the open_id_providers of this Organization.  # noqa: E501


        :return: The open_id_providers of this Organization.  # noqa: E501
        :rtype: list[OpenIdProviderInformation]
        """
        return self._open_id_providers

    @open_id_providers.setter
    def open_id_providers(self, open_id_providers):
        """Sets the open_id_providers of this Organization.


        :param open_id_providers: The open_id_providers of this Organization.  # noqa: E501
        :type: list[OpenIdProviderInformation]
        """

        self._open_id_providers = open_id_providers

    @property
    def froala_key(self):
        """Gets the froala_key of this Organization.  # noqa: E501


        :return: The froala_key of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._froala_key

    @froala_key.setter
    def froala_key(self, froala_key):
        """Sets the froala_key of this Organization.


        :param froala_key: The froala_key of this Organization.  # noqa: E501
        :type: str
        """

        self._froala_key = froala_key

    @property
    def disclaimers(self):
        """Gets the disclaimers of this Organization.  # noqa: E501


        :return: The disclaimers of this Organization.  # noqa: E501
        :rtype: list[TenantDisclaimer]
        """
        return self._disclaimers

    @disclaimers.setter
    def disclaimers(self, disclaimers):
        """Sets the disclaimers of this Organization.


        :param disclaimers: The disclaimers of this Organization.  # noqa: E501
        :type: list[TenantDisclaimer]
        """

        self._disclaimers = disclaimers

    @property
    def invalidate_disclaimer_time(self):
        """Gets the invalidate_disclaimer_time of this Organization.  # noqa: E501


        :return: The invalidate_disclaimer_time of this Organization.  # noqa: E501
        :rtype: datetime
        """
        return self._invalidate_disclaimer_time

    @invalidate_disclaimer_time.setter
    def invalidate_disclaimer_time(self, invalidate_disclaimer_time):
        """Sets the invalidate_disclaimer_time of this Organization.


        :param invalidate_disclaimer_time: The invalidate_disclaimer_time of this Organization.  # noqa: E501
        :type: datetime
        """

        self._invalidate_disclaimer_time = invalidate_disclaimer_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Organization, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Organization):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
