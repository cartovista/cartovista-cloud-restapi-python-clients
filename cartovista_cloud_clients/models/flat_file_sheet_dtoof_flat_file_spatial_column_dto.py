# coding: utf-8

"""
    CartoVista REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FlatFileSheetDTOOfFlatFileSpatialColumnDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sheet_name': 'str',
        'columns': 'list[FlatFileSpatialColumnDTO]',
        'record_count': 'int',
        'lat_column_number': 'int',
        'long_column_number': 'int',
        'address_column_numbers': 'list[int]',
        'can_geocode_by_lat_long': 'bool'
    }

    attribute_map = {
        'sheet_name': 'sheetName',
        'columns': 'columns',
        'record_count': 'recordCount',
        'lat_column_number': 'latColumnNumber',
        'long_column_number': 'longColumnNumber',
        'address_column_numbers': 'addressColumnNumbers',
        'can_geocode_by_lat_long': 'canGeocodeByLatLong'
    }

    def __init__(self, sheet_name=None, columns=None, record_count=None, lat_column_number=None, long_column_number=None, address_column_numbers=None, can_geocode_by_lat_long=None):  # noqa: E501
        """FlatFileSheetDTOOfFlatFileSpatialColumnDTO - a model defined in Swagger"""  # noqa: E501
        self._sheet_name = None
        self._columns = None
        self._record_count = None
        self._lat_column_number = None
        self._long_column_number = None
        self._address_column_numbers = None
        self._can_geocode_by_lat_long = None
        self.discriminator = None
        if sheet_name is not None:
            self.sheet_name = sheet_name
        if columns is not None:
            self.columns = columns
        if record_count is not None:
            self.record_count = record_count
        if lat_column_number is not None:
            self.lat_column_number = lat_column_number
        if long_column_number is not None:
            self.long_column_number = long_column_number
        if address_column_numbers is not None:
            self.address_column_numbers = address_column_numbers
        if can_geocode_by_lat_long is not None:
            self.can_geocode_by_lat_long = can_geocode_by_lat_long

    @property
    def sheet_name(self):
        """Gets the sheet_name of this FlatFileSheetDTOOfFlatFileSpatialColumnDTO.  # noqa: E501


        :return: The sheet_name of this FlatFileSheetDTOOfFlatFileSpatialColumnDTO.  # noqa: E501
        :rtype: str
        """
        return self._sheet_name

    @sheet_name.setter
    def sheet_name(self, sheet_name):
        """Sets the sheet_name of this FlatFileSheetDTOOfFlatFileSpatialColumnDTO.


        :param sheet_name: The sheet_name of this FlatFileSheetDTOOfFlatFileSpatialColumnDTO.  # noqa: E501
        :type: str
        """

        self._sheet_name = sheet_name

    @property
    def columns(self):
        """Gets the columns of this FlatFileSheetDTOOfFlatFileSpatialColumnDTO.  # noqa: E501


        :return: The columns of this FlatFileSheetDTOOfFlatFileSpatialColumnDTO.  # noqa: E501
        :rtype: list[FlatFileSpatialColumnDTO]
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this FlatFileSheetDTOOfFlatFileSpatialColumnDTO.


        :param columns: The columns of this FlatFileSheetDTOOfFlatFileSpatialColumnDTO.  # noqa: E501
        :type: list[FlatFileSpatialColumnDTO]
        """

        self._columns = columns

    @property
    def record_count(self):
        """Gets the record_count of this FlatFileSheetDTOOfFlatFileSpatialColumnDTO.  # noqa: E501


        :return: The record_count of this FlatFileSheetDTOOfFlatFileSpatialColumnDTO.  # noqa: E501
        :rtype: int
        """
        return self._record_count

    @record_count.setter
    def record_count(self, record_count):
        """Sets the record_count of this FlatFileSheetDTOOfFlatFileSpatialColumnDTO.


        :param record_count: The record_count of this FlatFileSheetDTOOfFlatFileSpatialColumnDTO.  # noqa: E501
        :type: int
        """

        self._record_count = record_count

    @property
    def lat_column_number(self):
        """Gets the lat_column_number of this FlatFileSheetDTOOfFlatFileSpatialColumnDTO.  # noqa: E501


        :return: The lat_column_number of this FlatFileSheetDTOOfFlatFileSpatialColumnDTO.  # noqa: E501
        :rtype: int
        """
        return self._lat_column_number

    @lat_column_number.setter
    def lat_column_number(self, lat_column_number):
        """Sets the lat_column_number of this FlatFileSheetDTOOfFlatFileSpatialColumnDTO.


        :param lat_column_number: The lat_column_number of this FlatFileSheetDTOOfFlatFileSpatialColumnDTO.  # noqa: E501
        :type: int
        """

        self._lat_column_number = lat_column_number

    @property
    def long_column_number(self):
        """Gets the long_column_number of this FlatFileSheetDTOOfFlatFileSpatialColumnDTO.  # noqa: E501


        :return: The long_column_number of this FlatFileSheetDTOOfFlatFileSpatialColumnDTO.  # noqa: E501
        :rtype: int
        """
        return self._long_column_number

    @long_column_number.setter
    def long_column_number(self, long_column_number):
        """Sets the long_column_number of this FlatFileSheetDTOOfFlatFileSpatialColumnDTO.


        :param long_column_number: The long_column_number of this FlatFileSheetDTOOfFlatFileSpatialColumnDTO.  # noqa: E501
        :type: int
        """

        self._long_column_number = long_column_number

    @property
    def address_column_numbers(self):
        """Gets the address_column_numbers of this FlatFileSheetDTOOfFlatFileSpatialColumnDTO.  # noqa: E501


        :return: The address_column_numbers of this FlatFileSheetDTOOfFlatFileSpatialColumnDTO.  # noqa: E501
        :rtype: list[int]
        """
        return self._address_column_numbers

    @address_column_numbers.setter
    def address_column_numbers(self, address_column_numbers):
        """Sets the address_column_numbers of this FlatFileSheetDTOOfFlatFileSpatialColumnDTO.


        :param address_column_numbers: The address_column_numbers of this FlatFileSheetDTOOfFlatFileSpatialColumnDTO.  # noqa: E501
        :type: list[int]
        """

        self._address_column_numbers = address_column_numbers

    @property
    def can_geocode_by_lat_long(self):
        """Gets the can_geocode_by_lat_long of this FlatFileSheetDTOOfFlatFileSpatialColumnDTO.  # noqa: E501


        :return: The can_geocode_by_lat_long of this FlatFileSheetDTOOfFlatFileSpatialColumnDTO.  # noqa: E501
        :rtype: bool
        """
        return self._can_geocode_by_lat_long

    @can_geocode_by_lat_long.setter
    def can_geocode_by_lat_long(self, can_geocode_by_lat_long):
        """Sets the can_geocode_by_lat_long of this FlatFileSheetDTOOfFlatFileSpatialColumnDTO.


        :param can_geocode_by_lat_long: The can_geocode_by_lat_long of this FlatFileSheetDTOOfFlatFileSpatialColumnDTO.  # noqa: E501
        :type: bool
        """

        self._can_geocode_by_lat_long = can_geocode_by_lat_long

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FlatFileSheetDTOOfFlatFileSpatialColumnDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FlatFileSheetDTOOfFlatFileSpatialColumnDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
