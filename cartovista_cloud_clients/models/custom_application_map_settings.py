# coding: utf-8

"""
    CartoVista REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CustomApplicationMapSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'is_enabled': 'bool',
        'color': 'str',
        'url_code': 'str',
        'url': 'str'
    }

    attribute_map = {
        'name': 'name',
        'is_enabled': 'isEnabled',
        'color': 'color',
        'url_code': 'urlCode',
        'url': 'url'
    }

    def __init__(self, name=None, is_enabled=None, color=None, url_code=None, url=None):  # noqa: E501
        """CustomApplicationMapSettings - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._is_enabled = None
        self._color = None
        self._url_code = None
        self._url = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if is_enabled is not None:
            self.is_enabled = is_enabled
        if color is not None:
            self.color = color
        if url_code is not None:
            self.url_code = url_code
        if url is not None:
            self.url = url

    @property
    def name(self):
        """Gets the name of this CustomApplicationMapSettings.  # noqa: E501


        :return: The name of this CustomApplicationMapSettings.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CustomApplicationMapSettings.


        :param name: The name of this CustomApplicationMapSettings.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def is_enabled(self):
        """Gets the is_enabled of this CustomApplicationMapSettings.  # noqa: E501


        :return: The is_enabled of this CustomApplicationMapSettings.  # noqa: E501
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this CustomApplicationMapSettings.


        :param is_enabled: The is_enabled of this CustomApplicationMapSettings.  # noqa: E501
        :type: bool
        """

        self._is_enabled = is_enabled

    @property
    def color(self):
        """Gets the color of this CustomApplicationMapSettings.  # noqa: E501


        :return: The color of this CustomApplicationMapSettings.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this CustomApplicationMapSettings.


        :param color: The color of this CustomApplicationMapSettings.  # noqa: E501
        :type: str
        """

        self._color = color

    @property
    def url_code(self):
        """Gets the url_code of this CustomApplicationMapSettings.  # noqa: E501


        :return: The url_code of this CustomApplicationMapSettings.  # noqa: E501
        :rtype: str
        """
        return self._url_code

    @url_code.setter
    def url_code(self, url_code):
        """Sets the url_code of this CustomApplicationMapSettings.


        :param url_code: The url_code of this CustomApplicationMapSettings.  # noqa: E501
        :type: str
        """

        self._url_code = url_code

    @property
    def url(self):
        """Gets the url of this CustomApplicationMapSettings.  # noqa: E501


        :return: The url of this CustomApplicationMapSettings.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this CustomApplicationMapSettings.


        :param url: The url of this CustomApplicationMapSettings.  # noqa: E501
        :type: str
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomApplicationMapSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomApplicationMapSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
