# coding: utf-8

"""
    CartoVista REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UserCreateParameter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'email_address': 'str',
        'identifier': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'role': 'PermissionDTO',
        'group_ids': 'list[str]',
        'send_email_invitation': 'bool',
        'provider': 'SecurityProvider',
        'provider_name': 'str'
    }

    attribute_map = {
        'email_address': 'emailAddress',
        'identifier': 'identifier',
        'first_name': 'firstName',
        'last_name': 'lastName',
        'role': 'role',
        'group_ids': 'groupIds',
        'send_email_invitation': 'sendEmailInvitation',
        'provider': 'provider',
        'provider_name': 'providerName'
    }

    def __init__(self, email_address=None, identifier=None, first_name=None, last_name=None, role=None, group_ids=None, send_email_invitation=None, provider=None, provider_name=None):  # noqa: E501
        """UserCreateParameter - a model defined in Swagger"""  # noqa: E501
        self._email_address = None
        self._identifier = None
        self._first_name = None
        self._last_name = None
        self._role = None
        self._group_ids = None
        self._send_email_invitation = None
        self._provider = None
        self._provider_name = None
        self.discriminator = None
        if email_address is not None:
            self.email_address = email_address
        if identifier is not None:
            self.identifier = identifier
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if role is not None:
            self.role = role
        if group_ids is not None:
            self.group_ids = group_ids
        if send_email_invitation is not None:
            self.send_email_invitation = send_email_invitation
        if provider is not None:
            self.provider = provider
        if provider_name is not None:
            self.provider_name = provider_name

    @property
    def email_address(self):
        """Gets the email_address of this UserCreateParameter.  # noqa: E501


        :return: The email_address of this UserCreateParameter.  # noqa: E501
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this UserCreateParameter.


        :param email_address: The email_address of this UserCreateParameter.  # noqa: E501
        :type: str
        """

        self._email_address = email_address

    @property
    def identifier(self):
        """Gets the identifier of this UserCreateParameter.  # noqa: E501


        :return: The identifier of this UserCreateParameter.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this UserCreateParameter.


        :param identifier: The identifier of this UserCreateParameter.  # noqa: E501
        :type: str
        """

        self._identifier = identifier

    @property
    def first_name(self):
        """Gets the first_name of this UserCreateParameter.  # noqa: E501


        :return: The first_name of this UserCreateParameter.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this UserCreateParameter.


        :param first_name: The first_name of this UserCreateParameter.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this UserCreateParameter.  # noqa: E501


        :return: The last_name of this UserCreateParameter.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this UserCreateParameter.


        :param last_name: The last_name of this UserCreateParameter.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def role(self):
        """Gets the role of this UserCreateParameter.  # noqa: E501


        :return: The role of this UserCreateParameter.  # noqa: E501
        :rtype: PermissionDTO
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this UserCreateParameter.


        :param role: The role of this UserCreateParameter.  # noqa: E501
        :type: PermissionDTO
        """

        self._role = role

    @property
    def group_ids(self):
        """Gets the group_ids of this UserCreateParameter.  # noqa: E501


        :return: The group_ids of this UserCreateParameter.  # noqa: E501
        :rtype: list[str]
        """
        return self._group_ids

    @group_ids.setter
    def group_ids(self, group_ids):
        """Sets the group_ids of this UserCreateParameter.


        :param group_ids: The group_ids of this UserCreateParameter.  # noqa: E501
        :type: list[str]
        """

        self._group_ids = group_ids

    @property
    def send_email_invitation(self):
        """Gets the send_email_invitation of this UserCreateParameter.  # noqa: E501


        :return: The send_email_invitation of this UserCreateParameter.  # noqa: E501
        :rtype: bool
        """
        return self._send_email_invitation

    @send_email_invitation.setter
    def send_email_invitation(self, send_email_invitation):
        """Sets the send_email_invitation of this UserCreateParameter.


        :param send_email_invitation: The send_email_invitation of this UserCreateParameter.  # noqa: E501
        :type: bool
        """

        self._send_email_invitation = send_email_invitation

    @property
    def provider(self):
        """Gets the provider of this UserCreateParameter.  # noqa: E501


        :return: The provider of this UserCreateParameter.  # noqa: E501
        :rtype: SecurityProvider
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this UserCreateParameter.


        :param provider: The provider of this UserCreateParameter.  # noqa: E501
        :type: SecurityProvider
        """

        self._provider = provider

    @property
    def provider_name(self):
        """Gets the provider_name of this UserCreateParameter.  # noqa: E501


        :return: The provider_name of this UserCreateParameter.  # noqa: E501
        :rtype: str
        """
        return self._provider_name

    @provider_name.setter
    def provider_name(self, provider_name):
        """Sets the provider_name of this UserCreateParameter.


        :param provider_name: The provider_name of this UserCreateParameter.  # noqa: E501
        :type: str
        """

        self._provider_name = provider_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserCreateParameter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserCreateParameter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
