# coding: utf-8

"""
    CartoVista REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RouteSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'route_labels': 'list[str]',
        'origin_latitude': 'float',
        'origin_longitude': 'float',
        'destination_latitude': 'float',
        'destination_longitude': 'float',
        'drive_distance_meters': 'int',
        'drive_time_minutes': 'int',
        'coordinates': 'list[float]',
        'route_legs_statistics': 'list[RouteStats]',
        'stops': 'list[Coordinate]',
        'maneuvers': 'list[Maneuver]'
    }

    attribute_map = {
        'route_labels': 'routeLabels',
        'origin_latitude': 'originLatitude',
        'origin_longitude': 'originLongitude',
        'destination_latitude': 'destinationLatitude',
        'destination_longitude': 'destinationLongitude',
        'drive_distance_meters': 'driveDistanceMeters',
        'drive_time_minutes': 'driveTimeMinutes',
        'coordinates': 'coordinates',
        'route_legs_statistics': 'routeLegsStatistics',
        'stops': 'stops',
        'maneuvers': 'maneuvers'
    }

    def __init__(self, route_labels=None, origin_latitude=None, origin_longitude=None, destination_latitude=None, destination_longitude=None, drive_distance_meters=None, drive_time_minutes=None, coordinates=None, route_legs_statistics=None, stops=None, maneuvers=None):  # noqa: E501
        """RouteSummary - a model defined in Swagger"""  # noqa: E501
        self._route_labels = None
        self._origin_latitude = None
        self._origin_longitude = None
        self._destination_latitude = None
        self._destination_longitude = None
        self._drive_distance_meters = None
        self._drive_time_minutes = None
        self._coordinates = None
        self._route_legs_statistics = None
        self._stops = None
        self._maneuvers = None
        self.discriminator = None
        if route_labels is not None:
            self.route_labels = route_labels
        if origin_latitude is not None:
            self.origin_latitude = origin_latitude
        if origin_longitude is not None:
            self.origin_longitude = origin_longitude
        if destination_latitude is not None:
            self.destination_latitude = destination_latitude
        if destination_longitude is not None:
            self.destination_longitude = destination_longitude
        if drive_distance_meters is not None:
            self.drive_distance_meters = drive_distance_meters
        if drive_time_minutes is not None:
            self.drive_time_minutes = drive_time_minutes
        if coordinates is not None:
            self.coordinates = coordinates
        if route_legs_statistics is not None:
            self.route_legs_statistics = route_legs_statistics
        if stops is not None:
            self.stops = stops
        if maneuvers is not None:
            self.maneuvers = maneuvers

    @property
    def route_labels(self):
        """Gets the route_labels of this RouteSummary.  # noqa: E501


        :return: The route_labels of this RouteSummary.  # noqa: E501
        :rtype: list[str]
        """
        return self._route_labels

    @route_labels.setter
    def route_labels(self, route_labels):
        """Sets the route_labels of this RouteSummary.


        :param route_labels: The route_labels of this RouteSummary.  # noqa: E501
        :type: list[str]
        """

        self._route_labels = route_labels

    @property
    def origin_latitude(self):
        """Gets the origin_latitude of this RouteSummary.  # noqa: E501


        :return: The origin_latitude of this RouteSummary.  # noqa: E501
        :rtype: float
        """
        return self._origin_latitude

    @origin_latitude.setter
    def origin_latitude(self, origin_latitude):
        """Sets the origin_latitude of this RouteSummary.


        :param origin_latitude: The origin_latitude of this RouteSummary.  # noqa: E501
        :type: float
        """

        self._origin_latitude = origin_latitude

    @property
    def origin_longitude(self):
        """Gets the origin_longitude of this RouteSummary.  # noqa: E501


        :return: The origin_longitude of this RouteSummary.  # noqa: E501
        :rtype: float
        """
        return self._origin_longitude

    @origin_longitude.setter
    def origin_longitude(self, origin_longitude):
        """Sets the origin_longitude of this RouteSummary.


        :param origin_longitude: The origin_longitude of this RouteSummary.  # noqa: E501
        :type: float
        """

        self._origin_longitude = origin_longitude

    @property
    def destination_latitude(self):
        """Gets the destination_latitude of this RouteSummary.  # noqa: E501


        :return: The destination_latitude of this RouteSummary.  # noqa: E501
        :rtype: float
        """
        return self._destination_latitude

    @destination_latitude.setter
    def destination_latitude(self, destination_latitude):
        """Sets the destination_latitude of this RouteSummary.


        :param destination_latitude: The destination_latitude of this RouteSummary.  # noqa: E501
        :type: float
        """

        self._destination_latitude = destination_latitude

    @property
    def destination_longitude(self):
        """Gets the destination_longitude of this RouteSummary.  # noqa: E501


        :return: The destination_longitude of this RouteSummary.  # noqa: E501
        :rtype: float
        """
        return self._destination_longitude

    @destination_longitude.setter
    def destination_longitude(self, destination_longitude):
        """Sets the destination_longitude of this RouteSummary.


        :param destination_longitude: The destination_longitude of this RouteSummary.  # noqa: E501
        :type: float
        """

        self._destination_longitude = destination_longitude

    @property
    def drive_distance_meters(self):
        """Gets the drive_distance_meters of this RouteSummary.  # noqa: E501


        :return: The drive_distance_meters of this RouteSummary.  # noqa: E501
        :rtype: int
        """
        return self._drive_distance_meters

    @drive_distance_meters.setter
    def drive_distance_meters(self, drive_distance_meters):
        """Sets the drive_distance_meters of this RouteSummary.


        :param drive_distance_meters: The drive_distance_meters of this RouteSummary.  # noqa: E501
        :type: int
        """

        self._drive_distance_meters = drive_distance_meters

    @property
    def drive_time_minutes(self):
        """Gets the drive_time_minutes of this RouteSummary.  # noqa: E501


        :return: The drive_time_minutes of this RouteSummary.  # noqa: E501
        :rtype: int
        """
        return self._drive_time_minutes

    @drive_time_minutes.setter
    def drive_time_minutes(self, drive_time_minutes):
        """Sets the drive_time_minutes of this RouteSummary.


        :param drive_time_minutes: The drive_time_minutes of this RouteSummary.  # noqa: E501
        :type: int
        """

        self._drive_time_minutes = drive_time_minutes

    @property
    def coordinates(self):
        """Gets the coordinates of this RouteSummary.  # noqa: E501


        :return: The coordinates of this RouteSummary.  # noqa: E501
        :rtype: list[float]
        """
        return self._coordinates

    @coordinates.setter
    def coordinates(self, coordinates):
        """Sets the coordinates of this RouteSummary.


        :param coordinates: The coordinates of this RouteSummary.  # noqa: E501
        :type: list[float]
        """

        self._coordinates = coordinates

    @property
    def route_legs_statistics(self):
        """Gets the route_legs_statistics of this RouteSummary.  # noqa: E501


        :return: The route_legs_statistics of this RouteSummary.  # noqa: E501
        :rtype: list[RouteStats]
        """
        return self._route_legs_statistics

    @route_legs_statistics.setter
    def route_legs_statistics(self, route_legs_statistics):
        """Sets the route_legs_statistics of this RouteSummary.


        :param route_legs_statistics: The route_legs_statistics of this RouteSummary.  # noqa: E501
        :type: list[RouteStats]
        """

        self._route_legs_statistics = route_legs_statistics

    @property
    def stops(self):
        """Gets the stops of this RouteSummary.  # noqa: E501


        :return: The stops of this RouteSummary.  # noqa: E501
        :rtype: list[Coordinate]
        """
        return self._stops

    @stops.setter
    def stops(self, stops):
        """Sets the stops of this RouteSummary.


        :param stops: The stops of this RouteSummary.  # noqa: E501
        :type: list[Coordinate]
        """

        self._stops = stops

    @property
    def maneuvers(self):
        """Gets the maneuvers of this RouteSummary.  # noqa: E501


        :return: The maneuvers of this RouteSummary.  # noqa: E501
        :rtype: list[Maneuver]
        """
        return self._maneuvers

    @maneuvers.setter
    def maneuvers(self, maneuvers):
        """Sets the maneuvers of this RouteSummary.


        :param maneuvers: The maneuvers of this RouteSummary.  # noqa: E501
        :type: list[Maneuver]
        """

        self._maneuvers = maneuvers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RouteSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RouteSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
