# coding: utf-8

"""
    CartoVista REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LayerSettingsInteractivity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'info_view_display_mode': 'str',
        'data_tip_columns': 'list[str]',
        'data_tip_template': 'str',
        'use_data_tip_template': 'bool',
        'info_view_columns': 'list[str]',
        'info_view_template': 'str',
        'use_info_view_template': 'bool',
        'searchable_columns': 'list[str]',
        'scale_for_point_search': 'int',
        'enabled': 'bool'
    }

    attribute_map = {
        'info_view_display_mode': 'infoViewDisplayMode',
        'data_tip_columns': 'dataTipColumns',
        'data_tip_template': 'dataTipTemplate',
        'use_data_tip_template': 'useDataTipTemplate',
        'info_view_columns': 'infoViewColumns',
        'info_view_template': 'infoViewTemplate',
        'use_info_view_template': 'useInfoViewTemplate',
        'searchable_columns': 'searchableColumns',
        'scale_for_point_search': 'scaleForPointSearch',
        'enabled': 'enabled'
    }

    def __init__(self, info_view_display_mode=None, data_tip_columns=None, data_tip_template=None, use_data_tip_template=None, info_view_columns=None, info_view_template=None, use_info_view_template=None, searchable_columns=None, scale_for_point_search=None, enabled=None):  # noqa: E501
        """LayerSettingsInteractivity - a model defined in Swagger"""  # noqa: E501
        self._info_view_display_mode = None
        self._data_tip_columns = None
        self._data_tip_template = None
        self._use_data_tip_template = None
        self._info_view_columns = None
        self._info_view_template = None
        self._use_info_view_template = None
        self._searchable_columns = None
        self._scale_for_point_search = None
        self._enabled = None
        self.discriminator = None
        if info_view_display_mode is not None:
            self.info_view_display_mode = info_view_display_mode
        if data_tip_columns is not None:
            self.data_tip_columns = data_tip_columns
        if data_tip_template is not None:
            self.data_tip_template = data_tip_template
        if use_data_tip_template is not None:
            self.use_data_tip_template = use_data_tip_template
        if info_view_columns is not None:
            self.info_view_columns = info_view_columns
        if info_view_template is not None:
            self.info_view_template = info_view_template
        if use_info_view_template is not None:
            self.use_info_view_template = use_info_view_template
        if searchable_columns is not None:
            self.searchable_columns = searchable_columns
        if scale_for_point_search is not None:
            self.scale_for_point_search = scale_for_point_search
        if enabled is not None:
            self.enabled = enabled

    @property
    def info_view_display_mode(self):
        """Gets the info_view_display_mode of this LayerSettingsInteractivity.  # noqa: E501


        :return: The info_view_display_mode of this LayerSettingsInteractivity.  # noqa: E501
        :rtype: str
        """
        return self._info_view_display_mode

    @info_view_display_mode.setter
    def info_view_display_mode(self, info_view_display_mode):
        """Sets the info_view_display_mode of this LayerSettingsInteractivity.


        :param info_view_display_mode: The info_view_display_mode of this LayerSettingsInteractivity.  # noqa: E501
        :type: str
        """

        self._info_view_display_mode = info_view_display_mode

    @property
    def data_tip_columns(self):
        """Gets the data_tip_columns of this LayerSettingsInteractivity.  # noqa: E501


        :return: The data_tip_columns of this LayerSettingsInteractivity.  # noqa: E501
        :rtype: list[str]
        """
        return self._data_tip_columns

    @data_tip_columns.setter
    def data_tip_columns(self, data_tip_columns):
        """Sets the data_tip_columns of this LayerSettingsInteractivity.


        :param data_tip_columns: The data_tip_columns of this LayerSettingsInteractivity.  # noqa: E501
        :type: list[str]
        """

        self._data_tip_columns = data_tip_columns

    @property
    def data_tip_template(self):
        """Gets the data_tip_template of this LayerSettingsInteractivity.  # noqa: E501


        :return: The data_tip_template of this LayerSettingsInteractivity.  # noqa: E501
        :rtype: str
        """
        return self._data_tip_template

    @data_tip_template.setter
    def data_tip_template(self, data_tip_template):
        """Sets the data_tip_template of this LayerSettingsInteractivity.


        :param data_tip_template: The data_tip_template of this LayerSettingsInteractivity.  # noqa: E501
        :type: str
        """

        self._data_tip_template = data_tip_template

    @property
    def use_data_tip_template(self):
        """Gets the use_data_tip_template of this LayerSettingsInteractivity.  # noqa: E501


        :return: The use_data_tip_template of this LayerSettingsInteractivity.  # noqa: E501
        :rtype: bool
        """
        return self._use_data_tip_template

    @use_data_tip_template.setter
    def use_data_tip_template(self, use_data_tip_template):
        """Sets the use_data_tip_template of this LayerSettingsInteractivity.


        :param use_data_tip_template: The use_data_tip_template of this LayerSettingsInteractivity.  # noqa: E501
        :type: bool
        """

        self._use_data_tip_template = use_data_tip_template

    @property
    def info_view_columns(self):
        """Gets the info_view_columns of this LayerSettingsInteractivity.  # noqa: E501


        :return: The info_view_columns of this LayerSettingsInteractivity.  # noqa: E501
        :rtype: list[str]
        """
        return self._info_view_columns

    @info_view_columns.setter
    def info_view_columns(self, info_view_columns):
        """Sets the info_view_columns of this LayerSettingsInteractivity.


        :param info_view_columns: The info_view_columns of this LayerSettingsInteractivity.  # noqa: E501
        :type: list[str]
        """

        self._info_view_columns = info_view_columns

    @property
    def info_view_template(self):
        """Gets the info_view_template of this LayerSettingsInteractivity.  # noqa: E501


        :return: The info_view_template of this LayerSettingsInteractivity.  # noqa: E501
        :rtype: str
        """
        return self._info_view_template

    @info_view_template.setter
    def info_view_template(self, info_view_template):
        """Sets the info_view_template of this LayerSettingsInteractivity.


        :param info_view_template: The info_view_template of this LayerSettingsInteractivity.  # noqa: E501
        :type: str
        """

        self._info_view_template = info_view_template

    @property
    def use_info_view_template(self):
        """Gets the use_info_view_template of this LayerSettingsInteractivity.  # noqa: E501


        :return: The use_info_view_template of this LayerSettingsInteractivity.  # noqa: E501
        :rtype: bool
        """
        return self._use_info_view_template

    @use_info_view_template.setter
    def use_info_view_template(self, use_info_view_template):
        """Sets the use_info_view_template of this LayerSettingsInteractivity.


        :param use_info_view_template: The use_info_view_template of this LayerSettingsInteractivity.  # noqa: E501
        :type: bool
        """

        self._use_info_view_template = use_info_view_template

    @property
    def searchable_columns(self):
        """Gets the searchable_columns of this LayerSettingsInteractivity.  # noqa: E501


        :return: The searchable_columns of this LayerSettingsInteractivity.  # noqa: E501
        :rtype: list[str]
        """
        return self._searchable_columns

    @searchable_columns.setter
    def searchable_columns(self, searchable_columns):
        """Sets the searchable_columns of this LayerSettingsInteractivity.


        :param searchable_columns: The searchable_columns of this LayerSettingsInteractivity.  # noqa: E501
        :type: list[str]
        """

        self._searchable_columns = searchable_columns

    @property
    def scale_for_point_search(self):
        """Gets the scale_for_point_search of this LayerSettingsInteractivity.  # noqa: E501


        :return: The scale_for_point_search of this LayerSettingsInteractivity.  # noqa: E501
        :rtype: int
        """
        return self._scale_for_point_search

    @scale_for_point_search.setter
    def scale_for_point_search(self, scale_for_point_search):
        """Sets the scale_for_point_search of this LayerSettingsInteractivity.


        :param scale_for_point_search: The scale_for_point_search of this LayerSettingsInteractivity.  # noqa: E501
        :type: int
        """

        self._scale_for_point_search = scale_for_point_search

    @property
    def enabled(self):
        """Gets the enabled of this LayerSettingsInteractivity.  # noqa: E501


        :return: The enabled of this LayerSettingsInteractivity.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this LayerSettingsInteractivity.


        :param enabled: The enabled of this LayerSettingsInteractivity.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LayerSettingsInteractivity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LayerSettingsInteractivity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
