# coding: utf-8

"""
    CartoVista REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TerritoryPosDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pos_id': 'str',
        'pos_name': 'str',
        'territories': 'list[TerritoryZoneDTO]',
        'pta_user_set_zone_id': 'int'
    }

    attribute_map = {
        'pos_id': 'posId',
        'pos_name': 'posName',
        'territories': 'territories',
        'pta_user_set_zone_id': 'ptaUserSetZoneId'
    }

    def __init__(self, pos_id=None, pos_name=None, territories=None, pta_user_set_zone_id=None):  # noqa: E501
        """TerritoryPosDTO - a model defined in Swagger"""  # noqa: E501
        self._pos_id = None
        self._pos_name = None
        self._territories = None
        self._pta_user_set_zone_id = None
        self.discriminator = None
        if pos_id is not None:
            self.pos_id = pos_id
        if pos_name is not None:
            self.pos_name = pos_name
        if territories is not None:
            self.territories = territories
        if pta_user_set_zone_id is not None:
            self.pta_user_set_zone_id = pta_user_set_zone_id

    @property
    def pos_id(self):
        """Gets the pos_id of this TerritoryPosDTO.  # noqa: E501


        :return: The pos_id of this TerritoryPosDTO.  # noqa: E501
        :rtype: str
        """
        return self._pos_id

    @pos_id.setter
    def pos_id(self, pos_id):
        """Sets the pos_id of this TerritoryPosDTO.


        :param pos_id: The pos_id of this TerritoryPosDTO.  # noqa: E501
        :type: str
        """

        self._pos_id = pos_id

    @property
    def pos_name(self):
        """Gets the pos_name of this TerritoryPosDTO.  # noqa: E501


        :return: The pos_name of this TerritoryPosDTO.  # noqa: E501
        :rtype: str
        """
        return self._pos_name

    @pos_name.setter
    def pos_name(self, pos_name):
        """Sets the pos_name of this TerritoryPosDTO.


        :param pos_name: The pos_name of this TerritoryPosDTO.  # noqa: E501
        :type: str
        """

        self._pos_name = pos_name

    @property
    def territories(self):
        """Gets the territories of this TerritoryPosDTO.  # noqa: E501


        :return: The territories of this TerritoryPosDTO.  # noqa: E501
        :rtype: list[TerritoryZoneDTO]
        """
        return self._territories

    @territories.setter
    def territories(self, territories):
        """Sets the territories of this TerritoryPosDTO.


        :param territories: The territories of this TerritoryPosDTO.  # noqa: E501
        :type: list[TerritoryZoneDTO]
        """

        self._territories = territories

    @property
    def pta_user_set_zone_id(self):
        """Gets the pta_user_set_zone_id of this TerritoryPosDTO.  # noqa: E501


        :return: The pta_user_set_zone_id of this TerritoryPosDTO.  # noqa: E501
        :rtype: int
        """
        return self._pta_user_set_zone_id

    @pta_user_set_zone_id.setter
    def pta_user_set_zone_id(self, pta_user_set_zone_id):
        """Sets the pta_user_set_zone_id of this TerritoryPosDTO.


        :param pta_user_set_zone_id: The pta_user_set_zone_id of this TerritoryPosDTO.  # noqa: E501
        :type: int
        """

        self._pta_user_set_zone_id = pta_user_set_zone_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TerritoryPosDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TerritoryPosDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
