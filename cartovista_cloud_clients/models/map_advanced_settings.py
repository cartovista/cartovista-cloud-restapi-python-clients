# coding: utf-8

"""
    CartoVista REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MapAdvancedSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'interface': 'InterfaceSettings',
        'selection': 'SelectionSettings',
        'map': 'MapSettings',
        'search_geocoding': 'SearchGeocodingSettings',
        'thematic_analysis': 'ThematicAnalysisSettings',
        'legend': 'LegendSettings',
        'feedback_tool_settings': 'FeedbackToolSettings',
        'info_tool_settings': 'InfoToolSettings',
        'annotations': 'AnnotationSettings'
    }

    attribute_map = {
        'interface': 'interface',
        'selection': 'selection',
        'map': 'map',
        'search_geocoding': 'searchGeocoding',
        'thematic_analysis': 'thematicAnalysis',
        'legend': 'legend',
        'feedback_tool_settings': 'feedbackToolSettings',
        'info_tool_settings': 'infoToolSettings',
        'annotations': 'annotations'
    }

    def __init__(self, interface=None, selection=None, map=None, search_geocoding=None, thematic_analysis=None, legend=None, feedback_tool_settings=None, info_tool_settings=None, annotations=None):  # noqa: E501
        """MapAdvancedSettings - a model defined in Swagger"""  # noqa: E501
        self._interface = None
        self._selection = None
        self._map = None
        self._search_geocoding = None
        self._thematic_analysis = None
        self._legend = None
        self._feedback_tool_settings = None
        self._info_tool_settings = None
        self._annotations = None
        self.discriminator = None
        if interface is not None:
            self.interface = interface
        if selection is not None:
            self.selection = selection
        if map is not None:
            self.map = map
        if search_geocoding is not None:
            self.search_geocoding = search_geocoding
        if thematic_analysis is not None:
            self.thematic_analysis = thematic_analysis
        if legend is not None:
            self.legend = legend
        if feedback_tool_settings is not None:
            self.feedback_tool_settings = feedback_tool_settings
        if info_tool_settings is not None:
            self.info_tool_settings = info_tool_settings
        if annotations is not None:
            self.annotations = annotations

    @property
    def interface(self):
        """Gets the interface of this MapAdvancedSettings.  # noqa: E501


        :return: The interface of this MapAdvancedSettings.  # noqa: E501
        :rtype: InterfaceSettings
        """
        return self._interface

    @interface.setter
    def interface(self, interface):
        """Sets the interface of this MapAdvancedSettings.


        :param interface: The interface of this MapAdvancedSettings.  # noqa: E501
        :type: InterfaceSettings
        """

        self._interface = interface

    @property
    def selection(self):
        """Gets the selection of this MapAdvancedSettings.  # noqa: E501


        :return: The selection of this MapAdvancedSettings.  # noqa: E501
        :rtype: SelectionSettings
        """
        return self._selection

    @selection.setter
    def selection(self, selection):
        """Sets the selection of this MapAdvancedSettings.


        :param selection: The selection of this MapAdvancedSettings.  # noqa: E501
        :type: SelectionSettings
        """

        self._selection = selection

    @property
    def map(self):
        """Gets the map of this MapAdvancedSettings.  # noqa: E501


        :return: The map of this MapAdvancedSettings.  # noqa: E501
        :rtype: MapSettings
        """
        return self._map

    @map.setter
    def map(self, map):
        """Sets the map of this MapAdvancedSettings.


        :param map: The map of this MapAdvancedSettings.  # noqa: E501
        :type: MapSettings
        """

        self._map = map

    @property
    def search_geocoding(self):
        """Gets the search_geocoding of this MapAdvancedSettings.  # noqa: E501


        :return: The search_geocoding of this MapAdvancedSettings.  # noqa: E501
        :rtype: SearchGeocodingSettings
        """
        return self._search_geocoding

    @search_geocoding.setter
    def search_geocoding(self, search_geocoding):
        """Sets the search_geocoding of this MapAdvancedSettings.


        :param search_geocoding: The search_geocoding of this MapAdvancedSettings.  # noqa: E501
        :type: SearchGeocodingSettings
        """

        self._search_geocoding = search_geocoding

    @property
    def thematic_analysis(self):
        """Gets the thematic_analysis of this MapAdvancedSettings.  # noqa: E501


        :return: The thematic_analysis of this MapAdvancedSettings.  # noqa: E501
        :rtype: ThematicAnalysisSettings
        """
        return self._thematic_analysis

    @thematic_analysis.setter
    def thematic_analysis(self, thematic_analysis):
        """Sets the thematic_analysis of this MapAdvancedSettings.


        :param thematic_analysis: The thematic_analysis of this MapAdvancedSettings.  # noqa: E501
        :type: ThematicAnalysisSettings
        """

        self._thematic_analysis = thematic_analysis

    @property
    def legend(self):
        """Gets the legend of this MapAdvancedSettings.  # noqa: E501


        :return: The legend of this MapAdvancedSettings.  # noqa: E501
        :rtype: LegendSettings
        """
        return self._legend

    @legend.setter
    def legend(self, legend):
        """Sets the legend of this MapAdvancedSettings.


        :param legend: The legend of this MapAdvancedSettings.  # noqa: E501
        :type: LegendSettings
        """

        self._legend = legend

    @property
    def feedback_tool_settings(self):
        """Gets the feedback_tool_settings of this MapAdvancedSettings.  # noqa: E501


        :return: The feedback_tool_settings of this MapAdvancedSettings.  # noqa: E501
        :rtype: FeedbackToolSettings
        """
        return self._feedback_tool_settings

    @feedback_tool_settings.setter
    def feedback_tool_settings(self, feedback_tool_settings):
        """Sets the feedback_tool_settings of this MapAdvancedSettings.


        :param feedback_tool_settings: The feedback_tool_settings of this MapAdvancedSettings.  # noqa: E501
        :type: FeedbackToolSettings
        """

        self._feedback_tool_settings = feedback_tool_settings

    @property
    def info_tool_settings(self):
        """Gets the info_tool_settings of this MapAdvancedSettings.  # noqa: E501


        :return: The info_tool_settings of this MapAdvancedSettings.  # noqa: E501
        :rtype: InfoToolSettings
        """
        return self._info_tool_settings

    @info_tool_settings.setter
    def info_tool_settings(self, info_tool_settings):
        """Sets the info_tool_settings of this MapAdvancedSettings.


        :param info_tool_settings: The info_tool_settings of this MapAdvancedSettings.  # noqa: E501
        :type: InfoToolSettings
        """

        self._info_tool_settings = info_tool_settings

    @property
    def annotations(self):
        """Gets the annotations of this MapAdvancedSettings.  # noqa: E501


        :return: The annotations of this MapAdvancedSettings.  # noqa: E501
        :rtype: AnnotationSettings
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this MapAdvancedSettings.


        :param annotations: The annotations of this MapAdvancedSettings.  # noqa: E501
        :type: AnnotationSettings
        """

        self._annotations = annotations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MapAdvancedSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MapAdvancedSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
