# coding: utf-8

"""
    CartoVista REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FileDescription(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'upload_id': 'str',
        'name': 'str',
        'sheets': 'list[FileSheet]',
        'record_count': 'int',
        'is_layer': 'bool',
        'upload_path': 'str',
        'flat_file_layer': 'OneOfFileDescriptionFlatFileLayer',
        'flat_file_grid_layer': 'OneOfFileDescriptionFlatFileGridLayer',
        'column_numbers_to_keep': 'list[int]'
    }

    attribute_map = {
        'upload_id': 'uploadId',
        'name': 'name',
        'sheets': 'sheets',
        'record_count': 'recordCount',
        'is_layer': 'isLayer',
        'upload_path': 'uploadPath',
        'flat_file_layer': 'flatFileLayer',
        'flat_file_grid_layer': 'flatFileGridLayer',
        'column_numbers_to_keep': 'columnNumbersToKeep'
    }

    def __init__(self, upload_id=None, name=None, sheets=None, record_count=None, is_layer=None, upload_path=None, flat_file_layer=None, flat_file_grid_layer=None, column_numbers_to_keep=None):  # noqa: E501
        """FileDescription - a model defined in Swagger"""  # noqa: E501
        self._upload_id = None
        self._name = None
        self._sheets = None
        self._record_count = None
        self._is_layer = None
        self._upload_path = None
        self._flat_file_layer = None
        self._flat_file_grid_layer = None
        self._column_numbers_to_keep = None
        self.discriminator = None
        if upload_id is not None:
            self.upload_id = upload_id
        if name is not None:
            self.name = name
        if sheets is not None:
            self.sheets = sheets
        if record_count is not None:
            self.record_count = record_count
        if is_layer is not None:
            self.is_layer = is_layer
        if upload_path is not None:
            self.upload_path = upload_path
        if flat_file_layer is not None:
            self.flat_file_layer = flat_file_layer
        if flat_file_grid_layer is not None:
            self.flat_file_grid_layer = flat_file_grid_layer
        if column_numbers_to_keep is not None:
            self.column_numbers_to_keep = column_numbers_to_keep

    @property
    def upload_id(self):
        """Gets the upload_id of this FileDescription.  # noqa: E501


        :return: The upload_id of this FileDescription.  # noqa: E501
        :rtype: str
        """
        return self._upload_id

    @upload_id.setter
    def upload_id(self, upload_id):
        """Sets the upload_id of this FileDescription.


        :param upload_id: The upload_id of this FileDescription.  # noqa: E501
        :type: str
        """

        self._upload_id = upload_id

    @property
    def name(self):
        """Gets the name of this FileDescription.  # noqa: E501


        :return: The name of this FileDescription.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FileDescription.


        :param name: The name of this FileDescription.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def sheets(self):
        """Gets the sheets of this FileDescription.  # noqa: E501


        :return: The sheets of this FileDescription.  # noqa: E501
        :rtype: list[FileSheet]
        """
        return self._sheets

    @sheets.setter
    def sheets(self, sheets):
        """Sets the sheets of this FileDescription.


        :param sheets: The sheets of this FileDescription.  # noqa: E501
        :type: list[FileSheet]
        """

        self._sheets = sheets

    @property
    def record_count(self):
        """Gets the record_count of this FileDescription.  # noqa: E501


        :return: The record_count of this FileDescription.  # noqa: E501
        :rtype: int
        """
        return self._record_count

    @record_count.setter
    def record_count(self, record_count):
        """Sets the record_count of this FileDescription.


        :param record_count: The record_count of this FileDescription.  # noqa: E501
        :type: int
        """

        self._record_count = record_count

    @property
    def is_layer(self):
        """Gets the is_layer of this FileDescription.  # noqa: E501


        :return: The is_layer of this FileDescription.  # noqa: E501
        :rtype: bool
        """
        return self._is_layer

    @is_layer.setter
    def is_layer(self, is_layer):
        """Sets the is_layer of this FileDescription.


        :param is_layer: The is_layer of this FileDescription.  # noqa: E501
        :type: bool
        """

        self._is_layer = is_layer

    @property
    def upload_path(self):
        """Gets the upload_path of this FileDescription.  # noqa: E501


        :return: The upload_path of this FileDescription.  # noqa: E501
        :rtype: str
        """
        return self._upload_path

    @upload_path.setter
    def upload_path(self, upload_path):
        """Sets the upload_path of this FileDescription.


        :param upload_path: The upload_path of this FileDescription.  # noqa: E501
        :type: str
        """

        self._upload_path = upload_path

    @property
    def flat_file_layer(self):
        """Gets the flat_file_layer of this FileDescription.  # noqa: E501


        :return: The flat_file_layer of this FileDescription.  # noqa: E501
        :rtype: OneOfFileDescriptionFlatFileLayer
        """
        return self._flat_file_layer

    @flat_file_layer.setter
    def flat_file_layer(self, flat_file_layer):
        """Sets the flat_file_layer of this FileDescription.


        :param flat_file_layer: The flat_file_layer of this FileDescription.  # noqa: E501
        :type: OneOfFileDescriptionFlatFileLayer
        """

        self._flat_file_layer = flat_file_layer

    @property
    def flat_file_grid_layer(self):
        """Gets the flat_file_grid_layer of this FileDescription.  # noqa: E501


        :return: The flat_file_grid_layer of this FileDescription.  # noqa: E501
        :rtype: OneOfFileDescriptionFlatFileGridLayer
        """
        return self._flat_file_grid_layer

    @flat_file_grid_layer.setter
    def flat_file_grid_layer(self, flat_file_grid_layer):
        """Sets the flat_file_grid_layer of this FileDescription.


        :param flat_file_grid_layer: The flat_file_grid_layer of this FileDescription.  # noqa: E501
        :type: OneOfFileDescriptionFlatFileGridLayer
        """

        self._flat_file_grid_layer = flat_file_grid_layer

    @property
    def column_numbers_to_keep(self):
        """Gets the column_numbers_to_keep of this FileDescription.  # noqa: E501


        :return: The column_numbers_to_keep of this FileDescription.  # noqa: E501
        :rtype: list[int]
        """
        return self._column_numbers_to_keep

    @column_numbers_to_keep.setter
    def column_numbers_to_keep(self, column_numbers_to_keep):
        """Sets the column_numbers_to_keep of this FileDescription.


        :param column_numbers_to_keep: The column_numbers_to_keep of this FileDescription.  # noqa: E501
        :type: list[int]
        """

        self._column_numbers_to_keep = column_numbers_to_keep

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FileDescription, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileDescription):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
