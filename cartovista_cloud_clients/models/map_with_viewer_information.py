# coding: utf-8

"""
    CartoVista REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MapWithViewerInformation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'map': 'Map',
        'slides': 'list[Slide]',
        'toolbar': 'MapToolbar',
        'advanced_settings': 'MapAdvancedSettings',
        'layers': 'list[Layer]',
        'wmts_layers': 'list[WmtsLayer]',
        'grid_layers': 'list[GridLayer]',
        'wms_layers': 'list[WmsLayer]',
        'identities_with_access': 'list[str]',
        'has_map_action': 'bool'
    }

    attribute_map = {
        'map': 'map',
        'slides': 'slides',
        'toolbar': 'toolbar',
        'advanced_settings': 'advancedSettings',
        'layers': 'layers',
        'wmts_layers': 'wmtsLayers',
        'grid_layers': 'gridLayers',
        'wms_layers': 'wmsLayers',
        'identities_with_access': 'identitiesWithAccess',
        'has_map_action': 'hasMapAction'
    }

    def __init__(self, map=None, slides=None, toolbar=None, advanced_settings=None, layers=None, wmts_layers=None, grid_layers=None, wms_layers=None, identities_with_access=None, has_map_action=None):  # noqa: E501
        """MapWithViewerInformation - a model defined in Swagger"""  # noqa: E501
        self._map = None
        self._slides = None
        self._toolbar = None
        self._advanced_settings = None
        self._layers = None
        self._wmts_layers = None
        self._grid_layers = None
        self._wms_layers = None
        self._identities_with_access = None
        self._has_map_action = None
        self.discriminator = None
        if map is not None:
            self.map = map
        if slides is not None:
            self.slides = slides
        if toolbar is not None:
            self.toolbar = toolbar
        if advanced_settings is not None:
            self.advanced_settings = advanced_settings
        if layers is not None:
            self.layers = layers
        if wmts_layers is not None:
            self.wmts_layers = wmts_layers
        if grid_layers is not None:
            self.grid_layers = grid_layers
        if wms_layers is not None:
            self.wms_layers = wms_layers
        if identities_with_access is not None:
            self.identities_with_access = identities_with_access
        if has_map_action is not None:
            self.has_map_action = has_map_action

    @property
    def map(self):
        """Gets the map of this MapWithViewerInformation.  # noqa: E501


        :return: The map of this MapWithViewerInformation.  # noqa: E501
        :rtype: Map
        """
        return self._map

    @map.setter
    def map(self, map):
        """Sets the map of this MapWithViewerInformation.


        :param map: The map of this MapWithViewerInformation.  # noqa: E501
        :type: Map
        """

        self._map = map

    @property
    def slides(self):
        """Gets the slides of this MapWithViewerInformation.  # noqa: E501


        :return: The slides of this MapWithViewerInformation.  # noqa: E501
        :rtype: list[Slide]
        """
        return self._slides

    @slides.setter
    def slides(self, slides):
        """Sets the slides of this MapWithViewerInformation.


        :param slides: The slides of this MapWithViewerInformation.  # noqa: E501
        :type: list[Slide]
        """

        self._slides = slides

    @property
    def toolbar(self):
        """Gets the toolbar of this MapWithViewerInformation.  # noqa: E501


        :return: The toolbar of this MapWithViewerInformation.  # noqa: E501
        :rtype: MapToolbar
        """
        return self._toolbar

    @toolbar.setter
    def toolbar(self, toolbar):
        """Sets the toolbar of this MapWithViewerInformation.


        :param toolbar: The toolbar of this MapWithViewerInformation.  # noqa: E501
        :type: MapToolbar
        """

        self._toolbar = toolbar

    @property
    def advanced_settings(self):
        """Gets the advanced_settings of this MapWithViewerInformation.  # noqa: E501


        :return: The advanced_settings of this MapWithViewerInformation.  # noqa: E501
        :rtype: MapAdvancedSettings
        """
        return self._advanced_settings

    @advanced_settings.setter
    def advanced_settings(self, advanced_settings):
        """Sets the advanced_settings of this MapWithViewerInformation.


        :param advanced_settings: The advanced_settings of this MapWithViewerInformation.  # noqa: E501
        :type: MapAdvancedSettings
        """

        self._advanced_settings = advanced_settings

    @property
    def layers(self):
        """Gets the layers of this MapWithViewerInformation.  # noqa: E501


        :return: The layers of this MapWithViewerInformation.  # noqa: E501
        :rtype: list[Layer]
        """
        return self._layers

    @layers.setter
    def layers(self, layers):
        """Sets the layers of this MapWithViewerInformation.


        :param layers: The layers of this MapWithViewerInformation.  # noqa: E501
        :type: list[Layer]
        """

        self._layers = layers

    @property
    def wmts_layers(self):
        """Gets the wmts_layers of this MapWithViewerInformation.  # noqa: E501


        :return: The wmts_layers of this MapWithViewerInformation.  # noqa: E501
        :rtype: list[WmtsLayer]
        """
        return self._wmts_layers

    @wmts_layers.setter
    def wmts_layers(self, wmts_layers):
        """Sets the wmts_layers of this MapWithViewerInformation.


        :param wmts_layers: The wmts_layers of this MapWithViewerInformation.  # noqa: E501
        :type: list[WmtsLayer]
        """

        self._wmts_layers = wmts_layers

    @property
    def grid_layers(self):
        """Gets the grid_layers of this MapWithViewerInformation.  # noqa: E501


        :return: The grid_layers of this MapWithViewerInformation.  # noqa: E501
        :rtype: list[GridLayer]
        """
        return self._grid_layers

    @grid_layers.setter
    def grid_layers(self, grid_layers):
        """Sets the grid_layers of this MapWithViewerInformation.


        :param grid_layers: The grid_layers of this MapWithViewerInformation.  # noqa: E501
        :type: list[GridLayer]
        """

        self._grid_layers = grid_layers

    @property
    def wms_layers(self):
        """Gets the wms_layers of this MapWithViewerInformation.  # noqa: E501


        :return: The wms_layers of this MapWithViewerInformation.  # noqa: E501
        :rtype: list[WmsLayer]
        """
        return self._wms_layers

    @wms_layers.setter
    def wms_layers(self, wms_layers):
        """Sets the wms_layers of this MapWithViewerInformation.


        :param wms_layers: The wms_layers of this MapWithViewerInformation.  # noqa: E501
        :type: list[WmsLayer]
        """

        self._wms_layers = wms_layers

    @property
    def identities_with_access(self):
        """Gets the identities_with_access of this MapWithViewerInformation.  # noqa: E501


        :return: The identities_with_access of this MapWithViewerInformation.  # noqa: E501
        :rtype: list[str]
        """
        return self._identities_with_access

    @identities_with_access.setter
    def identities_with_access(self, identities_with_access):
        """Sets the identities_with_access of this MapWithViewerInformation.


        :param identities_with_access: The identities_with_access of this MapWithViewerInformation.  # noqa: E501
        :type: list[str]
        """

        self._identities_with_access = identities_with_access

    @property
    def has_map_action(self):
        """Gets the has_map_action of this MapWithViewerInformation.  # noqa: E501


        :return: The has_map_action of this MapWithViewerInformation.  # noqa: E501
        :rtype: bool
        """
        return self._has_map_action

    @has_map_action.setter
    def has_map_action(self, has_map_action):
        """Sets the has_map_action of this MapWithViewerInformation.


        :param has_map_action: The has_map_action of this MapWithViewerInformation.  # noqa: E501
        :type: bool
        """

        self._has_map_action = has_map_action

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MapWithViewerInformation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MapWithViewerInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
