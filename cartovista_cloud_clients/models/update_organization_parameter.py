# coding: utf-8

"""
    CartoVista REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdateOrganizationParameter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'default_language': 'LanguageEnum',
        'primary_color': 'str',
        'default_theme': 'ThemeEnum'
    }

    attribute_map = {
        'default_language': 'defaultLanguage',
        'primary_color': 'primaryColor',
        'default_theme': 'defaultTheme'
    }

    def __init__(self, default_language=None, primary_color=None, default_theme=None):  # noqa: E501
        """UpdateOrganizationParameter - a model defined in Swagger"""  # noqa: E501
        self._default_language = None
        self._primary_color = None
        self._default_theme = None
        self.discriminator = None
        if default_language is not None:
            self.default_language = default_language
        if primary_color is not None:
            self.primary_color = primary_color
        if default_theme is not None:
            self.default_theme = default_theme

    @property
    def default_language(self):
        """Gets the default_language of this UpdateOrganizationParameter.  # noqa: E501


        :return: The default_language of this UpdateOrganizationParameter.  # noqa: E501
        :rtype: LanguageEnum
        """
        return self._default_language

    @default_language.setter
    def default_language(self, default_language):
        """Sets the default_language of this UpdateOrganizationParameter.


        :param default_language: The default_language of this UpdateOrganizationParameter.  # noqa: E501
        :type: LanguageEnum
        """

        self._default_language = default_language

    @property
    def primary_color(self):
        """Gets the primary_color of this UpdateOrganizationParameter.  # noqa: E501


        :return: The primary_color of this UpdateOrganizationParameter.  # noqa: E501
        :rtype: str
        """
        return self._primary_color

    @primary_color.setter
    def primary_color(self, primary_color):
        """Sets the primary_color of this UpdateOrganizationParameter.


        :param primary_color: The primary_color of this UpdateOrganizationParameter.  # noqa: E501
        :type: str
        """

        self._primary_color = primary_color

    @property
    def default_theme(self):
        """Gets the default_theme of this UpdateOrganizationParameter.  # noqa: E501


        :return: The default_theme of this UpdateOrganizationParameter.  # noqa: E501
        :rtype: ThemeEnum
        """
        return self._default_theme

    @default_theme.setter
    def default_theme(self, default_theme):
        """Sets the default_theme of this UpdateOrganizationParameter.


        :param default_theme: The default_theme of this UpdateOrganizationParameter.  # noqa: E501
        :type: ThemeEnum
        """

        self._default_theme = default_theme

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateOrganizationParameter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateOrganizationParameter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
