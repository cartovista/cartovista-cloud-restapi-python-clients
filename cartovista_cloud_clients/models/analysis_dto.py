# coding: utf-8

"""
    CartoVista REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AnalysisDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'is_dirty': 'bool',
        'creation_time': 'datetime',
        'modified_time': 'datetime',
        'spatial_metadata_id': 'str',
        'map_id': 'str',
        'data_table_join_id': 'str',
        'score_data_column_id': 'str',
        'has_modify_permission': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'is_dirty': 'isDirty',
        'creation_time': 'creationTime',
        'modified_time': 'modifiedTime',
        'spatial_metadata_id': 'spatialMetadataId',
        'map_id': 'mapId',
        'data_table_join_id': 'dataTableJoinId',
        'score_data_column_id': 'scoreDataColumnId',
        'has_modify_permission': 'hasModifyPermission'
    }

    def __init__(self, id=None, name=None, is_dirty=None, creation_time=None, modified_time=None, spatial_metadata_id=None, map_id=None, data_table_join_id=None, score_data_column_id=None, has_modify_permission=None):  # noqa: E501
        """AnalysisDTO - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._is_dirty = None
        self._creation_time = None
        self._modified_time = None
        self._spatial_metadata_id = None
        self._map_id = None
        self._data_table_join_id = None
        self._score_data_column_id = None
        self._has_modify_permission = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if is_dirty is not None:
            self.is_dirty = is_dirty
        if creation_time is not None:
            self.creation_time = creation_time
        if modified_time is not None:
            self.modified_time = modified_time
        if spatial_metadata_id is not None:
            self.spatial_metadata_id = spatial_metadata_id
        if map_id is not None:
            self.map_id = map_id
        if data_table_join_id is not None:
            self.data_table_join_id = data_table_join_id
        if score_data_column_id is not None:
            self.score_data_column_id = score_data_column_id
        if has_modify_permission is not None:
            self.has_modify_permission = has_modify_permission

    @property
    def id(self):
        """Gets the id of this AnalysisDTO.  # noqa: E501


        :return: The id of this AnalysisDTO.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AnalysisDTO.


        :param id: The id of this AnalysisDTO.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this AnalysisDTO.  # noqa: E501


        :return: The name of this AnalysisDTO.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AnalysisDTO.


        :param name: The name of this AnalysisDTO.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def is_dirty(self):
        """Gets the is_dirty of this AnalysisDTO.  # noqa: E501


        :return: The is_dirty of this AnalysisDTO.  # noqa: E501
        :rtype: bool
        """
        return self._is_dirty

    @is_dirty.setter
    def is_dirty(self, is_dirty):
        """Sets the is_dirty of this AnalysisDTO.


        :param is_dirty: The is_dirty of this AnalysisDTO.  # noqa: E501
        :type: bool
        """

        self._is_dirty = is_dirty

    @property
    def creation_time(self):
        """Gets the creation_time of this AnalysisDTO.  # noqa: E501


        :return: The creation_time of this AnalysisDTO.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this AnalysisDTO.


        :param creation_time: The creation_time of this AnalysisDTO.  # noqa: E501
        :type: datetime
        """

        self._creation_time = creation_time

    @property
    def modified_time(self):
        """Gets the modified_time of this AnalysisDTO.  # noqa: E501


        :return: The modified_time of this AnalysisDTO.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_time

    @modified_time.setter
    def modified_time(self, modified_time):
        """Sets the modified_time of this AnalysisDTO.


        :param modified_time: The modified_time of this AnalysisDTO.  # noqa: E501
        :type: datetime
        """

        self._modified_time = modified_time

    @property
    def spatial_metadata_id(self):
        """Gets the spatial_metadata_id of this AnalysisDTO.  # noqa: E501


        :return: The spatial_metadata_id of this AnalysisDTO.  # noqa: E501
        :rtype: str
        """
        return self._spatial_metadata_id

    @spatial_metadata_id.setter
    def spatial_metadata_id(self, spatial_metadata_id):
        """Sets the spatial_metadata_id of this AnalysisDTO.


        :param spatial_metadata_id: The spatial_metadata_id of this AnalysisDTO.  # noqa: E501
        :type: str
        """

        self._spatial_metadata_id = spatial_metadata_id

    @property
    def map_id(self):
        """Gets the map_id of this AnalysisDTO.  # noqa: E501


        :return: The map_id of this AnalysisDTO.  # noqa: E501
        :rtype: str
        """
        return self._map_id

    @map_id.setter
    def map_id(self, map_id):
        """Sets the map_id of this AnalysisDTO.


        :param map_id: The map_id of this AnalysisDTO.  # noqa: E501
        :type: str
        """

        self._map_id = map_id

    @property
    def data_table_join_id(self):
        """Gets the data_table_join_id of this AnalysisDTO.  # noqa: E501


        :return: The data_table_join_id of this AnalysisDTO.  # noqa: E501
        :rtype: str
        """
        return self._data_table_join_id

    @data_table_join_id.setter
    def data_table_join_id(self, data_table_join_id):
        """Sets the data_table_join_id of this AnalysisDTO.


        :param data_table_join_id: The data_table_join_id of this AnalysisDTO.  # noqa: E501
        :type: str
        """

        self._data_table_join_id = data_table_join_id

    @property
    def score_data_column_id(self):
        """Gets the score_data_column_id of this AnalysisDTO.  # noqa: E501


        :return: The score_data_column_id of this AnalysisDTO.  # noqa: E501
        :rtype: str
        """
        return self._score_data_column_id

    @score_data_column_id.setter
    def score_data_column_id(self, score_data_column_id):
        """Sets the score_data_column_id of this AnalysisDTO.


        :param score_data_column_id: The score_data_column_id of this AnalysisDTO.  # noqa: E501
        :type: str
        """

        self._score_data_column_id = score_data_column_id

    @property
    def has_modify_permission(self):
        """Gets the has_modify_permission of this AnalysisDTO.  # noqa: E501


        :return: The has_modify_permission of this AnalysisDTO.  # noqa: E501
        :rtype: bool
        """
        return self._has_modify_permission

    @has_modify_permission.setter
    def has_modify_permission(self, has_modify_permission):
        """Sets the has_modify_permission of this AnalysisDTO.


        :param has_modify_permission: The has_modify_permission of this AnalysisDTO.  # noqa: E501
        :type: bool
        """

        self._has_modify_permission = has_modify_permission

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AnalysisDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnalysisDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
