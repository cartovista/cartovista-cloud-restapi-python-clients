# coding: utf-8

"""
    CartoVista REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TerritoryUpdateConflicts(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'scenario_id': 'str',
        'pos_id': 'str',
        'official_conflicts': 'TerritoryPosConflicts',
        'prospective_conflicts': 'TerritoryPosConflicts',
        'inactive_conflicts': 'TerritoryPosConflicts',
        'implantation_conflicts': 'TerritoryPosConflicts',
        'unresolvable_conflicts': 'TerritoryPosConflicts'
    }

    attribute_map = {
        'scenario_id': 'scenarioId',
        'pos_id': 'posId',
        'official_conflicts': 'officialConflicts',
        'prospective_conflicts': 'prospectiveConflicts',
        'inactive_conflicts': 'inactiveConflicts',
        'implantation_conflicts': 'implantationConflicts',
        'unresolvable_conflicts': 'unresolvableConflicts'
    }

    def __init__(self, scenario_id=None, pos_id=None, official_conflicts=None, prospective_conflicts=None, inactive_conflicts=None, implantation_conflicts=None, unresolvable_conflicts=None):  # noqa: E501
        """TerritoryUpdateConflicts - a model defined in Swagger"""  # noqa: E501
        self._scenario_id = None
        self._pos_id = None
        self._official_conflicts = None
        self._prospective_conflicts = None
        self._inactive_conflicts = None
        self._implantation_conflicts = None
        self._unresolvable_conflicts = None
        self.discriminator = None
        if scenario_id is not None:
            self.scenario_id = scenario_id
        if pos_id is not None:
            self.pos_id = pos_id
        if official_conflicts is not None:
            self.official_conflicts = official_conflicts
        if prospective_conflicts is not None:
            self.prospective_conflicts = prospective_conflicts
        if inactive_conflicts is not None:
            self.inactive_conflicts = inactive_conflicts
        if implantation_conflicts is not None:
            self.implantation_conflicts = implantation_conflicts
        if unresolvable_conflicts is not None:
            self.unresolvable_conflicts = unresolvable_conflicts

    @property
    def scenario_id(self):
        """Gets the scenario_id of this TerritoryUpdateConflicts.  # noqa: E501


        :return: The scenario_id of this TerritoryUpdateConflicts.  # noqa: E501
        :rtype: str
        """
        return self._scenario_id

    @scenario_id.setter
    def scenario_id(self, scenario_id):
        """Sets the scenario_id of this TerritoryUpdateConflicts.


        :param scenario_id: The scenario_id of this TerritoryUpdateConflicts.  # noqa: E501
        :type: str
        """

        self._scenario_id = scenario_id

    @property
    def pos_id(self):
        """Gets the pos_id of this TerritoryUpdateConflicts.  # noqa: E501


        :return: The pos_id of this TerritoryUpdateConflicts.  # noqa: E501
        :rtype: str
        """
        return self._pos_id

    @pos_id.setter
    def pos_id(self, pos_id):
        """Sets the pos_id of this TerritoryUpdateConflicts.


        :param pos_id: The pos_id of this TerritoryUpdateConflicts.  # noqa: E501
        :type: str
        """

        self._pos_id = pos_id

    @property
    def official_conflicts(self):
        """Gets the official_conflicts of this TerritoryUpdateConflicts.  # noqa: E501


        :return: The official_conflicts of this TerritoryUpdateConflicts.  # noqa: E501
        :rtype: TerritoryPosConflicts
        """
        return self._official_conflicts

    @official_conflicts.setter
    def official_conflicts(self, official_conflicts):
        """Sets the official_conflicts of this TerritoryUpdateConflicts.


        :param official_conflicts: The official_conflicts of this TerritoryUpdateConflicts.  # noqa: E501
        :type: TerritoryPosConflicts
        """

        self._official_conflicts = official_conflicts

    @property
    def prospective_conflicts(self):
        """Gets the prospective_conflicts of this TerritoryUpdateConflicts.  # noqa: E501


        :return: The prospective_conflicts of this TerritoryUpdateConflicts.  # noqa: E501
        :rtype: TerritoryPosConflicts
        """
        return self._prospective_conflicts

    @prospective_conflicts.setter
    def prospective_conflicts(self, prospective_conflicts):
        """Sets the prospective_conflicts of this TerritoryUpdateConflicts.


        :param prospective_conflicts: The prospective_conflicts of this TerritoryUpdateConflicts.  # noqa: E501
        :type: TerritoryPosConflicts
        """

        self._prospective_conflicts = prospective_conflicts

    @property
    def inactive_conflicts(self):
        """Gets the inactive_conflicts of this TerritoryUpdateConflicts.  # noqa: E501


        :return: The inactive_conflicts of this TerritoryUpdateConflicts.  # noqa: E501
        :rtype: TerritoryPosConflicts
        """
        return self._inactive_conflicts

    @inactive_conflicts.setter
    def inactive_conflicts(self, inactive_conflicts):
        """Sets the inactive_conflicts of this TerritoryUpdateConflicts.


        :param inactive_conflicts: The inactive_conflicts of this TerritoryUpdateConflicts.  # noqa: E501
        :type: TerritoryPosConflicts
        """

        self._inactive_conflicts = inactive_conflicts

    @property
    def implantation_conflicts(self):
        """Gets the implantation_conflicts of this TerritoryUpdateConflicts.  # noqa: E501


        :return: The implantation_conflicts of this TerritoryUpdateConflicts.  # noqa: E501
        :rtype: TerritoryPosConflicts
        """
        return self._implantation_conflicts

    @implantation_conflicts.setter
    def implantation_conflicts(self, implantation_conflicts):
        """Sets the implantation_conflicts of this TerritoryUpdateConflicts.


        :param implantation_conflicts: The implantation_conflicts of this TerritoryUpdateConflicts.  # noqa: E501
        :type: TerritoryPosConflicts
        """

        self._implantation_conflicts = implantation_conflicts

    @property
    def unresolvable_conflicts(self):
        """Gets the unresolvable_conflicts of this TerritoryUpdateConflicts.  # noqa: E501


        :return: The unresolvable_conflicts of this TerritoryUpdateConflicts.  # noqa: E501
        :rtype: TerritoryPosConflicts
        """
        return self._unresolvable_conflicts

    @unresolvable_conflicts.setter
    def unresolvable_conflicts(self, unresolvable_conflicts):
        """Sets the unresolvable_conflicts of this TerritoryUpdateConflicts.


        :param unresolvable_conflicts: The unresolvable_conflicts of this TerritoryUpdateConflicts.  # noqa: E501
        :type: TerritoryPosConflicts
        """

        self._unresolvable_conflicts = unresolvable_conflicts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TerritoryUpdateConflicts, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TerritoryUpdateConflicts):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
