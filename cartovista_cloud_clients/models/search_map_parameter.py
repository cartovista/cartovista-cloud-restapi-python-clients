# coding: utf-8

"""
    CartoVista REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SearchMapParameter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'search': 'str',
        'include_addresses': 'bool',
        'filter_data_columns': 'dict(str, list[DataColumnDTO])'
    }

    attribute_map = {
        'search': 'search',
        'include_addresses': 'includeAddresses',
        'filter_data_columns': 'filterDataColumns'
    }

    def __init__(self, search=None, include_addresses=None, filter_data_columns=None):  # noqa: E501
        """SearchMapParameter - a model defined in Swagger"""  # noqa: E501
        self._search = None
        self._include_addresses = None
        self._filter_data_columns = None
        self.discriminator = None
        if search is not None:
            self.search = search
        if include_addresses is not None:
            self.include_addresses = include_addresses
        if filter_data_columns is not None:
            self.filter_data_columns = filter_data_columns

    @property
    def search(self):
        """Gets the search of this SearchMapParameter.  # noqa: E501


        :return: The search of this SearchMapParameter.  # noqa: E501
        :rtype: str
        """
        return self._search

    @search.setter
    def search(self, search):
        """Sets the search of this SearchMapParameter.


        :param search: The search of this SearchMapParameter.  # noqa: E501
        :type: str
        """

        self._search = search

    @property
    def include_addresses(self):
        """Gets the include_addresses of this SearchMapParameter.  # noqa: E501


        :return: The include_addresses of this SearchMapParameter.  # noqa: E501
        :rtype: bool
        """
        return self._include_addresses

    @include_addresses.setter
    def include_addresses(self, include_addresses):
        """Sets the include_addresses of this SearchMapParameter.


        :param include_addresses: The include_addresses of this SearchMapParameter.  # noqa: E501
        :type: bool
        """

        self._include_addresses = include_addresses

    @property
    def filter_data_columns(self):
        """Gets the filter_data_columns of this SearchMapParameter.  # noqa: E501


        :return: The filter_data_columns of this SearchMapParameter.  # noqa: E501
        :rtype: dict(str, list[DataColumnDTO])
        """
        return self._filter_data_columns

    @filter_data_columns.setter
    def filter_data_columns(self, filter_data_columns):
        """Sets the filter_data_columns of this SearchMapParameter.


        :param filter_data_columns: The filter_data_columns of this SearchMapParameter.  # noqa: E501
        :type: dict(str, list[DataColumnDTO])
        """

        self._filter_data_columns = filter_data_columns

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SearchMapParameter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchMapParameter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
