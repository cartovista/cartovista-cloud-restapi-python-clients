# coding: utf-8

"""
    CartoVista REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TerritoryManagerSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'max_zones': 'int',
        'area_type': 'TerritoryAreaByEnum',
        'transportation_type': 'TerritoryTransportTypeEnum',
        'consider_traffic': 'bool',
        'selection_color': 'str',
        'country': 'str',
        'maximum_nearest_for_distance_analysis': 'int',
        'maximum_distance_meters': 'int',
        'maximum_time_seconds': 'int',
        'use_urbanicity': 'bool',
        'urbanicity_column_id': 'str',
        'urbanicity_column': 'UrbanicityDataColumn',
        'urbanicity_values': 'list[TerritoryManagerUrbanicity]',
        'spatial_selection_type': 'TerritoryScenarioSpatialSelectionTypeEnum',
        'zones': 'list[TerritoryManagementZone]',
        'default_pta_zone_id': 'int',
        'default_exclusivity_zone_id': 'int',
        'default_establishment_exclusivity': 'bool',
        'default_free_mode': 'bool',
        'default_official_pta_zone_id': 'int',
        'default_official_exclusivity_zone_id': 'int',
        'default_official_establishment_exclusivity': 'bool'
    }

    attribute_map = {
        'max_zones': 'maxZones',
        'area_type': 'areaType',
        'transportation_type': 'transportationType',
        'consider_traffic': 'considerTraffic',
        'selection_color': 'selectionColor',
        'country': 'country',
        'maximum_nearest_for_distance_analysis': 'maximumNearestForDistanceAnalysis',
        'maximum_distance_meters': 'maximumDistanceMeters',
        'maximum_time_seconds': 'maximumTimeSeconds',
        'use_urbanicity': 'useUrbanicity',
        'urbanicity_column_id': 'urbanicityColumnId',
        'urbanicity_column': 'urbanicityColumn',
        'urbanicity_values': 'urbanicityValues',
        'spatial_selection_type': 'spatialSelectionType',
        'zones': 'zones',
        'default_pta_zone_id': 'defaultPtaZoneId',
        'default_exclusivity_zone_id': 'defaultExclusivityZoneId',
        'default_establishment_exclusivity': 'defaultEstablishmentExclusivity',
        'default_free_mode': 'defaultFreeMode',
        'default_official_pta_zone_id': 'defaultOfficialPtaZoneId',
        'default_official_exclusivity_zone_id': 'defaultOfficialExclusivityZoneId',
        'default_official_establishment_exclusivity': 'defaultOfficialEstablishmentExclusivity'
    }

    def __init__(self, max_zones=None, area_type=None, transportation_type=None, consider_traffic=None, selection_color=None, country=None, maximum_nearest_for_distance_analysis=None, maximum_distance_meters=None, maximum_time_seconds=None, use_urbanicity=None, urbanicity_column_id=None, urbanicity_column=None, urbanicity_values=None, spatial_selection_type=None, zones=None, default_pta_zone_id=None, default_exclusivity_zone_id=None, default_establishment_exclusivity=None, default_free_mode=None, default_official_pta_zone_id=None, default_official_exclusivity_zone_id=None, default_official_establishment_exclusivity=None):  # noqa: E501
        """TerritoryManagerSettings - a model defined in Swagger"""  # noqa: E501
        self._max_zones = None
        self._area_type = None
        self._transportation_type = None
        self._consider_traffic = None
        self._selection_color = None
        self._country = None
        self._maximum_nearest_for_distance_analysis = None
        self._maximum_distance_meters = None
        self._maximum_time_seconds = None
        self._use_urbanicity = None
        self._urbanicity_column_id = None
        self._urbanicity_column = None
        self._urbanicity_values = None
        self._spatial_selection_type = None
        self._zones = None
        self._default_pta_zone_id = None
        self._default_exclusivity_zone_id = None
        self._default_establishment_exclusivity = None
        self._default_free_mode = None
        self._default_official_pta_zone_id = None
        self._default_official_exclusivity_zone_id = None
        self._default_official_establishment_exclusivity = None
        self.discriminator = None
        if max_zones is not None:
            self.max_zones = max_zones
        if area_type is not None:
            self.area_type = area_type
        if transportation_type is not None:
            self.transportation_type = transportation_type
        if consider_traffic is not None:
            self.consider_traffic = consider_traffic
        if selection_color is not None:
            self.selection_color = selection_color
        if country is not None:
            self.country = country
        if maximum_nearest_for_distance_analysis is not None:
            self.maximum_nearest_for_distance_analysis = maximum_nearest_for_distance_analysis
        if maximum_distance_meters is not None:
            self.maximum_distance_meters = maximum_distance_meters
        if maximum_time_seconds is not None:
            self.maximum_time_seconds = maximum_time_seconds
        if use_urbanicity is not None:
            self.use_urbanicity = use_urbanicity
        if urbanicity_column_id is not None:
            self.urbanicity_column_id = urbanicity_column_id
        if urbanicity_column is not None:
            self.urbanicity_column = urbanicity_column
        if urbanicity_values is not None:
            self.urbanicity_values = urbanicity_values
        if spatial_selection_type is not None:
            self.spatial_selection_type = spatial_selection_type
        if zones is not None:
            self.zones = zones
        if default_pta_zone_id is not None:
            self.default_pta_zone_id = default_pta_zone_id
        if default_exclusivity_zone_id is not None:
            self.default_exclusivity_zone_id = default_exclusivity_zone_id
        if default_establishment_exclusivity is not None:
            self.default_establishment_exclusivity = default_establishment_exclusivity
        if default_free_mode is not None:
            self.default_free_mode = default_free_mode
        if default_official_pta_zone_id is not None:
            self.default_official_pta_zone_id = default_official_pta_zone_id
        if default_official_exclusivity_zone_id is not None:
            self.default_official_exclusivity_zone_id = default_official_exclusivity_zone_id
        if default_official_establishment_exclusivity is not None:
            self.default_official_establishment_exclusivity = default_official_establishment_exclusivity

    @property
    def max_zones(self):
        """Gets the max_zones of this TerritoryManagerSettings.  # noqa: E501


        :return: The max_zones of this TerritoryManagerSettings.  # noqa: E501
        :rtype: int
        """
        return self._max_zones

    @max_zones.setter
    def max_zones(self, max_zones):
        """Sets the max_zones of this TerritoryManagerSettings.


        :param max_zones: The max_zones of this TerritoryManagerSettings.  # noqa: E501
        :type: int
        """

        self._max_zones = max_zones

    @property
    def area_type(self):
        """Gets the area_type of this TerritoryManagerSettings.  # noqa: E501


        :return: The area_type of this TerritoryManagerSettings.  # noqa: E501
        :rtype: TerritoryAreaByEnum
        """
        return self._area_type

    @area_type.setter
    def area_type(self, area_type):
        """Sets the area_type of this TerritoryManagerSettings.


        :param area_type: The area_type of this TerritoryManagerSettings.  # noqa: E501
        :type: TerritoryAreaByEnum
        """

        self._area_type = area_type

    @property
    def transportation_type(self):
        """Gets the transportation_type of this TerritoryManagerSettings.  # noqa: E501


        :return: The transportation_type of this TerritoryManagerSettings.  # noqa: E501
        :rtype: TerritoryTransportTypeEnum
        """
        return self._transportation_type

    @transportation_type.setter
    def transportation_type(self, transportation_type):
        """Sets the transportation_type of this TerritoryManagerSettings.


        :param transportation_type: The transportation_type of this TerritoryManagerSettings.  # noqa: E501
        :type: TerritoryTransportTypeEnum
        """

        self._transportation_type = transportation_type

    @property
    def consider_traffic(self):
        """Gets the consider_traffic of this TerritoryManagerSettings.  # noqa: E501


        :return: The consider_traffic of this TerritoryManagerSettings.  # noqa: E501
        :rtype: bool
        """
        return self._consider_traffic

    @consider_traffic.setter
    def consider_traffic(self, consider_traffic):
        """Sets the consider_traffic of this TerritoryManagerSettings.


        :param consider_traffic: The consider_traffic of this TerritoryManagerSettings.  # noqa: E501
        :type: bool
        """

        self._consider_traffic = consider_traffic

    @property
    def selection_color(self):
        """Gets the selection_color of this TerritoryManagerSettings.  # noqa: E501


        :return: The selection_color of this TerritoryManagerSettings.  # noqa: E501
        :rtype: str
        """
        return self._selection_color

    @selection_color.setter
    def selection_color(self, selection_color):
        """Sets the selection_color of this TerritoryManagerSettings.


        :param selection_color: The selection_color of this TerritoryManagerSettings.  # noqa: E501
        :type: str
        """

        self._selection_color = selection_color

    @property
    def country(self):
        """Gets the country of this TerritoryManagerSettings.  # noqa: E501


        :return: The country of this TerritoryManagerSettings.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this TerritoryManagerSettings.


        :param country: The country of this TerritoryManagerSettings.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def maximum_nearest_for_distance_analysis(self):
        """Gets the maximum_nearest_for_distance_analysis of this TerritoryManagerSettings.  # noqa: E501


        :return: The maximum_nearest_for_distance_analysis of this TerritoryManagerSettings.  # noqa: E501
        :rtype: int
        """
        return self._maximum_nearest_for_distance_analysis

    @maximum_nearest_for_distance_analysis.setter
    def maximum_nearest_for_distance_analysis(self, maximum_nearest_for_distance_analysis):
        """Sets the maximum_nearest_for_distance_analysis of this TerritoryManagerSettings.


        :param maximum_nearest_for_distance_analysis: The maximum_nearest_for_distance_analysis of this TerritoryManagerSettings.  # noqa: E501
        :type: int
        """

        self._maximum_nearest_for_distance_analysis = maximum_nearest_for_distance_analysis

    @property
    def maximum_distance_meters(self):
        """Gets the maximum_distance_meters of this TerritoryManagerSettings.  # noqa: E501


        :return: The maximum_distance_meters of this TerritoryManagerSettings.  # noqa: E501
        :rtype: int
        """
        return self._maximum_distance_meters

    @maximum_distance_meters.setter
    def maximum_distance_meters(self, maximum_distance_meters):
        """Sets the maximum_distance_meters of this TerritoryManagerSettings.


        :param maximum_distance_meters: The maximum_distance_meters of this TerritoryManagerSettings.  # noqa: E501
        :type: int
        """

        self._maximum_distance_meters = maximum_distance_meters

    @property
    def maximum_time_seconds(self):
        """Gets the maximum_time_seconds of this TerritoryManagerSettings.  # noqa: E501


        :return: The maximum_time_seconds of this TerritoryManagerSettings.  # noqa: E501
        :rtype: int
        """
        return self._maximum_time_seconds

    @maximum_time_seconds.setter
    def maximum_time_seconds(self, maximum_time_seconds):
        """Sets the maximum_time_seconds of this TerritoryManagerSettings.


        :param maximum_time_seconds: The maximum_time_seconds of this TerritoryManagerSettings.  # noqa: E501
        :type: int
        """

        self._maximum_time_seconds = maximum_time_seconds

    @property
    def use_urbanicity(self):
        """Gets the use_urbanicity of this TerritoryManagerSettings.  # noqa: E501


        :return: The use_urbanicity of this TerritoryManagerSettings.  # noqa: E501
        :rtype: bool
        """
        return self._use_urbanicity

    @use_urbanicity.setter
    def use_urbanicity(self, use_urbanicity):
        """Sets the use_urbanicity of this TerritoryManagerSettings.


        :param use_urbanicity: The use_urbanicity of this TerritoryManagerSettings.  # noqa: E501
        :type: bool
        """

        self._use_urbanicity = use_urbanicity

    @property
    def urbanicity_column_id(self):
        """Gets the urbanicity_column_id of this TerritoryManagerSettings.  # noqa: E501


        :return: The urbanicity_column_id of this TerritoryManagerSettings.  # noqa: E501
        :rtype: str
        """
        return self._urbanicity_column_id

    @urbanicity_column_id.setter
    def urbanicity_column_id(self, urbanicity_column_id):
        """Sets the urbanicity_column_id of this TerritoryManagerSettings.


        :param urbanicity_column_id: The urbanicity_column_id of this TerritoryManagerSettings.  # noqa: E501
        :type: str
        """

        self._urbanicity_column_id = urbanicity_column_id

    @property
    def urbanicity_column(self):
        """Gets the urbanicity_column of this TerritoryManagerSettings.  # noqa: E501


        :return: The urbanicity_column of this TerritoryManagerSettings.  # noqa: E501
        :rtype: UrbanicityDataColumn
        """
        return self._urbanicity_column

    @urbanicity_column.setter
    def urbanicity_column(self, urbanicity_column):
        """Sets the urbanicity_column of this TerritoryManagerSettings.


        :param urbanicity_column: The urbanicity_column of this TerritoryManagerSettings.  # noqa: E501
        :type: UrbanicityDataColumn
        """

        self._urbanicity_column = urbanicity_column

    @property
    def urbanicity_values(self):
        """Gets the urbanicity_values of this TerritoryManagerSettings.  # noqa: E501


        :return: The urbanicity_values of this TerritoryManagerSettings.  # noqa: E501
        :rtype: list[TerritoryManagerUrbanicity]
        """
        return self._urbanicity_values

    @urbanicity_values.setter
    def urbanicity_values(self, urbanicity_values):
        """Sets the urbanicity_values of this TerritoryManagerSettings.


        :param urbanicity_values: The urbanicity_values of this TerritoryManagerSettings.  # noqa: E501
        :type: list[TerritoryManagerUrbanicity]
        """

        self._urbanicity_values = urbanicity_values

    @property
    def spatial_selection_type(self):
        """Gets the spatial_selection_type of this TerritoryManagerSettings.  # noqa: E501


        :return: The spatial_selection_type of this TerritoryManagerSettings.  # noqa: E501
        :rtype: TerritoryScenarioSpatialSelectionTypeEnum
        """
        return self._spatial_selection_type

    @spatial_selection_type.setter
    def spatial_selection_type(self, spatial_selection_type):
        """Sets the spatial_selection_type of this TerritoryManagerSettings.


        :param spatial_selection_type: The spatial_selection_type of this TerritoryManagerSettings.  # noqa: E501
        :type: TerritoryScenarioSpatialSelectionTypeEnum
        """

        self._spatial_selection_type = spatial_selection_type

    @property
    def zones(self):
        """Gets the zones of this TerritoryManagerSettings.  # noqa: E501


        :return: The zones of this TerritoryManagerSettings.  # noqa: E501
        :rtype: list[TerritoryManagementZone]
        """
        return self._zones

    @zones.setter
    def zones(self, zones):
        """Sets the zones of this TerritoryManagerSettings.


        :param zones: The zones of this TerritoryManagerSettings.  # noqa: E501
        :type: list[TerritoryManagementZone]
        """

        self._zones = zones

    @property
    def default_pta_zone_id(self):
        """Gets the default_pta_zone_id of this TerritoryManagerSettings.  # noqa: E501


        :return: The default_pta_zone_id of this TerritoryManagerSettings.  # noqa: E501
        :rtype: int
        """
        return self._default_pta_zone_id

    @default_pta_zone_id.setter
    def default_pta_zone_id(self, default_pta_zone_id):
        """Sets the default_pta_zone_id of this TerritoryManagerSettings.


        :param default_pta_zone_id: The default_pta_zone_id of this TerritoryManagerSettings.  # noqa: E501
        :type: int
        """

        self._default_pta_zone_id = default_pta_zone_id

    @property
    def default_exclusivity_zone_id(self):
        """Gets the default_exclusivity_zone_id of this TerritoryManagerSettings.  # noqa: E501


        :return: The default_exclusivity_zone_id of this TerritoryManagerSettings.  # noqa: E501
        :rtype: int
        """
        return self._default_exclusivity_zone_id

    @default_exclusivity_zone_id.setter
    def default_exclusivity_zone_id(self, default_exclusivity_zone_id):
        """Sets the default_exclusivity_zone_id of this TerritoryManagerSettings.


        :param default_exclusivity_zone_id: The default_exclusivity_zone_id of this TerritoryManagerSettings.  # noqa: E501
        :type: int
        """

        self._default_exclusivity_zone_id = default_exclusivity_zone_id

    @property
    def default_establishment_exclusivity(self):
        """Gets the default_establishment_exclusivity of this TerritoryManagerSettings.  # noqa: E501


        :return: The default_establishment_exclusivity of this TerritoryManagerSettings.  # noqa: E501
        :rtype: bool
        """
        return self._default_establishment_exclusivity

    @default_establishment_exclusivity.setter
    def default_establishment_exclusivity(self, default_establishment_exclusivity):
        """Sets the default_establishment_exclusivity of this TerritoryManagerSettings.


        :param default_establishment_exclusivity: The default_establishment_exclusivity of this TerritoryManagerSettings.  # noqa: E501
        :type: bool
        """

        self._default_establishment_exclusivity = default_establishment_exclusivity

    @property
    def default_free_mode(self):
        """Gets the default_free_mode of this TerritoryManagerSettings.  # noqa: E501


        :return: The default_free_mode of this TerritoryManagerSettings.  # noqa: E501
        :rtype: bool
        """
        return self._default_free_mode

    @default_free_mode.setter
    def default_free_mode(self, default_free_mode):
        """Sets the default_free_mode of this TerritoryManagerSettings.


        :param default_free_mode: The default_free_mode of this TerritoryManagerSettings.  # noqa: E501
        :type: bool
        """

        self._default_free_mode = default_free_mode

    @property
    def default_official_pta_zone_id(self):
        """Gets the default_official_pta_zone_id of this TerritoryManagerSettings.  # noqa: E501


        :return: The default_official_pta_zone_id of this TerritoryManagerSettings.  # noqa: E501
        :rtype: int
        """
        return self._default_official_pta_zone_id

    @default_official_pta_zone_id.setter
    def default_official_pta_zone_id(self, default_official_pta_zone_id):
        """Sets the default_official_pta_zone_id of this TerritoryManagerSettings.


        :param default_official_pta_zone_id: The default_official_pta_zone_id of this TerritoryManagerSettings.  # noqa: E501
        :type: int
        """

        self._default_official_pta_zone_id = default_official_pta_zone_id

    @property
    def default_official_exclusivity_zone_id(self):
        """Gets the default_official_exclusivity_zone_id of this TerritoryManagerSettings.  # noqa: E501


        :return: The default_official_exclusivity_zone_id of this TerritoryManagerSettings.  # noqa: E501
        :rtype: int
        """
        return self._default_official_exclusivity_zone_id

    @default_official_exclusivity_zone_id.setter
    def default_official_exclusivity_zone_id(self, default_official_exclusivity_zone_id):
        """Sets the default_official_exclusivity_zone_id of this TerritoryManagerSettings.


        :param default_official_exclusivity_zone_id: The default_official_exclusivity_zone_id of this TerritoryManagerSettings.  # noqa: E501
        :type: int
        """

        self._default_official_exclusivity_zone_id = default_official_exclusivity_zone_id

    @property
    def default_official_establishment_exclusivity(self):
        """Gets the default_official_establishment_exclusivity of this TerritoryManagerSettings.  # noqa: E501


        :return: The default_official_establishment_exclusivity of this TerritoryManagerSettings.  # noqa: E501
        :rtype: bool
        """
        return self._default_official_establishment_exclusivity

    @default_official_establishment_exclusivity.setter
    def default_official_establishment_exclusivity(self, default_official_establishment_exclusivity):
        """Sets the default_official_establishment_exclusivity of this TerritoryManagerSettings.


        :param default_official_establishment_exclusivity: The default_official_establishment_exclusivity of this TerritoryManagerSettings.  # noqa: E501
        :type: bool
        """

        self._default_official_establishment_exclusivity = default_official_establishment_exclusivity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TerritoryManagerSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TerritoryManagerSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
