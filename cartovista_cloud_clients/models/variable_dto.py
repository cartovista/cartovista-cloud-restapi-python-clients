# coding: utf-8

"""
    CartoVista REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VariableDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'type': 'VariableTypeEnum',
        'target_value': 'float',
        'weight': 'float',
        'range_min': 'float',
        'range_max': 'float',
        'modification_time': 'datetime',
        'creation_time': 'datetime',
        'analysis_id': 'str',
        'data_column_ids': 'list[str]',
        'default_range_min': 'float',
        'default_range_max': 'float',
        'is_user_set': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'type': 'type',
        'target_value': 'targetValue',
        'weight': 'weight',
        'range_min': 'rangeMin',
        'range_max': 'rangeMax',
        'modification_time': 'modificationTime',
        'creation_time': 'creationTime',
        'analysis_id': 'analysisId',
        'data_column_ids': 'dataColumnIds',
        'default_range_min': 'defaultRangeMin',
        'default_range_max': 'defaultRangeMax',
        'is_user_set': 'isUserSet'
    }

    def __init__(self, id=None, name=None, type=None, target_value=None, weight=None, range_min=None, range_max=None, modification_time=None, creation_time=None, analysis_id=None, data_column_ids=None, default_range_min=None, default_range_max=None, is_user_set=None):  # noqa: E501
        """VariableDTO - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._type = None
        self._target_value = None
        self._weight = None
        self._range_min = None
        self._range_max = None
        self._modification_time = None
        self._creation_time = None
        self._analysis_id = None
        self._data_column_ids = None
        self._default_range_min = None
        self._default_range_max = None
        self._is_user_set = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if target_value is not None:
            self.target_value = target_value
        if weight is not None:
            self.weight = weight
        if range_min is not None:
            self.range_min = range_min
        if range_max is not None:
            self.range_max = range_max
        if modification_time is not None:
            self.modification_time = modification_time
        if creation_time is not None:
            self.creation_time = creation_time
        if analysis_id is not None:
            self.analysis_id = analysis_id
        if data_column_ids is not None:
            self.data_column_ids = data_column_ids
        if default_range_min is not None:
            self.default_range_min = default_range_min
        if default_range_max is not None:
            self.default_range_max = default_range_max
        if is_user_set is not None:
            self.is_user_set = is_user_set

    @property
    def id(self):
        """Gets the id of this VariableDTO.  # noqa: E501


        :return: The id of this VariableDTO.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VariableDTO.


        :param id: The id of this VariableDTO.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this VariableDTO.  # noqa: E501


        :return: The name of this VariableDTO.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VariableDTO.


        :param name: The name of this VariableDTO.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this VariableDTO.  # noqa: E501


        :return: The type of this VariableDTO.  # noqa: E501
        :rtype: VariableTypeEnum
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this VariableDTO.


        :param type: The type of this VariableDTO.  # noqa: E501
        :type: VariableTypeEnum
        """

        self._type = type

    @property
    def target_value(self):
        """Gets the target_value of this VariableDTO.  # noqa: E501


        :return: The target_value of this VariableDTO.  # noqa: E501
        :rtype: float
        """
        return self._target_value

    @target_value.setter
    def target_value(self, target_value):
        """Sets the target_value of this VariableDTO.


        :param target_value: The target_value of this VariableDTO.  # noqa: E501
        :type: float
        """

        self._target_value = target_value

    @property
    def weight(self):
        """Gets the weight of this VariableDTO.  # noqa: E501


        :return: The weight of this VariableDTO.  # noqa: E501
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this VariableDTO.


        :param weight: The weight of this VariableDTO.  # noqa: E501
        :type: float
        """

        self._weight = weight

    @property
    def range_min(self):
        """Gets the range_min of this VariableDTO.  # noqa: E501


        :return: The range_min of this VariableDTO.  # noqa: E501
        :rtype: float
        """
        return self._range_min

    @range_min.setter
    def range_min(self, range_min):
        """Sets the range_min of this VariableDTO.


        :param range_min: The range_min of this VariableDTO.  # noqa: E501
        :type: float
        """

        self._range_min = range_min

    @property
    def range_max(self):
        """Gets the range_max of this VariableDTO.  # noqa: E501


        :return: The range_max of this VariableDTO.  # noqa: E501
        :rtype: float
        """
        return self._range_max

    @range_max.setter
    def range_max(self, range_max):
        """Sets the range_max of this VariableDTO.


        :param range_max: The range_max of this VariableDTO.  # noqa: E501
        :type: float
        """

        self._range_max = range_max

    @property
    def modification_time(self):
        """Gets the modification_time of this VariableDTO.  # noqa: E501


        :return: The modification_time of this VariableDTO.  # noqa: E501
        :rtype: datetime
        """
        return self._modification_time

    @modification_time.setter
    def modification_time(self, modification_time):
        """Sets the modification_time of this VariableDTO.


        :param modification_time: The modification_time of this VariableDTO.  # noqa: E501
        :type: datetime
        """

        self._modification_time = modification_time

    @property
    def creation_time(self):
        """Gets the creation_time of this VariableDTO.  # noqa: E501


        :return: The creation_time of this VariableDTO.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this VariableDTO.


        :param creation_time: The creation_time of this VariableDTO.  # noqa: E501
        :type: datetime
        """

        self._creation_time = creation_time

    @property
    def analysis_id(self):
        """Gets the analysis_id of this VariableDTO.  # noqa: E501


        :return: The analysis_id of this VariableDTO.  # noqa: E501
        :rtype: str
        """
        return self._analysis_id

    @analysis_id.setter
    def analysis_id(self, analysis_id):
        """Sets the analysis_id of this VariableDTO.


        :param analysis_id: The analysis_id of this VariableDTO.  # noqa: E501
        :type: str
        """

        self._analysis_id = analysis_id

    @property
    def data_column_ids(self):
        """Gets the data_column_ids of this VariableDTO.  # noqa: E501


        :return: The data_column_ids of this VariableDTO.  # noqa: E501
        :rtype: list[str]
        """
        return self._data_column_ids

    @data_column_ids.setter
    def data_column_ids(self, data_column_ids):
        """Sets the data_column_ids of this VariableDTO.


        :param data_column_ids: The data_column_ids of this VariableDTO.  # noqa: E501
        :type: list[str]
        """

        self._data_column_ids = data_column_ids

    @property
    def default_range_min(self):
        """Gets the default_range_min of this VariableDTO.  # noqa: E501


        :return: The default_range_min of this VariableDTO.  # noqa: E501
        :rtype: float
        """
        return self._default_range_min

    @default_range_min.setter
    def default_range_min(self, default_range_min):
        """Sets the default_range_min of this VariableDTO.


        :param default_range_min: The default_range_min of this VariableDTO.  # noqa: E501
        :type: float
        """

        self._default_range_min = default_range_min

    @property
    def default_range_max(self):
        """Gets the default_range_max of this VariableDTO.  # noqa: E501


        :return: The default_range_max of this VariableDTO.  # noqa: E501
        :rtype: float
        """
        return self._default_range_max

    @default_range_max.setter
    def default_range_max(self, default_range_max):
        """Sets the default_range_max of this VariableDTO.


        :param default_range_max: The default_range_max of this VariableDTO.  # noqa: E501
        :type: float
        """

        self._default_range_max = default_range_max

    @property
    def is_user_set(self):
        """Gets the is_user_set of this VariableDTO.  # noqa: E501


        :return: The is_user_set of this VariableDTO.  # noqa: E501
        :rtype: bool
        """
        return self._is_user_set

    @is_user_set.setter
    def is_user_set(self, is_user_set):
        """Sets the is_user_set of this VariableDTO.


        :param is_user_set: The is_user_set of this VariableDTO.  # noqa: E501
        :type: bool
        """

        self._is_user_set = is_user_set

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VariableDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VariableDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
