# coding: utf-8

"""
    CartoVista REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LayerSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'layer_id': 'str',
        'map_id': 'str',
        'alias': 'str',
        'geometry_type': 'GeometryTypeEnum',
        'geometry_style': 'object',
        'label': 'LayerSettingsLabel',
        'general': 'LayerSettingsGeneral',
        'effects': 'LayerSettingsEffects',
        'interactivity': 'LayerSettingsInteractivity',
        'rendering': 'LayerSettingsRendering',
        'visibility_ranges': 'LayerSettingsVisibilityRanges',
        'id': 'str'
    }

    attribute_map = {
        'layer_id': 'layerId',
        'map_id': 'mapId',
        'alias': 'alias',
        'geometry_type': 'geometryType',
        'geometry_style': 'geometryStyle',
        'label': 'label',
        'general': 'general',
        'effects': 'effects',
        'interactivity': 'interactivity',
        'rendering': 'rendering',
        'visibility_ranges': 'visibilityRanges',
        'id': 'id'
    }

    def __init__(self, layer_id=None, map_id=None, alias=None, geometry_type=None, geometry_style=None, label=None, general=None, effects=None, interactivity=None, rendering=None, visibility_ranges=None, id=None):  # noqa: E501
        """LayerSettings - a model defined in Swagger"""  # noqa: E501
        self._layer_id = None
        self._map_id = None
        self._alias = None
        self._geometry_type = None
        self._geometry_style = None
        self._label = None
        self._general = None
        self._effects = None
        self._interactivity = None
        self._rendering = None
        self._visibility_ranges = None
        self._id = None
        self.discriminator = None
        if layer_id is not None:
            self.layer_id = layer_id
        if map_id is not None:
            self.map_id = map_id
        if alias is not None:
            self.alias = alias
        if geometry_type is not None:
            self.geometry_type = geometry_type
        if geometry_style is not None:
            self.geometry_style = geometry_style
        if label is not None:
            self.label = label
        if general is not None:
            self.general = general
        if effects is not None:
            self.effects = effects
        if interactivity is not None:
            self.interactivity = interactivity
        if rendering is not None:
            self.rendering = rendering
        if visibility_ranges is not None:
            self.visibility_ranges = visibility_ranges
        if id is not None:
            self.id = id

    @property
    def layer_id(self):
        """Gets the layer_id of this LayerSettings.  # noqa: E501


        :return: The layer_id of this LayerSettings.  # noqa: E501
        :rtype: str
        """
        return self._layer_id

    @layer_id.setter
    def layer_id(self, layer_id):
        """Sets the layer_id of this LayerSettings.


        :param layer_id: The layer_id of this LayerSettings.  # noqa: E501
        :type: str
        """

        self._layer_id = layer_id

    @property
    def map_id(self):
        """Gets the map_id of this LayerSettings.  # noqa: E501


        :return: The map_id of this LayerSettings.  # noqa: E501
        :rtype: str
        """
        return self._map_id

    @map_id.setter
    def map_id(self, map_id):
        """Sets the map_id of this LayerSettings.


        :param map_id: The map_id of this LayerSettings.  # noqa: E501
        :type: str
        """

        self._map_id = map_id

    @property
    def alias(self):
        """Gets the alias of this LayerSettings.  # noqa: E501


        :return: The alias of this LayerSettings.  # noqa: E501
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this LayerSettings.


        :param alias: The alias of this LayerSettings.  # noqa: E501
        :type: str
        """

        self._alias = alias

    @property
    def geometry_type(self):
        """Gets the geometry_type of this LayerSettings.  # noqa: E501


        :return: The geometry_type of this LayerSettings.  # noqa: E501
        :rtype: GeometryTypeEnum
        """
        return self._geometry_type

    @geometry_type.setter
    def geometry_type(self, geometry_type):
        """Sets the geometry_type of this LayerSettings.


        :param geometry_type: The geometry_type of this LayerSettings.  # noqa: E501
        :type: GeometryTypeEnum
        """

        self._geometry_type = geometry_type

    @property
    def geometry_style(self):
        """Gets the geometry_style of this LayerSettings.  # noqa: E501


        :return: The geometry_style of this LayerSettings.  # noqa: E501
        :rtype: object
        """
        return self._geometry_style

    @geometry_style.setter
    def geometry_style(self, geometry_style):
        """Sets the geometry_style of this LayerSettings.


        :param geometry_style: The geometry_style of this LayerSettings.  # noqa: E501
        :type: object
        """

        self._geometry_style = geometry_style

    @property
    def label(self):
        """Gets the label of this LayerSettings.  # noqa: E501


        :return: The label of this LayerSettings.  # noqa: E501
        :rtype: LayerSettingsLabel
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this LayerSettings.


        :param label: The label of this LayerSettings.  # noqa: E501
        :type: LayerSettingsLabel
        """

        self._label = label

    @property
    def general(self):
        """Gets the general of this LayerSettings.  # noqa: E501


        :return: The general of this LayerSettings.  # noqa: E501
        :rtype: LayerSettingsGeneral
        """
        return self._general

    @general.setter
    def general(self, general):
        """Sets the general of this LayerSettings.


        :param general: The general of this LayerSettings.  # noqa: E501
        :type: LayerSettingsGeneral
        """

        self._general = general

    @property
    def effects(self):
        """Gets the effects of this LayerSettings.  # noqa: E501


        :return: The effects of this LayerSettings.  # noqa: E501
        :rtype: LayerSettingsEffects
        """
        return self._effects

    @effects.setter
    def effects(self, effects):
        """Sets the effects of this LayerSettings.


        :param effects: The effects of this LayerSettings.  # noqa: E501
        :type: LayerSettingsEffects
        """

        self._effects = effects

    @property
    def interactivity(self):
        """Gets the interactivity of this LayerSettings.  # noqa: E501


        :return: The interactivity of this LayerSettings.  # noqa: E501
        :rtype: LayerSettingsInteractivity
        """
        return self._interactivity

    @interactivity.setter
    def interactivity(self, interactivity):
        """Sets the interactivity of this LayerSettings.


        :param interactivity: The interactivity of this LayerSettings.  # noqa: E501
        :type: LayerSettingsInteractivity
        """

        self._interactivity = interactivity

    @property
    def rendering(self):
        """Gets the rendering of this LayerSettings.  # noqa: E501


        :return: The rendering of this LayerSettings.  # noqa: E501
        :rtype: LayerSettingsRendering
        """
        return self._rendering

    @rendering.setter
    def rendering(self, rendering):
        """Sets the rendering of this LayerSettings.


        :param rendering: The rendering of this LayerSettings.  # noqa: E501
        :type: LayerSettingsRendering
        """

        self._rendering = rendering

    @property
    def visibility_ranges(self):
        """Gets the visibility_ranges of this LayerSettings.  # noqa: E501


        :return: The visibility_ranges of this LayerSettings.  # noqa: E501
        :rtype: LayerSettingsVisibilityRanges
        """
        return self._visibility_ranges

    @visibility_ranges.setter
    def visibility_ranges(self, visibility_ranges):
        """Sets the visibility_ranges of this LayerSettings.


        :param visibility_ranges: The visibility_ranges of this LayerSettings.  # noqa: E501
        :type: LayerSettingsVisibilityRanges
        """

        self._visibility_ranges = visibility_ranges

    @property
    def id(self):
        """Gets the id of this LayerSettings.  # noqa: E501


        :return: The id of this LayerSettings.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LayerSettings.


        :param id: The id of this LayerSettings.  # noqa: E501
        :type: str
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LayerSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LayerSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
