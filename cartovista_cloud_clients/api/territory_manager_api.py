# coding: utf-8

"""
    CartoVista REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from cartovista_cloud_clients.api_client import ApiClient


class TerritoryManagerApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def territory_manager_add_zone(self, body, scenario_id, tenant_url_code, **kwargs):  # noqa: E501
        """territory_manager_add_zone  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.territory_manager_add_zone(body, scenario_id, tenant_url_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateTerritoryZoneParameter body: (required)
        :param str scenario_id: (required)
        :param str tenant_url_code: (required)
        :return: TerritoryManagementZone
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.territory_manager_add_zone_with_http_info(body, scenario_id, tenant_url_code, **kwargs)  # noqa: E501
        else:
            (data) = self.territory_manager_add_zone_with_http_info(body, scenario_id, tenant_url_code, **kwargs)  # noqa: E501
            return data

    def territory_manager_add_zone_with_http_info(self, body, scenario_id, tenant_url_code, **kwargs):  # noqa: E501
        """territory_manager_add_zone  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.territory_manager_add_zone_with_http_info(body, scenario_id, tenant_url_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateTerritoryZoneParameter body: (required)
        :param str scenario_id: (required)
        :param str tenant_url_code: (required)
        :return: TerritoryManagementZone
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'scenario_id', 'tenant_url_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method territory_manager_add_zone" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `territory_manager_add_zone`")  # noqa: E501
        # verify the required parameter 'scenario_id' is set
        if ('scenario_id' not in params or
                params['scenario_id'] is None):
            raise ValueError("Missing the required parameter `scenario_id` when calling `territory_manager_add_zone`")  # noqa: E501
        # verify the required parameter 'tenant_url_code' is set
        if ('tenant_url_code' not in params or
                params['tenant_url_code'] is None):
            raise ValueError("Missing the required parameter `tenant_url_code` when calling `territory_manager_add_zone`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scenario_id' in params:
            path_params['scenarioId'] = params['scenario_id']  # noqa: E501
        if 'tenant_url_code' in params:
            path_params['tenantUrlCode'] = params['tenant_url_code']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'secretKey']  # noqa: E501

        return self.api_client.call_api(
            '/{tenantUrlCode}/api/v2/TerritoryManager/{scenarioId}/zone', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TerritoryManagementZone',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def territory_manager_analyze_distances(self, body, scenario_id, tenant_url_code, **kwargs):  # noqa: E501
        """territory_manager_analyze_distances  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.territory_manager_analyze_distances(body, scenario_id, tenant_url_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AnalyzeDistancesParameter body: (required)
        :param str scenario_id: (required)
        :param str tenant_url_code: (required)
        :return: list[TerritoryAnalyzedDistance]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.territory_manager_analyze_distances_with_http_info(body, scenario_id, tenant_url_code, **kwargs)  # noqa: E501
        else:
            (data) = self.territory_manager_analyze_distances_with_http_info(body, scenario_id, tenant_url_code, **kwargs)  # noqa: E501
            return data

    def territory_manager_analyze_distances_with_http_info(self, body, scenario_id, tenant_url_code, **kwargs):  # noqa: E501
        """territory_manager_analyze_distances  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.territory_manager_analyze_distances_with_http_info(body, scenario_id, tenant_url_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AnalyzeDistancesParameter body: (required)
        :param str scenario_id: (required)
        :param str tenant_url_code: (required)
        :return: list[TerritoryAnalyzedDistance]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'scenario_id', 'tenant_url_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method territory_manager_analyze_distances" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `territory_manager_analyze_distances`")  # noqa: E501
        # verify the required parameter 'scenario_id' is set
        if ('scenario_id' not in params or
                params['scenario_id'] is None):
            raise ValueError("Missing the required parameter `scenario_id` when calling `territory_manager_analyze_distances`")  # noqa: E501
        # verify the required parameter 'tenant_url_code' is set
        if ('tenant_url_code' not in params or
                params['tenant_url_code'] is None):
            raise ValueError("Missing the required parameter `tenant_url_code` when calling `territory_manager_analyze_distances`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scenario_id' in params:
            path_params['scenarioId'] = params['scenario_id']  # noqa: E501
        if 'tenant_url_code' in params:
            path_params['tenantUrlCode'] = params['tenant_url_code']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'secretKey']  # noqa: E501

        return self.api_client.call_api(
            '/{tenantUrlCode}/api/v2/TerritoryManager/{scenarioId}/distance-analysis', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TerritoryAnalyzedDistance]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def territory_manager_check_territory_pos_implantation_conflict(self, body, scenario_id, tenant_url_code, **kwargs):  # noqa: E501
        """territory_manager_check_territory_pos_implantation_conflict  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.territory_manager_check_territory_pos_implantation_conflict(body, scenario_id, tenant_url_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateTerritoryLocationDTO body: (required)
        :param str scenario_id: (required)
        :param str tenant_url_code: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.territory_manager_check_territory_pos_implantation_conflict_with_http_info(body, scenario_id, tenant_url_code, **kwargs)  # noqa: E501
        else:
            (data) = self.territory_manager_check_territory_pos_implantation_conflict_with_http_info(body, scenario_id, tenant_url_code, **kwargs)  # noqa: E501
            return data

    def territory_manager_check_territory_pos_implantation_conflict_with_http_info(self, body, scenario_id, tenant_url_code, **kwargs):  # noqa: E501
        """territory_manager_check_territory_pos_implantation_conflict  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.territory_manager_check_territory_pos_implantation_conflict_with_http_info(body, scenario_id, tenant_url_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateTerritoryLocationDTO body: (required)
        :param str scenario_id: (required)
        :param str tenant_url_code: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'scenario_id', 'tenant_url_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method territory_manager_check_territory_pos_implantation_conflict" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `territory_manager_check_territory_pos_implantation_conflict`")  # noqa: E501
        # verify the required parameter 'scenario_id' is set
        if ('scenario_id' not in params or
                params['scenario_id'] is None):
            raise ValueError("Missing the required parameter `scenario_id` when calling `territory_manager_check_territory_pos_implantation_conflict`")  # noqa: E501
        # verify the required parameter 'tenant_url_code' is set
        if ('tenant_url_code' not in params or
                params['tenant_url_code'] is None):
            raise ValueError("Missing the required parameter `tenant_url_code` when calling `territory_manager_check_territory_pos_implantation_conflict`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scenario_id' in params:
            path_params['scenarioId'] = params['scenario_id']  # noqa: E501
        if 'tenant_url_code' in params:
            path_params['tenantUrlCode'] = params['tenant_url_code']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'secretKey']  # noqa: E501

        return self.api_client.call_api(
            '/{tenantUrlCode}/api/v2/TerritoryManager/{scenarioId}/check-territory-pos-implantation', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def territory_manager_clone_territory_pos(self, scenario_id, pos_id, tenant_url_code, **kwargs):  # noqa: E501
        """territory_manager_clone_territory_pos  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.territory_manager_clone_territory_pos(scenario_id, pos_id, tenant_url_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scenario_id: (required)
        :param str pos_id: (required)
        :param str tenant_url_code: (required)
        :return: TerritoryPosDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.territory_manager_clone_territory_pos_with_http_info(scenario_id, pos_id, tenant_url_code, **kwargs)  # noqa: E501
        else:
            (data) = self.territory_manager_clone_territory_pos_with_http_info(scenario_id, pos_id, tenant_url_code, **kwargs)  # noqa: E501
            return data

    def territory_manager_clone_territory_pos_with_http_info(self, scenario_id, pos_id, tenant_url_code, **kwargs):  # noqa: E501
        """territory_manager_clone_territory_pos  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.territory_manager_clone_territory_pos_with_http_info(scenario_id, pos_id, tenant_url_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scenario_id: (required)
        :param str pos_id: (required)
        :param str tenant_url_code: (required)
        :return: TerritoryPosDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scenario_id', 'pos_id', 'tenant_url_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method territory_manager_clone_territory_pos" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'scenario_id' is set
        if ('scenario_id' not in params or
                params['scenario_id'] is None):
            raise ValueError("Missing the required parameter `scenario_id` when calling `territory_manager_clone_territory_pos`")  # noqa: E501
        # verify the required parameter 'pos_id' is set
        if ('pos_id' not in params or
                params['pos_id'] is None):
            raise ValueError("Missing the required parameter `pos_id` when calling `territory_manager_clone_territory_pos`")  # noqa: E501
        # verify the required parameter 'tenant_url_code' is set
        if ('tenant_url_code' not in params or
                params['tenant_url_code'] is None):
            raise ValueError("Missing the required parameter `tenant_url_code` when calling `territory_manager_clone_territory_pos`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scenario_id' in params:
            path_params['scenarioId'] = params['scenario_id']  # noqa: E501
        if 'pos_id' in params:
            path_params['posId'] = params['pos_id']  # noqa: E501
        if 'tenant_url_code' in params:
            path_params['tenantUrlCode'] = params['tenant_url_code']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'secretKey']  # noqa: E501

        return self.api_client.call_api(
            '/{tenantUrlCode}/api/v2/TerritoryManager/{scenarioId}/territory-pos/{posId}/clone', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TerritoryPosDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def territory_manager_create_territory(self, body, scenario_id, tenant_url_code, **kwargs):  # noqa: E501
        """territory_manager_create_territory  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.territory_manager_create_territory(body, scenario_id, tenant_url_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateTerritoryParameters body: (required)
        :param str scenario_id: (required)
        :param str tenant_url_code: (required)
        :return: CreateTerritoryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.territory_manager_create_territory_with_http_info(body, scenario_id, tenant_url_code, **kwargs)  # noqa: E501
        else:
            (data) = self.territory_manager_create_territory_with_http_info(body, scenario_id, tenant_url_code, **kwargs)  # noqa: E501
            return data

    def territory_manager_create_territory_with_http_info(self, body, scenario_id, tenant_url_code, **kwargs):  # noqa: E501
        """territory_manager_create_territory  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.territory_manager_create_territory_with_http_info(body, scenario_id, tenant_url_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateTerritoryParameters body: (required)
        :param str scenario_id: (required)
        :param str tenant_url_code: (required)
        :return: CreateTerritoryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'scenario_id', 'tenant_url_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method territory_manager_create_territory" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `territory_manager_create_territory`")  # noqa: E501
        # verify the required parameter 'scenario_id' is set
        if ('scenario_id' not in params or
                params['scenario_id'] is None):
            raise ValueError("Missing the required parameter `scenario_id` when calling `territory_manager_create_territory`")  # noqa: E501
        # verify the required parameter 'tenant_url_code' is set
        if ('tenant_url_code' not in params or
                params['tenant_url_code'] is None):
            raise ValueError("Missing the required parameter `tenant_url_code` when calling `territory_manager_create_territory`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scenario_id' in params:
            path_params['scenarioId'] = params['scenario_id']  # noqa: E501
        if 'tenant_url_code' in params:
            path_params['tenantUrlCode'] = params['tenant_url_code']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'secretKey']  # noqa: E501

        return self.api_client.call_api(
            '/{tenantUrlCode}/api/v2/TerritoryManager/{scenarioId}/territory-pos', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateTerritoryResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def territory_manager_delete_largest_zone(self, scenario_id, tenant_url_code, **kwargs):  # noqa: E501
        """territory_manager_delete_largest_zone  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.territory_manager_delete_largest_zone(scenario_id, tenant_url_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scenario_id: (required)
        :param str tenant_url_code: (required)
        :return: TerritoryManagementZone
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.territory_manager_delete_largest_zone_with_http_info(scenario_id, tenant_url_code, **kwargs)  # noqa: E501
        else:
            (data) = self.territory_manager_delete_largest_zone_with_http_info(scenario_id, tenant_url_code, **kwargs)  # noqa: E501
            return data

    def territory_manager_delete_largest_zone_with_http_info(self, scenario_id, tenant_url_code, **kwargs):  # noqa: E501
        """territory_manager_delete_largest_zone  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.territory_manager_delete_largest_zone_with_http_info(scenario_id, tenant_url_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scenario_id: (required)
        :param str tenant_url_code: (required)
        :return: TerritoryManagementZone
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scenario_id', 'tenant_url_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method territory_manager_delete_largest_zone" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'scenario_id' is set
        if ('scenario_id' not in params or
                params['scenario_id'] is None):
            raise ValueError("Missing the required parameter `scenario_id` when calling `territory_manager_delete_largest_zone`")  # noqa: E501
        # verify the required parameter 'tenant_url_code' is set
        if ('tenant_url_code' not in params or
                params['tenant_url_code'] is None):
            raise ValueError("Missing the required parameter `tenant_url_code` when calling `territory_manager_delete_largest_zone`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scenario_id' in params:
            path_params['scenarioId'] = params['scenario_id']  # noqa: E501
        if 'tenant_url_code' in params:
            path_params['tenantUrlCode'] = params['tenant_url_code']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'secretKey']  # noqa: E501

        return self.api_client.call_api(
            '/{tenantUrlCode}/api/v2/TerritoryManager/{scenarioId}/largest-zone', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TerritoryManagementZone',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def territory_manager_delete_territory_pos(self, scenario_id, pos_id, tenant_url_code, **kwargs):  # noqa: E501
        """territory_manager_delete_territory_pos  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.territory_manager_delete_territory_pos(scenario_id, pos_id, tenant_url_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scenario_id: (required)
        :param str pos_id: (required)
        :param str tenant_url_code: (required)
        :return: TerritoryPosDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.territory_manager_delete_territory_pos_with_http_info(scenario_id, pos_id, tenant_url_code, **kwargs)  # noqa: E501
        else:
            (data) = self.territory_manager_delete_territory_pos_with_http_info(scenario_id, pos_id, tenant_url_code, **kwargs)  # noqa: E501
            return data

    def territory_manager_delete_territory_pos_with_http_info(self, scenario_id, pos_id, tenant_url_code, **kwargs):  # noqa: E501
        """territory_manager_delete_territory_pos  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.territory_manager_delete_territory_pos_with_http_info(scenario_id, pos_id, tenant_url_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scenario_id: (required)
        :param str pos_id: (required)
        :param str tenant_url_code: (required)
        :return: TerritoryPosDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scenario_id', 'pos_id', 'tenant_url_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method territory_manager_delete_territory_pos" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'scenario_id' is set
        if ('scenario_id' not in params or
                params['scenario_id'] is None):
            raise ValueError("Missing the required parameter `scenario_id` when calling `territory_manager_delete_territory_pos`")  # noqa: E501
        # verify the required parameter 'pos_id' is set
        if ('pos_id' not in params or
                params['pos_id'] is None):
            raise ValueError("Missing the required parameter `pos_id` when calling `territory_manager_delete_territory_pos`")  # noqa: E501
        # verify the required parameter 'tenant_url_code' is set
        if ('tenant_url_code' not in params or
                params['tenant_url_code'] is None):
            raise ValueError("Missing the required parameter `tenant_url_code` when calling `territory_manager_delete_territory_pos`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scenario_id' in params:
            path_params['scenarioId'] = params['scenario_id']  # noqa: E501
        if 'pos_id' in params:
            path_params['posId'] = params['pos_id']  # noqa: E501
        if 'tenant_url_code' in params:
            path_params['tenantUrlCode'] = params['tenant_url_code']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'secretKey']  # noqa: E501

        return self.api_client.call_api(
            '/{tenantUrlCode}/api/v2/TerritoryManager/{scenarioId}/territory-pos/{posId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TerritoryPosDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def territory_manager_export_territor_posy_data(self, body, scenario_id, territory_pos_id, tenant_url_code, **kwargs):  # noqa: E501
        """Finds the data within the area covered by the territory in multiple layers and generates an Excel file.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.territory_manager_export_territor_posy_data(body, scenario_id, territory_pos_id, tenant_url_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ExportDataParameter body: (required)
        :param str scenario_id: (required)
        :param str territory_pos_id: (required)
        :param str tenant_url_code: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.territory_manager_export_territor_posy_data_with_http_info(body, scenario_id, territory_pos_id, tenant_url_code, **kwargs)  # noqa: E501
        else:
            (data) = self.territory_manager_export_territor_posy_data_with_http_info(body, scenario_id, territory_pos_id, tenant_url_code, **kwargs)  # noqa: E501
            return data

    def territory_manager_export_territor_posy_data_with_http_info(self, body, scenario_id, territory_pos_id, tenant_url_code, **kwargs):  # noqa: E501
        """Finds the data within the area covered by the territory in multiple layers and generates an Excel file.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.territory_manager_export_territor_posy_data_with_http_info(body, scenario_id, territory_pos_id, tenant_url_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ExportDataParameter body: (required)
        :param str scenario_id: (required)
        :param str territory_pos_id: (required)
        :param str tenant_url_code: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'scenario_id', 'territory_pos_id', 'tenant_url_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method territory_manager_export_territor_posy_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `territory_manager_export_territor_posy_data`")  # noqa: E501
        # verify the required parameter 'scenario_id' is set
        if ('scenario_id' not in params or
                params['scenario_id'] is None):
            raise ValueError("Missing the required parameter `scenario_id` when calling `territory_manager_export_territor_posy_data`")  # noqa: E501
        # verify the required parameter 'territory_pos_id' is set
        if ('territory_pos_id' not in params or
                params['territory_pos_id'] is None):
            raise ValueError("Missing the required parameter `territory_pos_id` when calling `territory_manager_export_territor_posy_data`")  # noqa: E501
        # verify the required parameter 'tenant_url_code' is set
        if ('tenant_url_code' not in params or
                params['tenant_url_code'] is None):
            raise ValueError("Missing the required parameter `tenant_url_code` when calling `territory_manager_export_territor_posy_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scenario_id' in params:
            path_params['scenarioId'] = params['scenario_id']  # noqa: E501
        if 'territory_pos_id' in params:
            path_params['territoryPosId'] = params['territory_pos_id']  # noqa: E501
        if 'tenant_url_code' in params:
            path_params['tenantUrlCode'] = params['tenant_url_code']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'secretKey']  # noqa: E501

        return self.api_client.call_api(
            '/{tenantUrlCode}/api/v2/TerritoryManager/{scenarioId}/territory-pos/{territoryPosId}/export-data', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def territory_manager_export_territory_layer(self, scenario_id, language, tenant_url_code, **kwargs):  # noqa: E501
        """territory_manager_export_territory_layer  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.territory_manager_export_territory_layer(scenario_id, language, tenant_url_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scenario_id: (required)
        :param str language: (required)
        :param str tenant_url_code: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.territory_manager_export_territory_layer_with_http_info(scenario_id, language, tenant_url_code, **kwargs)  # noqa: E501
        else:
            (data) = self.territory_manager_export_territory_layer_with_http_info(scenario_id, language, tenant_url_code, **kwargs)  # noqa: E501
            return data

    def territory_manager_export_territory_layer_with_http_info(self, scenario_id, language, tenant_url_code, **kwargs):  # noqa: E501
        """territory_manager_export_territory_layer  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.territory_manager_export_territory_layer_with_http_info(scenario_id, language, tenant_url_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scenario_id: (required)
        :param str language: (required)
        :param str tenant_url_code: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scenario_id', 'language', 'tenant_url_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method territory_manager_export_territory_layer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'scenario_id' is set
        if ('scenario_id' not in params or
                params['scenario_id'] is None):
            raise ValueError("Missing the required parameter `scenario_id` when calling `territory_manager_export_territory_layer`")  # noqa: E501
        # verify the required parameter 'language' is set
        if ('language' not in params or
                params['language'] is None):
            raise ValueError("Missing the required parameter `language` when calling `territory_manager_export_territory_layer`")  # noqa: E501
        # verify the required parameter 'tenant_url_code' is set
        if ('tenant_url_code' not in params or
                params['tenant_url_code'] is None):
            raise ValueError("Missing the required parameter `tenant_url_code` when calling `territory_manager_export_territory_layer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scenario_id' in params:
            path_params['scenarioId'] = params['scenario_id']  # noqa: E501
        if 'language' in params:
            path_params['language'] = params['language']  # noqa: E501
        if 'tenant_url_code' in params:
            path_params['tenantUrlCode'] = params['tenant_url_code']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'secretKey']  # noqa: E501

        return self.api_client.call_api(
            '/{tenantUrlCode}/api/v2/TerritoryManager/{scenarioId}/export-territory-layer/{language}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def territory_manager_get_default_territory_manager_settings(self, tenant_url_code, **kwargs):  # noqa: E501
        """territory_manager_get_default_territory_manager_settings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.territory_manager_get_default_territory_manager_settings(tenant_url_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_url_code: (required)
        :return: TerritoryManagerDefaultSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.territory_manager_get_default_territory_manager_settings_with_http_info(tenant_url_code, **kwargs)  # noqa: E501
        else:
            (data) = self.territory_manager_get_default_territory_manager_settings_with_http_info(tenant_url_code, **kwargs)  # noqa: E501
            return data

    def territory_manager_get_default_territory_manager_settings_with_http_info(self, tenant_url_code, **kwargs):  # noqa: E501
        """territory_manager_get_default_territory_manager_settings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.territory_manager_get_default_territory_manager_settings_with_http_info(tenant_url_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_url_code: (required)
        :return: TerritoryManagerDefaultSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tenant_url_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method territory_manager_get_default_territory_manager_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tenant_url_code' is set
        if ('tenant_url_code' not in params or
                params['tenant_url_code'] is None):
            raise ValueError("Missing the required parameter `tenant_url_code` when calling `territory_manager_get_default_territory_manager_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_url_code' in params:
            path_params['tenantUrlCode'] = params['tenant_url_code']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'secretKey']  # noqa: E501

        return self.api_client.call_api(
            '/{tenantUrlCode}/api/v2/TerritoryManager/defaultSettings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TerritoryManagerDefaultSettings',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def territory_manager_get_scenario(self, scenario_id, tenant_url_code, **kwargs):  # noqa: E501
        """territory_manager_get_scenario  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.territory_manager_get_scenario(scenario_id, tenant_url_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scenario_id: (required)
        :param str tenant_url_code: (required)
        :return: ScenarioDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.territory_manager_get_scenario_with_http_info(scenario_id, tenant_url_code, **kwargs)  # noqa: E501
        else:
            (data) = self.territory_manager_get_scenario_with_http_info(scenario_id, tenant_url_code, **kwargs)  # noqa: E501
            return data

    def territory_manager_get_scenario_with_http_info(self, scenario_id, tenant_url_code, **kwargs):  # noqa: E501
        """territory_manager_get_scenario  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.territory_manager_get_scenario_with_http_info(scenario_id, tenant_url_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scenario_id: (required)
        :param str tenant_url_code: (required)
        :return: ScenarioDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scenario_id', 'tenant_url_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method territory_manager_get_scenario" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'scenario_id' is set
        if ('scenario_id' not in params or
                params['scenario_id'] is None):
            raise ValueError("Missing the required parameter `scenario_id` when calling `territory_manager_get_scenario`")  # noqa: E501
        # verify the required parameter 'tenant_url_code' is set
        if ('tenant_url_code' not in params or
                params['tenant_url_code'] is None):
            raise ValueError("Missing the required parameter `tenant_url_code` when calling `territory_manager_get_scenario`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scenario_id' in params:
            path_params['scenarioId'] = params['scenario_id']  # noqa: E501
        if 'tenant_url_code' in params:
            path_params['tenantUrlCode'] = params['tenant_url_code']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'secretKey']  # noqa: E501

        return self.api_client.call_api(
            '/{tenantUrlCode}/api/v2/TerritoryManager/{scenarioId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ScenarioDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def territory_manager_get_territory_block_id_candidates(self, body, scenario_id, tenant_url_code, **kwargs):  # noqa: E501
        """territory_manager_get_territory_block_id_candidates  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.territory_manager_get_territory_block_id_candidates(body, scenario_id, tenant_url_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CandidatesGetParameter body: (required)
        :param str scenario_id: (required)
        :param str tenant_url_code: (required)
        :return: GetBlockCandidatesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.territory_manager_get_territory_block_id_candidates_with_http_info(body, scenario_id, tenant_url_code, **kwargs)  # noqa: E501
        else:
            (data) = self.territory_manager_get_territory_block_id_candidates_with_http_info(body, scenario_id, tenant_url_code, **kwargs)  # noqa: E501
            return data

    def territory_manager_get_territory_block_id_candidates_with_http_info(self, body, scenario_id, tenant_url_code, **kwargs):  # noqa: E501
        """territory_manager_get_territory_block_id_candidates  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.territory_manager_get_territory_block_id_candidates_with_http_info(body, scenario_id, tenant_url_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CandidatesGetParameter body: (required)
        :param str scenario_id: (required)
        :param str tenant_url_code: (required)
        :return: GetBlockCandidatesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'scenario_id', 'tenant_url_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method territory_manager_get_territory_block_id_candidates" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `territory_manager_get_territory_block_id_candidates`")  # noqa: E501
        # verify the required parameter 'scenario_id' is set
        if ('scenario_id' not in params or
                params['scenario_id'] is None):
            raise ValueError("Missing the required parameter `scenario_id` when calling `territory_manager_get_territory_block_id_candidates`")  # noqa: E501
        # verify the required parameter 'tenant_url_code' is set
        if ('tenant_url_code' not in params or
                params['tenant_url_code'] is None):
            raise ValueError("Missing the required parameter `tenant_url_code` when calling `territory_manager_get_territory_block_id_candidates`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scenario_id' in params:
            path_params['scenarioId'] = params['scenario_id']  # noqa: E501
        if 'tenant_url_code' in params:
            path_params['tenantUrlCode'] = params['tenant_url_code']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'secretKey']  # noqa: E501

        return self.api_client.call_api(
            '/{tenantUrlCode}/api/v2/TerritoryManager/{scenarioId}/territory/candidates', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetBlockCandidatesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def territory_manager_get_territory_manager_summary(self, map_id, tenant_url_code, **kwargs):  # noqa: E501
        """territory_manager_get_territory_manager_summary  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.territory_manager_get_territory_manager_summary(map_id, tenant_url_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str map_id: (required)
        :param str tenant_url_code: (required)
        :return: TerritoryManagerSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.territory_manager_get_territory_manager_summary_with_http_info(map_id, tenant_url_code, **kwargs)  # noqa: E501
        else:
            (data) = self.territory_manager_get_territory_manager_summary_with_http_info(map_id, tenant_url_code, **kwargs)  # noqa: E501
            return data

    def territory_manager_get_territory_manager_summary_with_http_info(self, map_id, tenant_url_code, **kwargs):  # noqa: E501
        """territory_manager_get_territory_manager_summary  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.territory_manager_get_territory_manager_summary_with_http_info(map_id, tenant_url_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str map_id: (required)
        :param str tenant_url_code: (required)
        :return: TerritoryManagerSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['map_id', 'tenant_url_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method territory_manager_get_territory_manager_summary" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'map_id' is set
        if ('map_id' not in params or
                params['map_id'] is None):
            raise ValueError("Missing the required parameter `map_id` when calling `territory_manager_get_territory_manager_summary`")  # noqa: E501
        # verify the required parameter 'tenant_url_code' is set
        if ('tenant_url_code' not in params or
                params['tenant_url_code'] is None):
            raise ValueError("Missing the required parameter `tenant_url_code` when calling `territory_manager_get_territory_manager_summary`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'map_id' in params:
            path_params['mapId'] = params['map_id']  # noqa: E501
        if 'tenant_url_code' in params:
            path_params['tenantUrlCode'] = params['tenant_url_code']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'secretKey']  # noqa: E501

        return self.api_client.call_api(
            '/{tenantUrlCode}/api/v2/TerritoryManager/{mapId}/summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TerritoryManagerSummary',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def territory_manager_redefine_territory_pos(self, body, scenario_id, pos_id, tenant_url_code, **kwargs):  # noqa: E501
        """territory_manager_redefine_territory_pos  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.territory_manager_redefine_territory_pos(body, scenario_id, pos_id, tenant_url_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RedefineParameter body: (required)
        :param str scenario_id: (required)
        :param str pos_id: (required)
        :param str tenant_url_code: (required)
        :return: RedefineResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.territory_manager_redefine_territory_pos_with_http_info(body, scenario_id, pos_id, tenant_url_code, **kwargs)  # noqa: E501
        else:
            (data) = self.territory_manager_redefine_territory_pos_with_http_info(body, scenario_id, pos_id, tenant_url_code, **kwargs)  # noqa: E501
            return data

    def territory_manager_redefine_territory_pos_with_http_info(self, body, scenario_id, pos_id, tenant_url_code, **kwargs):  # noqa: E501
        """territory_manager_redefine_territory_pos  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.territory_manager_redefine_territory_pos_with_http_info(body, scenario_id, pos_id, tenant_url_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RedefineParameter body: (required)
        :param str scenario_id: (required)
        :param str pos_id: (required)
        :param str tenant_url_code: (required)
        :return: RedefineResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'scenario_id', 'pos_id', 'tenant_url_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method territory_manager_redefine_territory_pos" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `territory_manager_redefine_territory_pos`")  # noqa: E501
        # verify the required parameter 'scenario_id' is set
        if ('scenario_id' not in params or
                params['scenario_id'] is None):
            raise ValueError("Missing the required parameter `scenario_id` when calling `territory_manager_redefine_territory_pos`")  # noqa: E501
        # verify the required parameter 'pos_id' is set
        if ('pos_id' not in params or
                params['pos_id'] is None):
            raise ValueError("Missing the required parameter `pos_id` when calling `territory_manager_redefine_territory_pos`")  # noqa: E501
        # verify the required parameter 'tenant_url_code' is set
        if ('tenant_url_code' not in params or
                params['tenant_url_code'] is None):
            raise ValueError("Missing the required parameter `tenant_url_code` when calling `territory_manager_redefine_territory_pos`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scenario_id' in params:
            path_params['scenarioId'] = params['scenario_id']  # noqa: E501
        if 'pos_id' in params:
            path_params['posId'] = params['pos_id']  # noqa: E501
        if 'tenant_url_code' in params:
            path_params['tenantUrlCode'] = params['tenant_url_code']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'secretKey']  # noqa: E501

        return self.api_client.call_api(
            '/{tenantUrlCode}/api/v2/TerritoryManager/{scenarioId}/territory-pos/{posId}/redefine', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RedefineResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def territory_manager_unset_scenario_session(self, scenario_id, tenant_url_code, **kwargs):  # noqa: E501
        """territory_manager_unset_scenario_session  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.territory_manager_unset_scenario_session(scenario_id, tenant_url_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scenario_id: (required)
        :param str tenant_url_code: (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.territory_manager_unset_scenario_session_with_http_info(scenario_id, tenant_url_code, **kwargs)  # noqa: E501
        else:
            (data) = self.territory_manager_unset_scenario_session_with_http_info(scenario_id, tenant_url_code, **kwargs)  # noqa: E501
            return data

    def territory_manager_unset_scenario_session_with_http_info(self, scenario_id, tenant_url_code, **kwargs):  # noqa: E501
        """territory_manager_unset_scenario_session  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.territory_manager_unset_scenario_session_with_http_info(scenario_id, tenant_url_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scenario_id: (required)
        :param str tenant_url_code: (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scenario_id', 'tenant_url_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method territory_manager_unset_scenario_session" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'scenario_id' is set
        if ('scenario_id' not in params or
                params['scenario_id'] is None):
            raise ValueError("Missing the required parameter `scenario_id` when calling `territory_manager_unset_scenario_session`")  # noqa: E501
        # verify the required parameter 'tenant_url_code' is set
        if ('tenant_url_code' not in params or
                params['tenant_url_code'] is None):
            raise ValueError("Missing the required parameter `tenant_url_code` when calling `territory_manager_unset_scenario_session`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scenario_id' in params:
            path_params['scenarioId'] = params['scenario_id']  # noqa: E501
        if 'tenant_url_code' in params:
            path_params['tenantUrlCode'] = params['tenant_url_code']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'secretKey']  # noqa: E501

        return self.api_client.call_api(
            '/{tenantUrlCode}/api/v2/TerritoryManager/{scenarioId}/session', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def territory_manager_update_scenario_data_column_configuration(self, body, scenario_id, tenant_url_code, **kwargs):  # noqa: E501
        """territory_manager_update_scenario_data_column_configuration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.territory_manager_update_scenario_data_column_configuration(body, scenario_id, tenant_url_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[ScenarioUpdateDataColumnConfigurationParam] body: (required)
        :param str scenario_id: (required)
        :param str tenant_url_code: (required)
        :return: list[ScenarioDataColumnConfigurationDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.territory_manager_update_scenario_data_column_configuration_with_http_info(body, scenario_id, tenant_url_code, **kwargs)  # noqa: E501
        else:
            (data) = self.territory_manager_update_scenario_data_column_configuration_with_http_info(body, scenario_id, tenant_url_code, **kwargs)  # noqa: E501
            return data

    def territory_manager_update_scenario_data_column_configuration_with_http_info(self, body, scenario_id, tenant_url_code, **kwargs):  # noqa: E501
        """territory_manager_update_scenario_data_column_configuration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.territory_manager_update_scenario_data_column_configuration_with_http_info(body, scenario_id, tenant_url_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[ScenarioUpdateDataColumnConfigurationParam] body: (required)
        :param str scenario_id: (required)
        :param str tenant_url_code: (required)
        :return: list[ScenarioDataColumnConfigurationDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'scenario_id', 'tenant_url_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method territory_manager_update_scenario_data_column_configuration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `territory_manager_update_scenario_data_column_configuration`")  # noqa: E501
        # verify the required parameter 'scenario_id' is set
        if ('scenario_id' not in params or
                params['scenario_id'] is None):
            raise ValueError("Missing the required parameter `scenario_id` when calling `territory_manager_update_scenario_data_column_configuration`")  # noqa: E501
        # verify the required parameter 'tenant_url_code' is set
        if ('tenant_url_code' not in params or
                params['tenant_url_code'] is None):
            raise ValueError("Missing the required parameter `tenant_url_code` when calling `territory_manager_update_scenario_data_column_configuration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scenario_id' in params:
            path_params['scenarioId'] = params['scenario_id']  # noqa: E501
        if 'tenant_url_code' in params:
            path_params['tenantUrlCode'] = params['tenant_url_code']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'secretKey']  # noqa: E501

        return self.api_client.call_api(
            '/{tenantUrlCode}/api/v2/TerritoryManager/{scenarioId}/datacolumn-configuration', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ScenarioDataColumnConfigurationDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def territory_manager_update_scenario_info(self, body, scenario_id, tenant_url_code, **kwargs):  # noqa: E501
        """territory_manager_update_scenario_info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.territory_manager_update_scenario_info(body, scenario_id, tenant_url_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ScenarioUpdateInfoParameter body: (required)
        :param str scenario_id: (required)
        :param str tenant_url_code: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.territory_manager_update_scenario_info_with_http_info(body, scenario_id, tenant_url_code, **kwargs)  # noqa: E501
        else:
            (data) = self.territory_manager_update_scenario_info_with_http_info(body, scenario_id, tenant_url_code, **kwargs)  # noqa: E501
            return data

    def territory_manager_update_scenario_info_with_http_info(self, body, scenario_id, tenant_url_code, **kwargs):  # noqa: E501
        """territory_manager_update_scenario_info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.territory_manager_update_scenario_info_with_http_info(body, scenario_id, tenant_url_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ScenarioUpdateInfoParameter body: (required)
        :param str scenario_id: (required)
        :param str tenant_url_code: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'scenario_id', 'tenant_url_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method territory_manager_update_scenario_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `territory_manager_update_scenario_info`")  # noqa: E501
        # verify the required parameter 'scenario_id' is set
        if ('scenario_id' not in params or
                params['scenario_id'] is None):
            raise ValueError("Missing the required parameter `scenario_id` when calling `territory_manager_update_scenario_info`")  # noqa: E501
        # verify the required parameter 'tenant_url_code' is set
        if ('tenant_url_code' not in params or
                params['tenant_url_code'] is None):
            raise ValueError("Missing the required parameter `tenant_url_code` when calling `territory_manager_update_scenario_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scenario_id' in params:
            path_params['scenarioId'] = params['scenario_id']  # noqa: E501
        if 'tenant_url_code' in params:
            path_params['tenantUrlCode'] = params['tenant_url_code']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'secretKey']  # noqa: E501

        return self.api_client.call_api(
            '/{tenantUrlCode}/api/v2/TerritoryManager/{scenarioId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def territory_manager_update_territories_from_csv(self, map_id2, tenant_url_code, map_id, **kwargs):  # noqa: E501
        """territory_manager_update_territories_from_csv  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.territory_manager_update_territories_from_csv(map_id2, tenant_url_code, map_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str map_id2: (required)
        :param str tenant_url_code: (required)
        :param str map_id: (required)
        :param str file:
        :return: ScenarioDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.territory_manager_update_territories_from_csv_with_http_info(map_id2, tenant_url_code, map_id, **kwargs)  # noqa: E501
        else:
            (data) = self.territory_manager_update_territories_from_csv_with_http_info(map_id2, tenant_url_code, map_id, **kwargs)  # noqa: E501
            return data

    def territory_manager_update_territories_from_csv_with_http_info(self, map_id2, tenant_url_code, map_id, **kwargs):  # noqa: E501
        """territory_manager_update_territories_from_csv  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.territory_manager_update_territories_from_csv_with_http_info(map_id2, tenant_url_code, map_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str map_id2: (required)
        :param str tenant_url_code: (required)
        :param str map_id: (required)
        :param str file:
        :return: ScenarioDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['map_id2', 'tenant_url_code', 'map_id', 'file']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method territory_manager_update_territories_from_csv" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'map_id2' is set
        if ('map_id2' not in params or
                params['map_id2'] is None):
            raise ValueError("Missing the required parameter `map_id2` when calling `territory_manager_update_territories_from_csv`")  # noqa: E501
        # verify the required parameter 'tenant_url_code' is set
        if ('tenant_url_code' not in params or
                params['tenant_url_code'] is None):
            raise ValueError("Missing the required parameter `tenant_url_code` when calling `territory_manager_update_territories_from_csv`")  # noqa: E501
        # verify the required parameter 'map_id' is set
        if ('map_id' not in params or
                params['map_id'] is None):
            raise ValueError("Missing the required parameter `map_id` when calling `territory_manager_update_territories_from_csv`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_url_code' in params:
            path_params['tenantUrlCode'] = params['tenant_url_code']  # noqa: E501
        if 'map_id' in params:
            path_params['mapId'] = params['map_id']  # noqa: E501

        query_params = []
        if 'map_id' in params:
            query_params.append(('mapId', params['map_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'secretKey']  # noqa: E501

        return self.api_client.call_api(
            '/{tenantUrlCode}/api/v2/TerritoryManager/{mapId}/update-from-csv', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ScenarioDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def territory_manager_update_territory_block_distances_to_pos(self, scenario_id, territory_id, tenant_url_code, **kwargs):  # noqa: E501
        """Recalculates the drive time, drive distance and distance between a territory point and the centroid of its blocks.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.territory_manager_update_territory_block_distances_to_pos(scenario_id, territory_id, tenant_url_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scenario_id: (required)
        :param int territory_id: (required)
        :param str tenant_url_code: (required)
        :return: TerritoryZoneDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.territory_manager_update_territory_block_distances_to_pos_with_http_info(scenario_id, territory_id, tenant_url_code, **kwargs)  # noqa: E501
        else:
            (data) = self.territory_manager_update_territory_block_distances_to_pos_with_http_info(scenario_id, territory_id, tenant_url_code, **kwargs)  # noqa: E501
            return data

    def territory_manager_update_territory_block_distances_to_pos_with_http_info(self, scenario_id, territory_id, tenant_url_code, **kwargs):  # noqa: E501
        """Recalculates the drive time, drive distance and distance between a territory point and the centroid of its blocks.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.territory_manager_update_territory_block_distances_to_pos_with_http_info(scenario_id, territory_id, tenant_url_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scenario_id: (required)
        :param int territory_id: (required)
        :param str tenant_url_code: (required)
        :return: TerritoryZoneDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scenario_id', 'territory_id', 'tenant_url_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method territory_manager_update_territory_block_distances_to_pos" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'scenario_id' is set
        if ('scenario_id' not in params or
                params['scenario_id'] is None):
            raise ValueError("Missing the required parameter `scenario_id` when calling `territory_manager_update_territory_block_distances_to_pos`")  # noqa: E501
        # verify the required parameter 'territory_id' is set
        if ('territory_id' not in params or
                params['territory_id'] is None):
            raise ValueError("Missing the required parameter `territory_id` when calling `territory_manager_update_territory_block_distances_to_pos`")  # noqa: E501
        # verify the required parameter 'tenant_url_code' is set
        if ('tenant_url_code' not in params or
                params['tenant_url_code'] is None):
            raise ValueError("Missing the required parameter `tenant_url_code` when calling `territory_manager_update_territory_block_distances_to_pos`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scenario_id' in params:
            path_params['scenarioId'] = params['scenario_id']  # noqa: E501
        if 'territory_id' in params:
            path_params['territoryId'] = params['territory_id']  # noqa: E501
        if 'tenant_url_code' in params:
            path_params['tenantUrlCode'] = params['tenant_url_code']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'secretKey']  # noqa: E501

        return self.api_client.call_api(
            '/{tenantUrlCode}/api/v2/TerritoryManager/{scenarioId}/territories/{territoryId}/calculate-distances', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TerritoryZoneDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def territory_manager_update_territory_location(self, body, scenario_id, territory_pos_id, tenant_url_code, **kwargs):  # noqa: E501
        """territory_manager_update_territory_location  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.territory_manager_update_territory_location(body, scenario_id, territory_pos_id, tenant_url_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateTerritoryLocationDTO body: (required)
        :param str scenario_id: (required)
        :param str territory_pos_id: (required)
        :param str tenant_url_code: (required)
        :return: UpdateTerritoryLocationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.territory_manager_update_territory_location_with_http_info(body, scenario_id, territory_pos_id, tenant_url_code, **kwargs)  # noqa: E501
        else:
            (data) = self.territory_manager_update_territory_location_with_http_info(body, scenario_id, territory_pos_id, tenant_url_code, **kwargs)  # noqa: E501
            return data

    def territory_manager_update_territory_location_with_http_info(self, body, scenario_id, territory_pos_id, tenant_url_code, **kwargs):  # noqa: E501
        """territory_manager_update_territory_location  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.territory_manager_update_territory_location_with_http_info(body, scenario_id, territory_pos_id, tenant_url_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateTerritoryLocationDTO body: (required)
        :param str scenario_id: (required)
        :param str territory_pos_id: (required)
        :param str tenant_url_code: (required)
        :return: UpdateTerritoryLocationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'scenario_id', 'territory_pos_id', 'tenant_url_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method territory_manager_update_territory_location" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `territory_manager_update_territory_location`")  # noqa: E501
        # verify the required parameter 'scenario_id' is set
        if ('scenario_id' not in params or
                params['scenario_id'] is None):
            raise ValueError("Missing the required parameter `scenario_id` when calling `territory_manager_update_territory_location`")  # noqa: E501
        # verify the required parameter 'territory_pos_id' is set
        if ('territory_pos_id' not in params or
                params['territory_pos_id'] is None):
            raise ValueError("Missing the required parameter `territory_pos_id` when calling `territory_manager_update_territory_location`")  # noqa: E501
        # verify the required parameter 'tenant_url_code' is set
        if ('tenant_url_code' not in params or
                params['tenant_url_code'] is None):
            raise ValueError("Missing the required parameter `tenant_url_code` when calling `territory_manager_update_territory_location`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scenario_id' in params:
            path_params['scenarioId'] = params['scenario_id']  # noqa: E501
        if 'territory_pos_id' in params:
            path_params['territoryPosId'] = params['territory_pos_id']  # noqa: E501
        if 'tenant_url_code' in params:
            path_params['tenantUrlCode'] = params['tenant_url_code']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'secretKey']  # noqa: E501

        return self.api_client.call_api(
            '/{tenantUrlCode}/api/v2/TerritoryManager/{scenarioId}/territory/{territoryPosId}/location', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UpdateTerritoryLocationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def territory_manager_update_territory_manager_settings(self, body, map_id, tenant_url_code, **kwargs):  # noqa: E501
        """territory_manager_update_territory_manager_settings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.territory_manager_update_territory_manager_settings(body, map_id, tenant_url_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TerritoryManagerSettings body: (required)
        :param str map_id: (required)
        :param str tenant_url_code: (required)
        :return: TerritoryManagerSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.territory_manager_update_territory_manager_settings_with_http_info(body, map_id, tenant_url_code, **kwargs)  # noqa: E501
        else:
            (data) = self.territory_manager_update_territory_manager_settings_with_http_info(body, map_id, tenant_url_code, **kwargs)  # noqa: E501
            return data

    def territory_manager_update_territory_manager_settings_with_http_info(self, body, map_id, tenant_url_code, **kwargs):  # noqa: E501
        """territory_manager_update_territory_manager_settings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.territory_manager_update_territory_manager_settings_with_http_info(body, map_id, tenant_url_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TerritoryManagerSettings body: (required)
        :param str map_id: (required)
        :param str tenant_url_code: (required)
        :return: TerritoryManagerSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'map_id', 'tenant_url_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method territory_manager_update_territory_manager_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `territory_manager_update_territory_manager_settings`")  # noqa: E501
        # verify the required parameter 'map_id' is set
        if ('map_id' not in params or
                params['map_id'] is None):
            raise ValueError("Missing the required parameter `map_id` when calling `territory_manager_update_territory_manager_settings`")  # noqa: E501
        # verify the required parameter 'tenant_url_code' is set
        if ('tenant_url_code' not in params or
                params['tenant_url_code'] is None):
            raise ValueError("Missing the required parameter `tenant_url_code` when calling `territory_manager_update_territory_manager_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'map_id' in params:
            path_params['mapId'] = params['map_id']  # noqa: E501
        if 'tenant_url_code' in params:
            path_params['tenantUrlCode'] = params['tenant_url_code']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'secretKey']  # noqa: E501

        return self.api_client.call_api(
            '/{tenantUrlCode}/api/v2/TerritoryManager/{mapId}/settings', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TerritoryManagerSettings',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def territory_manager_update_territory_manager_urbanicity_value(self, body, scenario_id, tenant_url_code, **kwargs):  # noqa: E501
        """territory_manager_update_territory_manager_urbanicity_value  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.territory_manager_update_territory_manager_urbanicity_value(body, scenario_id, tenant_url_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TerritoryManagerUrbanicity body: (required)
        :param str scenario_id: (required)
        :param str tenant_url_code: (required)
        :return: TerritoryManagerUrbanicity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.territory_manager_update_territory_manager_urbanicity_value_with_http_info(body, scenario_id, tenant_url_code, **kwargs)  # noqa: E501
        else:
            (data) = self.territory_manager_update_territory_manager_urbanicity_value_with_http_info(body, scenario_id, tenant_url_code, **kwargs)  # noqa: E501
            return data

    def territory_manager_update_territory_manager_urbanicity_value_with_http_info(self, body, scenario_id, tenant_url_code, **kwargs):  # noqa: E501
        """territory_manager_update_territory_manager_urbanicity_value  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.territory_manager_update_territory_manager_urbanicity_value_with_http_info(body, scenario_id, tenant_url_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TerritoryManagerUrbanicity body: (required)
        :param str scenario_id: (required)
        :param str tenant_url_code: (required)
        :return: TerritoryManagerUrbanicity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'scenario_id', 'tenant_url_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method territory_manager_update_territory_manager_urbanicity_value" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `territory_manager_update_territory_manager_urbanicity_value`")  # noqa: E501
        # verify the required parameter 'scenario_id' is set
        if ('scenario_id' not in params or
                params['scenario_id'] is None):
            raise ValueError("Missing the required parameter `scenario_id` when calling `territory_manager_update_territory_manager_urbanicity_value`")  # noqa: E501
        # verify the required parameter 'tenant_url_code' is set
        if ('tenant_url_code' not in params or
                params['tenant_url_code'] is None):
            raise ValueError("Missing the required parameter `tenant_url_code` when calling `territory_manager_update_territory_manager_urbanicity_value`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scenario_id' in params:
            path_params['scenarioId'] = params['scenario_id']  # noqa: E501
        if 'tenant_url_code' in params:
            path_params['tenantUrlCode'] = params['tenant_url_code']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'secretKey']  # noqa: E501

        return self.api_client.call_api(
            '/{tenantUrlCode}/api/v2/TerritoryManager/{scenarioId}/urbanicity-value', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TerritoryManagerUrbanicity',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def territory_manager_update_territory_point_values(self, body, scenario_id, pos_id, tenant_url_code, **kwargs):  # noqa: E501
        """territory_manager_update_territory_point_values  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.territory_manager_update_territory_point_values(body, scenario_id, pos_id, tenant_url_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TerritoryPointDataRowUpdateParameter body: (required)
        :param str scenario_id: (required)
        :param str pos_id: (required)
        :param str tenant_url_code: (required)
        :return: DataRow
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.territory_manager_update_territory_point_values_with_http_info(body, scenario_id, pos_id, tenant_url_code, **kwargs)  # noqa: E501
        else:
            (data) = self.territory_manager_update_territory_point_values_with_http_info(body, scenario_id, pos_id, tenant_url_code, **kwargs)  # noqa: E501
            return data

    def territory_manager_update_territory_point_values_with_http_info(self, body, scenario_id, pos_id, tenant_url_code, **kwargs):  # noqa: E501
        """territory_manager_update_territory_point_values  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.territory_manager_update_territory_point_values_with_http_info(body, scenario_id, pos_id, tenant_url_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TerritoryPointDataRowUpdateParameter body: (required)
        :param str scenario_id: (required)
        :param str pos_id: (required)
        :param str tenant_url_code: (required)
        :return: DataRow
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'scenario_id', 'pos_id', 'tenant_url_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method territory_manager_update_territory_point_values" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `territory_manager_update_territory_point_values`")  # noqa: E501
        # verify the required parameter 'scenario_id' is set
        if ('scenario_id' not in params or
                params['scenario_id'] is None):
            raise ValueError("Missing the required parameter `scenario_id` when calling `territory_manager_update_territory_point_values`")  # noqa: E501
        # verify the required parameter 'pos_id' is set
        if ('pos_id' not in params or
                params['pos_id'] is None):
            raise ValueError("Missing the required parameter `pos_id` when calling `territory_manager_update_territory_point_values`")  # noqa: E501
        # verify the required parameter 'tenant_url_code' is set
        if ('tenant_url_code' not in params or
                params['tenant_url_code'] is None):
            raise ValueError("Missing the required parameter `tenant_url_code` when calling `territory_manager_update_territory_point_values`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scenario_id' in params:
            path_params['scenarioId'] = params['scenario_id']  # noqa: E501
        if 'pos_id' in params:
            path_params['posId'] = params['pos_id']  # noqa: E501
        if 'tenant_url_code' in params:
            path_params['tenantUrlCode'] = params['tenant_url_code']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'secretKey']  # noqa: E501

        return self.api_client.call_api(
            '/{tenantUrlCode}/api/v2/TerritoryManager/{scenarioId}/territory-pos/{posId}/update-point-values', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DataRow',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def territory_manager_update_territory_pos_blocks(self, body, scenario_id, pos_id, tenant_url_code, **kwargs):  # noqa: E501
        """Updates the territory with the collection of Block paramaters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.territory_manager_update_territory_pos_blocks(body, scenario_id, pos_id, tenant_url_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateTerritoryBlocksParameter body: The UpdateTerritoryBlocksParameter parameter object to add/remove for the targeted territory. (required)
        :param str scenario_id: The scenario internal system identifier. (required)
        :param str pos_id: The territory internal identifier. (required)
        :param str tenant_url_code: (required)
        :return: UpdateTerritoryBlocksResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.territory_manager_update_territory_pos_blocks_with_http_info(body, scenario_id, pos_id, tenant_url_code, **kwargs)  # noqa: E501
        else:
            (data) = self.territory_manager_update_territory_pos_blocks_with_http_info(body, scenario_id, pos_id, tenant_url_code, **kwargs)  # noqa: E501
            return data

    def territory_manager_update_territory_pos_blocks_with_http_info(self, body, scenario_id, pos_id, tenant_url_code, **kwargs):  # noqa: E501
        """Updates the territory with the collection of Block paramaters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.territory_manager_update_territory_pos_blocks_with_http_info(body, scenario_id, pos_id, tenant_url_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateTerritoryBlocksParameter body: The UpdateTerritoryBlocksParameter parameter object to add/remove for the targeted territory. (required)
        :param str scenario_id: The scenario internal system identifier. (required)
        :param str pos_id: The territory internal identifier. (required)
        :param str tenant_url_code: (required)
        :return: UpdateTerritoryBlocksResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'scenario_id', 'pos_id', 'tenant_url_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method territory_manager_update_territory_pos_blocks" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `territory_manager_update_territory_pos_blocks`")  # noqa: E501
        # verify the required parameter 'scenario_id' is set
        if ('scenario_id' not in params or
                params['scenario_id'] is None):
            raise ValueError("Missing the required parameter `scenario_id` when calling `territory_manager_update_territory_pos_blocks`")  # noqa: E501
        # verify the required parameter 'pos_id' is set
        if ('pos_id' not in params or
                params['pos_id'] is None):
            raise ValueError("Missing the required parameter `pos_id` when calling `territory_manager_update_territory_pos_blocks`")  # noqa: E501
        # verify the required parameter 'tenant_url_code' is set
        if ('tenant_url_code' not in params or
                params['tenant_url_code'] is None):
            raise ValueError("Missing the required parameter `tenant_url_code` when calling `territory_manager_update_territory_pos_blocks`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scenario_id' in params:
            path_params['scenarioId'] = params['scenario_id']  # noqa: E501
        if 'pos_id' in params:
            path_params['posId'] = params['pos_id']  # noqa: E501
        if 'tenant_url_code' in params:
            path_params['tenantUrlCode'] = params['tenant_url_code']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'secretKey']  # noqa: E501

        return self.api_client.call_api(
            '/{tenantUrlCode}/api/v2/TerritoryManager/{scenarioId}/territory-pos/{posId}/blocks', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UpdateTerritoryBlocksResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def territory_manager_update_territory_pos_exclusivity(self, body, scenario_id, pos_id, tenant_url_code, **kwargs):  # noqa: E501
        """territory_manager_update_territory_pos_exclusivity  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.territory_manager_update_territory_pos_exclusivity(body, scenario_id, pos_id, tenant_url_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateTerritoryPosExclusivityParameter body: (required)
        :param str scenario_id: (required)
        :param str pos_id: (required)
        :param str tenant_url_code: (required)
        :return: TerritoryPosExclusivityResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.territory_manager_update_territory_pos_exclusivity_with_http_info(body, scenario_id, pos_id, tenant_url_code, **kwargs)  # noqa: E501
        else:
            (data) = self.territory_manager_update_territory_pos_exclusivity_with_http_info(body, scenario_id, pos_id, tenant_url_code, **kwargs)  # noqa: E501
            return data

    def territory_manager_update_territory_pos_exclusivity_with_http_info(self, body, scenario_id, pos_id, tenant_url_code, **kwargs):  # noqa: E501
        """territory_manager_update_territory_pos_exclusivity  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.territory_manager_update_territory_pos_exclusivity_with_http_info(body, scenario_id, pos_id, tenant_url_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateTerritoryPosExclusivityParameter body: (required)
        :param str scenario_id: (required)
        :param str pos_id: (required)
        :param str tenant_url_code: (required)
        :return: TerritoryPosExclusivityResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'scenario_id', 'pos_id', 'tenant_url_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method territory_manager_update_territory_pos_exclusivity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `territory_manager_update_territory_pos_exclusivity`")  # noqa: E501
        # verify the required parameter 'scenario_id' is set
        if ('scenario_id' not in params or
                params['scenario_id'] is None):
            raise ValueError("Missing the required parameter `scenario_id` when calling `territory_manager_update_territory_pos_exclusivity`")  # noqa: E501
        # verify the required parameter 'pos_id' is set
        if ('pos_id' not in params or
                params['pos_id'] is None):
            raise ValueError("Missing the required parameter `pos_id` when calling `territory_manager_update_territory_pos_exclusivity`")  # noqa: E501
        # verify the required parameter 'tenant_url_code' is set
        if ('tenant_url_code' not in params or
                params['tenant_url_code'] is None):
            raise ValueError("Missing the required parameter `tenant_url_code` when calling `territory_manager_update_territory_pos_exclusivity`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scenario_id' in params:
            path_params['scenarioId'] = params['scenario_id']  # noqa: E501
        if 'pos_id' in params:
            path_params['posId'] = params['pos_id']  # noqa: E501
        if 'tenant_url_code' in params:
            path_params['tenantUrlCode'] = params['tenant_url_code']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'secretKey']  # noqa: E501

        return self.api_client.call_api(
            '/{tenantUrlCode}/api/v2/TerritoryManager/{scenarioId}/territory-pos/{posId}/exclusivity', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TerritoryPosExclusivityResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def territory_manager_update_territory_pos_name(self, body, scenario_id, pos_id, tenant_url_code, **kwargs):  # noqa: E501
        """territory_manager_update_territory_pos_name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.territory_manager_update_territory_pos_name(body, scenario_id, pos_id, tenant_url_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: (required)
        :param str scenario_id: (required)
        :param str pos_id: (required)
        :param str tenant_url_code: (required)
        :return: TerritoryPosDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.territory_manager_update_territory_pos_name_with_http_info(body, scenario_id, pos_id, tenant_url_code, **kwargs)  # noqa: E501
        else:
            (data) = self.territory_manager_update_territory_pos_name_with_http_info(body, scenario_id, pos_id, tenant_url_code, **kwargs)  # noqa: E501
            return data

    def territory_manager_update_territory_pos_name_with_http_info(self, body, scenario_id, pos_id, tenant_url_code, **kwargs):  # noqa: E501
        """territory_manager_update_territory_pos_name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.territory_manager_update_territory_pos_name_with_http_info(body, scenario_id, pos_id, tenant_url_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: (required)
        :param str scenario_id: (required)
        :param str pos_id: (required)
        :param str tenant_url_code: (required)
        :return: TerritoryPosDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'scenario_id', 'pos_id', 'tenant_url_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method territory_manager_update_territory_pos_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `territory_manager_update_territory_pos_name`")  # noqa: E501
        # verify the required parameter 'scenario_id' is set
        if ('scenario_id' not in params or
                params['scenario_id'] is None):
            raise ValueError("Missing the required parameter `scenario_id` when calling `territory_manager_update_territory_pos_name`")  # noqa: E501
        # verify the required parameter 'pos_id' is set
        if ('pos_id' not in params or
                params['pos_id'] is None):
            raise ValueError("Missing the required parameter `pos_id` when calling `territory_manager_update_territory_pos_name`")  # noqa: E501
        # verify the required parameter 'tenant_url_code' is set
        if ('tenant_url_code' not in params or
                params['tenant_url_code'] is None):
            raise ValueError("Missing the required parameter `tenant_url_code` when calling `territory_manager_update_territory_pos_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scenario_id' in params:
            path_params['scenarioId'] = params['scenario_id']  # noqa: E501
        if 'pos_id' in params:
            path_params['posId'] = params['pos_id']  # noqa: E501
        if 'tenant_url_code' in params:
            path_params['tenantUrlCode'] = params['tenant_url_code']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'secretKey']  # noqa: E501

        return self.api_client.call_api(
            '/{tenantUrlCode}/api/v2/TerritoryManager/{scenarioId}/territory-pos/{posId}/name', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TerritoryPosDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def territory_manager_update_territory_pos_pta(self, scenario_id, pos_id, pta_zone_id, tenant_url_code, **kwargs):  # noqa: E501
        """territory_manager_update_territory_pos_pta  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.territory_manager_update_territory_pos_pta(scenario_id, pos_id, pta_zone_id, tenant_url_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scenario_id: (required)
        :param str pos_id: (required)
        :param int pta_zone_id: (required)
        :param str tenant_url_code: (required)
        :return: TerritoryPosDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.territory_manager_update_territory_pos_pta_with_http_info(scenario_id, pos_id, pta_zone_id, tenant_url_code, **kwargs)  # noqa: E501
        else:
            (data) = self.territory_manager_update_territory_pos_pta_with_http_info(scenario_id, pos_id, pta_zone_id, tenant_url_code, **kwargs)  # noqa: E501
            return data

    def territory_manager_update_territory_pos_pta_with_http_info(self, scenario_id, pos_id, pta_zone_id, tenant_url_code, **kwargs):  # noqa: E501
        """territory_manager_update_territory_pos_pta  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.territory_manager_update_territory_pos_pta_with_http_info(scenario_id, pos_id, pta_zone_id, tenant_url_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scenario_id: (required)
        :param str pos_id: (required)
        :param int pta_zone_id: (required)
        :param str tenant_url_code: (required)
        :return: TerritoryPosDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scenario_id', 'pos_id', 'pta_zone_id', 'tenant_url_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method territory_manager_update_territory_pos_pta" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'scenario_id' is set
        if ('scenario_id' not in params or
                params['scenario_id'] is None):
            raise ValueError("Missing the required parameter `scenario_id` when calling `territory_manager_update_territory_pos_pta`")  # noqa: E501
        # verify the required parameter 'pos_id' is set
        if ('pos_id' not in params or
                params['pos_id'] is None):
            raise ValueError("Missing the required parameter `pos_id` when calling `territory_manager_update_territory_pos_pta`")  # noqa: E501
        # verify the required parameter 'pta_zone_id' is set
        if ('pta_zone_id' not in params or
                params['pta_zone_id'] is None):
            raise ValueError("Missing the required parameter `pta_zone_id` when calling `territory_manager_update_territory_pos_pta`")  # noqa: E501
        # verify the required parameter 'tenant_url_code' is set
        if ('tenant_url_code' not in params or
                params['tenant_url_code'] is None):
            raise ValueError("Missing the required parameter `tenant_url_code` when calling `territory_manager_update_territory_pos_pta`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scenario_id' in params:
            path_params['scenarioId'] = params['scenario_id']  # noqa: E501
        if 'pos_id' in params:
            path_params['posId'] = params['pos_id']  # noqa: E501
        if 'pta_zone_id' in params:
            path_params['ptaZoneId'] = params['pta_zone_id']  # noqa: E501
        if 'tenant_url_code' in params:
            path_params['tenantUrlCode'] = params['tenant_url_code']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'secretKey']  # noqa: E501

        return self.api_client.call_api(
            '/{tenantUrlCode}/api/v2/TerritoryManager/{scenarioId}/territory-pos/{posId}/pta-zone/{ptaZoneId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TerritoryPosDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def territory_manager_update_territory_status(self, body, scenario_id, pos_id, tenant_url_code, **kwargs):  # noqa: E501
        """territory_manager_update_territory_status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.territory_manager_update_territory_status(body, scenario_id, pos_id, tenant_url_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateTerritoryPosStatusParameter body: (required)
        :param str scenario_id: (required)
        :param str pos_id: (required)
        :param str tenant_url_code: (required)
        :return: TerritoryStatusUpdateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.territory_manager_update_territory_status_with_http_info(body, scenario_id, pos_id, tenant_url_code, **kwargs)  # noqa: E501
        else:
            (data) = self.territory_manager_update_territory_status_with_http_info(body, scenario_id, pos_id, tenant_url_code, **kwargs)  # noqa: E501
            return data

    def territory_manager_update_territory_status_with_http_info(self, body, scenario_id, pos_id, tenant_url_code, **kwargs):  # noqa: E501
        """territory_manager_update_territory_status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.territory_manager_update_territory_status_with_http_info(body, scenario_id, pos_id, tenant_url_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateTerritoryPosStatusParameter body: (required)
        :param str scenario_id: (required)
        :param str pos_id: (required)
        :param str tenant_url_code: (required)
        :return: TerritoryStatusUpdateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'scenario_id', 'pos_id', 'tenant_url_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method territory_manager_update_territory_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `territory_manager_update_territory_status`")  # noqa: E501
        # verify the required parameter 'scenario_id' is set
        if ('scenario_id' not in params or
                params['scenario_id'] is None):
            raise ValueError("Missing the required parameter `scenario_id` when calling `territory_manager_update_territory_status`")  # noqa: E501
        # verify the required parameter 'pos_id' is set
        if ('pos_id' not in params or
                params['pos_id'] is None):
            raise ValueError("Missing the required parameter `pos_id` when calling `territory_manager_update_territory_status`")  # noqa: E501
        # verify the required parameter 'tenant_url_code' is set
        if ('tenant_url_code' not in params or
                params['tenant_url_code'] is None):
            raise ValueError("Missing the required parameter `tenant_url_code` when calling `territory_manager_update_territory_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scenario_id' in params:
            path_params['scenarioId'] = params['scenario_id']  # noqa: E501
        if 'pos_id' in params:
            path_params['posId'] = params['pos_id']  # noqa: E501
        if 'tenant_url_code' in params:
            path_params['tenantUrlCode'] = params['tenant_url_code']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'secretKey']  # noqa: E501

        return self.api_client.call_api(
            '/{tenantUrlCode}/api/v2/TerritoryManager/{scenarioId}/territory-pos/{posId}/status', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TerritoryStatusUpdateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
