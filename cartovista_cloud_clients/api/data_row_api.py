# coding: utf-8

"""
    CartoVista REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from cartovista_cloud_clients.api_client import ApiClient


class DataRowApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def data_row_create_data_rows(self, body, data_table_identifier, tenant_url_code, **kwargs):  # noqa: E501
        """Creates new data rows in the table. A subset of the columns can be used. A layer's table can be used.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_row_create_data_rows(body, data_table_identifier, tenant_url_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[DataRowCreateParameter] body: (required)
        :param str data_table_identifier: (required)
        :param str tenant_url_code: (required)
        :return: ApiInsertReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.data_row_create_data_rows_with_http_info(body, data_table_identifier, tenant_url_code, **kwargs)  # noqa: E501
        else:
            (data) = self.data_row_create_data_rows_with_http_info(body, data_table_identifier, tenant_url_code, **kwargs)  # noqa: E501
            return data

    def data_row_create_data_rows_with_http_info(self, body, data_table_identifier, tenant_url_code, **kwargs):  # noqa: E501
        """Creates new data rows in the table. A subset of the columns can be used. A layer's table can be used.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_row_create_data_rows_with_http_info(body, data_table_identifier, tenant_url_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[DataRowCreateParameter] body: (required)
        :param str data_table_identifier: (required)
        :param str tenant_url_code: (required)
        :return: ApiInsertReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'data_table_identifier', 'tenant_url_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_row_create_data_rows" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `data_row_create_data_rows`")  # noqa: E501
        # verify the required parameter 'data_table_identifier' is set
        if ('data_table_identifier' not in params or
                params['data_table_identifier'] is None):
            raise ValueError("Missing the required parameter `data_table_identifier` when calling `data_row_create_data_rows`")  # noqa: E501
        # verify the required parameter 'tenant_url_code' is set
        if ('tenant_url_code' not in params or
                params['tenant_url_code'] is None):
            raise ValueError("Missing the required parameter `tenant_url_code` when calling `data_row_create_data_rows`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'data_table_identifier' in params:
            path_params['dataTableIdentifier'] = params['data_table_identifier']  # noqa: E501
        if 'tenant_url_code' in params:
            path_params['tenantUrlCode'] = params['tenant_url_code']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'secretKey']  # noqa: E501

        return self.api_client.call_api(
            '/{tenantUrlCode}/api/v2/DataTable/{dataTableIdentifier}/createDataRows', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiInsertReport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def data_row_create_update_data_rows(self, body, data_table_identifier, tenant_url_code, **kwargs):  # noqa: E501
        """Creates new data rows or updates them if they already exists in the table. A subset of the columns can be used. A layer's table can be used.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_row_create_update_data_rows(body, data_table_identifier, tenant_url_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[DataRowCreateParameter] body: (required)
        :param str data_table_identifier: (required)
        :param str tenant_url_code: (required)
        :return: ApiCreateUpdateReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.data_row_create_update_data_rows_with_http_info(body, data_table_identifier, tenant_url_code, **kwargs)  # noqa: E501
        else:
            (data) = self.data_row_create_update_data_rows_with_http_info(body, data_table_identifier, tenant_url_code, **kwargs)  # noqa: E501
            return data

    def data_row_create_update_data_rows_with_http_info(self, body, data_table_identifier, tenant_url_code, **kwargs):  # noqa: E501
        """Creates new data rows or updates them if they already exists in the table. A subset of the columns can be used. A layer's table can be used.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_row_create_update_data_rows_with_http_info(body, data_table_identifier, tenant_url_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[DataRowCreateParameter] body: (required)
        :param str data_table_identifier: (required)
        :param str tenant_url_code: (required)
        :return: ApiCreateUpdateReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'data_table_identifier', 'tenant_url_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_row_create_update_data_rows" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `data_row_create_update_data_rows`")  # noqa: E501
        # verify the required parameter 'data_table_identifier' is set
        if ('data_table_identifier' not in params or
                params['data_table_identifier'] is None):
            raise ValueError("Missing the required parameter `data_table_identifier` when calling `data_row_create_update_data_rows`")  # noqa: E501
        # verify the required parameter 'tenant_url_code' is set
        if ('tenant_url_code' not in params or
                params['tenant_url_code'] is None):
            raise ValueError("Missing the required parameter `tenant_url_code` when calling `data_row_create_update_data_rows`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'data_table_identifier' in params:
            path_params['dataTableIdentifier'] = params['data_table_identifier']  # noqa: E501
        if 'tenant_url_code' in params:
            path_params['tenantUrlCode'] = params['tenant_url_code']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'secretKey']  # noqa: E501

        return self.api_client.call_api(
            '/{tenantUrlCode}/api/v2/DataTable/{dataTableIdentifier}/createUpdateDataRows', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiCreateUpdateReport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def data_row_delete_data_row(self, data_table_identifier, data_row_identifier, tenant_url_code, **kwargs):  # noqa: E501
        """Deletes a specific row in the table. A layer's table can be used.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_row_delete_data_row(data_table_identifier, data_row_identifier, tenant_url_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str data_table_identifier: (required)
        :param str data_row_identifier: (required)
        :param str tenant_url_code: (required)
        :return: ApiDeleteReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.data_row_delete_data_row_with_http_info(data_table_identifier, data_row_identifier, tenant_url_code, **kwargs)  # noqa: E501
        else:
            (data) = self.data_row_delete_data_row_with_http_info(data_table_identifier, data_row_identifier, tenant_url_code, **kwargs)  # noqa: E501
            return data

    def data_row_delete_data_row_with_http_info(self, data_table_identifier, data_row_identifier, tenant_url_code, **kwargs):  # noqa: E501
        """Deletes a specific row in the table. A layer's table can be used.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_row_delete_data_row_with_http_info(data_table_identifier, data_row_identifier, tenant_url_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str data_table_identifier: (required)
        :param str data_row_identifier: (required)
        :param str tenant_url_code: (required)
        :return: ApiDeleteReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_table_identifier', 'data_row_identifier', 'tenant_url_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_row_delete_data_row" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_table_identifier' is set
        if ('data_table_identifier' not in params or
                params['data_table_identifier'] is None):
            raise ValueError("Missing the required parameter `data_table_identifier` when calling `data_row_delete_data_row`")  # noqa: E501
        # verify the required parameter 'data_row_identifier' is set
        if ('data_row_identifier' not in params or
                params['data_row_identifier'] is None):
            raise ValueError("Missing the required parameter `data_row_identifier` when calling `data_row_delete_data_row`")  # noqa: E501
        # verify the required parameter 'tenant_url_code' is set
        if ('tenant_url_code' not in params or
                params['tenant_url_code'] is None):
            raise ValueError("Missing the required parameter `tenant_url_code` when calling `data_row_delete_data_row`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'data_table_identifier' in params:
            path_params['dataTableIdentifier'] = params['data_table_identifier']  # noqa: E501
        if 'data_row_identifier' in params:
            path_params['dataRowIdentifier'] = params['data_row_identifier']  # noqa: E501
        if 'tenant_url_code' in params:
            path_params['tenantUrlCode'] = params['tenant_url_code']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'secretKey']  # noqa: E501

        return self.api_client.call_api(
            '/{tenantUrlCode}/api/v2/DataTable/{dataTableIdentifier}/DataRow/{dataRowIdentifier}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiDeleteReport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def data_row_delete_datarows(self, body, data_table_identifier, tenant_url_code, **kwargs):  # noqa: E501
        """Deletes the rows in the table by identifier. Invalid identifiers are ignored.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_row_delete_datarows(body, data_table_identifier, tenant_url_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] body: (required)
        :param str data_table_identifier: (required)
        :param str tenant_url_code: (required)
        :return: ApiDeleteReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.data_row_delete_datarows_with_http_info(body, data_table_identifier, tenant_url_code, **kwargs)  # noqa: E501
        else:
            (data) = self.data_row_delete_datarows_with_http_info(body, data_table_identifier, tenant_url_code, **kwargs)  # noqa: E501
            return data

    def data_row_delete_datarows_with_http_info(self, body, data_table_identifier, tenant_url_code, **kwargs):  # noqa: E501
        """Deletes the rows in the table by identifier. Invalid identifiers are ignored.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_row_delete_datarows_with_http_info(body, data_table_identifier, tenant_url_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] body: (required)
        :param str data_table_identifier: (required)
        :param str tenant_url_code: (required)
        :return: ApiDeleteReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'data_table_identifier', 'tenant_url_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_row_delete_datarows" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `data_row_delete_datarows`")  # noqa: E501
        # verify the required parameter 'data_table_identifier' is set
        if ('data_table_identifier' not in params or
                params['data_table_identifier'] is None):
            raise ValueError("Missing the required parameter `data_table_identifier` when calling `data_row_delete_datarows`")  # noqa: E501
        # verify the required parameter 'tenant_url_code' is set
        if ('tenant_url_code' not in params or
                params['tenant_url_code'] is None):
            raise ValueError("Missing the required parameter `tenant_url_code` when calling `data_row_delete_datarows`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'data_table_identifier' in params:
            path_params['dataTableIdentifier'] = params['data_table_identifier']  # noqa: E501
        if 'tenant_url_code' in params:
            path_params['tenantUrlCode'] = params['tenant_url_code']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'secretKey']  # noqa: E501

        return self.api_client.call_api(
            '/{tenantUrlCode}/api/v2/DataTable/{dataTableIdentifier}/DataRows', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiDeleteReport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def data_row_get_data_row(self, data_table_identifier, data_row_identifier, tenant_url_code, **kwargs):  # noqa: E501
        """Gets a specific row in the table. The geometry column is ignored if the table belongs to a layer.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_row_get_data_row(data_table_identifier, data_row_identifier, tenant_url_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str data_table_identifier: (required)
        :param str data_row_identifier: (required)
        :param str tenant_url_code: (required)
        :return: DataRow
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.data_row_get_data_row_with_http_info(data_table_identifier, data_row_identifier, tenant_url_code, **kwargs)  # noqa: E501
        else:
            (data) = self.data_row_get_data_row_with_http_info(data_table_identifier, data_row_identifier, tenant_url_code, **kwargs)  # noqa: E501
            return data

    def data_row_get_data_row_with_http_info(self, data_table_identifier, data_row_identifier, tenant_url_code, **kwargs):  # noqa: E501
        """Gets a specific row in the table. The geometry column is ignored if the table belongs to a layer.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_row_get_data_row_with_http_info(data_table_identifier, data_row_identifier, tenant_url_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str data_table_identifier: (required)
        :param str data_row_identifier: (required)
        :param str tenant_url_code: (required)
        :return: DataRow
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_table_identifier', 'data_row_identifier', 'tenant_url_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_row_get_data_row" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_table_identifier' is set
        if ('data_table_identifier' not in params or
                params['data_table_identifier'] is None):
            raise ValueError("Missing the required parameter `data_table_identifier` when calling `data_row_get_data_row`")  # noqa: E501
        # verify the required parameter 'data_row_identifier' is set
        if ('data_row_identifier' not in params or
                params['data_row_identifier'] is None):
            raise ValueError("Missing the required parameter `data_row_identifier` when calling `data_row_get_data_row`")  # noqa: E501
        # verify the required parameter 'tenant_url_code' is set
        if ('tenant_url_code' not in params or
                params['tenant_url_code'] is None):
            raise ValueError("Missing the required parameter `tenant_url_code` when calling `data_row_get_data_row`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'data_table_identifier' in params:
            path_params['dataTableIdentifier'] = params['data_table_identifier']  # noqa: E501
        if 'data_row_identifier' in params:
            path_params['dataRowIdentifier'] = params['data_row_identifier']  # noqa: E501
        if 'tenant_url_code' in params:
            path_params['tenantUrlCode'] = params['tenant_url_code']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'secretKey']  # noqa: E501

        return self.api_client.call_api(
            '/{tenantUrlCode}/api/v2/DataTable/{dataTableIdentifier}/DataRow/{dataRowIdentifier}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DataRow',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def data_row_get_data_rows(self, body, data_table_identifier, tenant_url_code, **kwargs):  # noqa: E501
        """Gets the rows in the table.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_row_get_data_rows(body, data_table_identifier, tenant_url_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DataRowsGetParameters body: (required)
        :param str data_table_identifier: (required)
        :param str tenant_url_code: (required)
        :return: list[DataRow]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.data_row_get_data_rows_with_http_info(body, data_table_identifier, tenant_url_code, **kwargs)  # noqa: E501
        else:
            (data) = self.data_row_get_data_rows_with_http_info(body, data_table_identifier, tenant_url_code, **kwargs)  # noqa: E501
            return data

    def data_row_get_data_rows_with_http_info(self, body, data_table_identifier, tenant_url_code, **kwargs):  # noqa: E501
        """Gets the rows in the table.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_row_get_data_rows_with_http_info(body, data_table_identifier, tenant_url_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DataRowsGetParameters body: (required)
        :param str data_table_identifier: (required)
        :param str tenant_url_code: (required)
        :return: list[DataRow]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'data_table_identifier', 'tenant_url_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_row_get_data_rows" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `data_row_get_data_rows`")  # noqa: E501
        # verify the required parameter 'data_table_identifier' is set
        if ('data_table_identifier' not in params or
                params['data_table_identifier'] is None):
            raise ValueError("Missing the required parameter `data_table_identifier` when calling `data_row_get_data_rows`")  # noqa: E501
        # verify the required parameter 'tenant_url_code' is set
        if ('tenant_url_code' not in params or
                params['tenant_url_code'] is None):
            raise ValueError("Missing the required parameter `tenant_url_code` when calling `data_row_get_data_rows`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'data_table_identifier' in params:
            path_params['dataTableIdentifier'] = params['data_table_identifier']  # noqa: E501
        if 'tenant_url_code' in params:
            path_params['tenantUrlCode'] = params['tenant_url_code']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'secretKey']  # noqa: E501

        return self.api_client.call_api(
            '/{tenantUrlCode}/api/v2/DataTable/{dataTableIdentifier}/DataRows', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DataRow]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def data_row_update_data_row(self, body, data_table_identifier, data_row_identifier, tenant_url_code, **kwargs):  # noqa: E501
        """Updates a specific row in the table. A subset of the columns can be used. A layer's table can be used.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_row_update_data_row(body, data_table_identifier, data_row_identifier, tenant_url_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DataRowUpdateParameter body: (required)
        :param str data_table_identifier: (required)
        :param str data_row_identifier: (required)
        :param str tenant_url_code: (required)
        :return: DataRow
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.data_row_update_data_row_with_http_info(body, data_table_identifier, data_row_identifier, tenant_url_code, **kwargs)  # noqa: E501
        else:
            (data) = self.data_row_update_data_row_with_http_info(body, data_table_identifier, data_row_identifier, tenant_url_code, **kwargs)  # noqa: E501
            return data

    def data_row_update_data_row_with_http_info(self, body, data_table_identifier, data_row_identifier, tenant_url_code, **kwargs):  # noqa: E501
        """Updates a specific row in the table. A subset of the columns can be used. A layer's table can be used.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_row_update_data_row_with_http_info(body, data_table_identifier, data_row_identifier, tenant_url_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DataRowUpdateParameter body: (required)
        :param str data_table_identifier: (required)
        :param str data_row_identifier: (required)
        :param str tenant_url_code: (required)
        :return: DataRow
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'data_table_identifier', 'data_row_identifier', 'tenant_url_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_row_update_data_row" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `data_row_update_data_row`")  # noqa: E501
        # verify the required parameter 'data_table_identifier' is set
        if ('data_table_identifier' not in params or
                params['data_table_identifier'] is None):
            raise ValueError("Missing the required parameter `data_table_identifier` when calling `data_row_update_data_row`")  # noqa: E501
        # verify the required parameter 'data_row_identifier' is set
        if ('data_row_identifier' not in params or
                params['data_row_identifier'] is None):
            raise ValueError("Missing the required parameter `data_row_identifier` when calling `data_row_update_data_row`")  # noqa: E501
        # verify the required parameter 'tenant_url_code' is set
        if ('tenant_url_code' not in params or
                params['tenant_url_code'] is None):
            raise ValueError("Missing the required parameter `tenant_url_code` when calling `data_row_update_data_row`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'data_table_identifier' in params:
            path_params['dataTableIdentifier'] = params['data_table_identifier']  # noqa: E501
        if 'data_row_identifier' in params:
            path_params['dataRowIdentifier'] = params['data_row_identifier']  # noqa: E501
        if 'tenant_url_code' in params:
            path_params['tenantUrlCode'] = params['tenant_url_code']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'secretKey']  # noqa: E501

        return self.api_client.call_api(
            '/{tenantUrlCode}/api/v2/DataTable/{dataTableIdentifier}/DataRow/{dataRowIdentifier}/update', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DataRow',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
